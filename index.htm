<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
    <head>
        <title> oftenpaper.net </title>

        <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.9.0/build/reset-fonts-grids/reset-fonts-grids.css">
        <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.9.0/build/base/base-min.css">
        <link rel="stylesheet" type="text/css" href="oftencss.css">

        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
        <script type="text/javascript" src="flipbook.js"></script>

        <script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax:{inlineMath:[['$','$']]}})</script>
        <script type="text/javascript" id="mathjax" src="https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    </head>

<body>
    <h1><a href="/"> oftenpaper.net </a></h1>
    <h3>Antonio Marquez-Raygoza &#0153;</h3>

    <div class="content">

        <div class="links centered">
            <a class="pagelink" style="color: white;">&lt;&lt;</a>
            <span class="pagelink inactivePagelink">1</span>
            <a href="page2.htm" class="pagelink">2</a>
            <a href="page2.htm" class="pagelink">&gt;&gt;</a>
        </div>

        <div class="section">
            <div class="header"> <img src="img/hudicon.png" /> <a href="permanent-hudcalc.htm"><h2>HUD\Calc</h2></a> </div>

            <div class="imageRegion">
                <img src="img/calc1.png" width="160" height="240" />
                <img src="img/calc2.png" width="240" height="160" />
                <img src="img/calc3.png" width="160" height="240" />
                <!--a href="img/calc1.png"><img src="img/calc1.png" width="160" height="240" /></a>
                <a href="img/calc2.png"><img src="img/calc2.png" width="240" height="160" /></a>
                <a href="img/calc3.png"><img src="img/calc3.png" height="240" width="160" /></a-->
            </div>
            <!--div class="imageRegion centered" style="padding-top:0px;"> <a href="img/monkey.png"><img style="padding-left: 2px; padding-right: 2px;" src="img/monkey_small.png"/></a> </div-->

            <p>
            HUD\Calc is a simple calculator app I made to get acquainted with Android development. I have since forgotten everything I learned. The interaction of the app is intended to be rapid/direct/tactile, something you'll notice is not a feature of any of the default Android programs, all of which seem to have been intentionally designed to annoy the hell out of me with their automated phone system-inspired UIs. You can find HUD\Calc at the Android store <a href="https://play.google.com/store/apps/details?id=com.projectfancycorn.hudcalc">here</a>.
            </p>

        </div>

        <div class="section">
            <div class="header">
                <a href="#cellularautomata" name="cellularautomata"></a> <img src="img/aspect1.png" /> <a href="permanent-cellularautomata.htm"><h2>Cellular Automata</h2></a> </div>

            <p>
                As everyone learns in grade school, typical 1-dimensional cellular automata are identified at the edges
                and thus their evolutions form topological cylinders. An obvious method of visualization then
                is a proper geometric cylinder:
            </p>

            <ol class="flipbook static" name="cellular automata">
                <li>
                    <img src="img/automata1.png" width="648" height="584"/>
                </li>
                <li>
                    <img src="img/automata2.png" width="648" height="628"/>
                </li>
                <li>
                    <img src="img/automata3.png" width="649" height="587"/>
                </li>
                <li>
                    <img src="img/automata4.png" width="648" height="628"/>
                </li>
                <li>
                    <img src="img/automatamenu.png" width="235" height="534" />
                </li>
                <li name="source">
<pre style="font-size: 2px">





graphicsSize <span class="Statement">=</span> {<span class="Type">600</span>, <span class="Type">400</span>};
gridControlHeight <span class="Statement">=</span> <span class="Type">14</span>;
shapeChoicesIconSize <span class="Statement">=</span> {<span class="Type">25</span>, <span class="Type">25</span>};

{widthDefault, widthMin, widthMax} <span class="Statement">=</span> {<span class="Type">40</span>, <span class="Type">30</span>, <span class="Type">60</span>};
{iterationsDefault, iterationsMin, iterationsMax} <span class="Statement">=</span> {<span class="Type">60</span>, <span class="Type">10</span>, <span class="Type">80</span>};

<span class="Comment">(*shape choices*)</span>
<span class="Identifier">createShapeChoices</span>[<span class="Type">ls_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{},
   (<span class="Identifier">shapeOverlap</span>[<span class="Statement">#</span>[[<span class="Type">1</span>]]] <span class="Statement">=</span> <span class="Statement">#</span>[[<span class="Type">4</span>]]) <span class="Statement">&amp;</span> <span class="Statement">/@</span> ls;
   <span class="Statement">#</span>[[<span class="Type">1</span>]] <span class="Statement">-&gt;</span> <span class="Identifier">Tooltip</span>[<span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[], <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Rotate</span>[<span class="Identifier">Cuboid</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Statement">#</span>[[<span class="Type">1</span>]]}], <span class="Statement">#</span>[[<span class="Type">3</span>]], {<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">0</span>}]},
        Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, ImageSize <span class="Statement">-&gt;</span> shapeChoicesIconSize], <span class="Statement">#</span>[[<span class="Type">2</span>]], TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ls];

shapeChoices <span class="Statement">=</span> <span class="Identifier">createShapeChoices</span>[{{<span class="Statement">.</span><span class="Type">2</span>, <span class="String">&quot;wafer&quot;</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="String">&quot;block&quot;</span>, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">14</span>}, {<span class="Type">12</span>, <span class="String">&quot;spaghetti&quot;</span>, <span class="String">\[Pi]</span><span class="Statement">/</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">14</span>}}];

<span class="Comment">(*CellularAutomaton choices and the range of the 'rule' slider*)</span>
automata <span class="Statement">=</span> {
   {{n, <span class="Type">2</span>, <span class="Type">1</span>}, <span class="String">&quot; E &quot;</span>, <span class="String">&quot;Elementary&quot;</span>, <span class="Type">255</span>},
   {{n, {<span class="Type">2</span>, <span class="Type">1</span>}, <span class="Type">2</span>}, <span class="String">&quot;T2&quot;</span>, <span class="String">&quot;Totalistic, Range 2&quot;</span>, <span class="Type">63</span>},
   {{n, {<span class="Type">2</span>, <span class="Type">1</span>}, <span class="Type">3</span>}, <span class="String">&quot;T3&quot;</span>, <span class="String">&quot;Totalistic, Range 3&quot;</span>, <span class="Type">255</span>},
   {{n, {<span class="Type">2</span>, <span class="Type">1</span>}, <span class="Type">4</span>}, <span class="String">&quot;T4&quot;</span>, <span class="String">&quot;Totalistic, Range 4&quot;</span>, <span class="Type">1023</span>},
   {{n, {<span class="Type">2</span>, <span class="Type">1</span>}, <span class="Type">5</span>}, <span class="String">&quot;T5&quot;</span>, <span class="String">&quot;Totalistic, Range 5&quot;</span>, <span class="Type">4095</span>}};

typeChoices <span class="Statement">=</span> <span class="Statement">#</span>[[<span class="Type">1</span>]] <span class="Statement">-&gt;</span> <span class="Identifier">Tooltip</span>[<span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Statement">#</span>[[<span class="Type">3</span>]], TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> automata;
<span class="Identifier">Do</span>[<span class="Identifier">ruleMax</span>[<span class="Identifier">a</span>[[<span class="Type">1</span>]]] <span class="Statement">=</span> <span class="Identifier">a</span>[[<span class="Type">4</span>]], {a, automata}];

<span class="Comment">(*initial array operations*)</span>
opList <span class="Statement">=</span> {
   <span class="Comment">(*reset*)</span> <span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">Dynamic</span>[ <span class="Identifier">ArrayPlot</span>[{<span class="Identifier">Table</span>[<span class="Identifier">If</span>[i <span class="Statement">==</span> <span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>], {i, <span class="Type">1</span>, <span class="Type">9</span>}]}, Mesh <span class="Statement">-&gt;</span> <span class="Identifier">All</span>, ColorFunction <span class="Statement">-&gt;</span> arrayColor, ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>], TrackedSymbols <span class="Statement">:&gt;</span> {arrayColor}], <span class="String">&quot;reset&quot;</span>},
     Alignment <span class="Statement">-&gt;</span> {Center, Center}]
    <span class="Statement">:&gt;</span> (initialArray <span class="Statement">=</span> <span class="Identifier">ConstantArray</span>[<span class="Type">0</span>, width]; <span class="Identifier">initialArray</span>[[<span class="Type">1</span>]] <span class="Statement">=</span> <span class="Type">1</span>),
   <span class="Comment">(*invert*)</span> <span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">Dynamic</span>[ <span class="Identifier">ArrayPlot</span>[{<span class="Identifier">Table</span>[<span class="Identifier">If</span>[i <span class="Statement">==</span> <span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">1</span>], {i, <span class="Type">1</span>, <span class="Type">9</span>}]}, Mesh <span class="Statement">-&gt;</span> <span class="Identifier">All</span>, ColorFunction <span class="Statement">-&gt;</span> arrayColor, ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>], TrackedSymbols <span class="Statement">:&gt;</span> {arrayColor}], <span class="String">&quot;invert&quot;</span>},
     Alignment <span class="Statement">-&gt;</span> {Center, Center}]
    <span class="Statement">:&gt;</span> (initialArray <span class="Statement">=</span> <span class="Identifier">Boole</span>[<span class="Statement">#</span> <span class="Statement">==</span> <span class="Type">0</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> initialArray),
   <span class="Comment">(*randomize*)</span><span class="Identifier">Module</span>[{conjure, entropyList},
    <span class="Identifier">conjure</span>[] <span class="Statement">:=</span> <span class="Identifier">While</span>[<span class="Identifier">Entropy</span>[entropyList <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Type">9</span>]] <span class="Statement">&lt;</span> <span class="Statement">.</span><span class="Type">65</span>]; <span class="Identifier">conjure</span>[];
    <span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">Dynamic</span>[<span class="Identifier">ArrayPlot</span>[{entropyList}, Mesh <span class="Statement">-&gt;</span> <span class="Identifier">All</span>, ColorFunction <span class="Statement">-&gt;</span> arrayColor, ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>], TrackedSymbols <span class="Statement">:&gt;</span> {arrayColor, entropyList}], <span class="String">&quot;randomize&quot;</span>},
      Alignment <span class="Statement">-&gt;</span> {Center, Center}]
     <span class="Statement">:&gt;</span> (initialArray <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, width]; <span class="Identifier">conjure</span>[])]};

<span class="Comment">(*color scheme bookmarks*)</span>
<span class="Identifier">ColorSchemeIcon</span>[<span class="Type">foreground_</span>, <span class="Type">background_</span>] <span class="Statement">:=</span>
 <span class="Identifier">Graphics</span>[{background, <span class="Identifier">Rectangle</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}], foreground, <span class="Identifier">Rectangle</span>[{<span class="Statement">.</span><span class="Type">25</span>, <span class="Statement">.</span><span class="Type">25</span>}, {<span class="Statement">.</span><span class="Type">75</span>, <span class="Statement">.</span><span class="Type">75</span>}]}, ImageSize <span class="Statement">-&gt;</span> {<span class="Type">20</span>, <span class="Type">20</span>}]
<span class="Identifier">ColorSchemeIcon</span>[<span class="Type">foreground_</span>, <span class="Type">background_</span>, <span class="Identifier">True</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    foreground, <span class="Identifier">Rectangle</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Statement">.</span><span class="Type">5</span>, <span class="Type">1</span>}],
    background, <span class="Identifier">Rectangle</span>[{<span class="Statement">.</span><span class="Type">25</span>, <span class="Statement">.</span><span class="Type">25</span>}, {<span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">75</span>}],
    background, <span class="Identifier">Rectangle</span>[{<span class="Statement">.</span><span class="Type">5</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}],
    foreground, <span class="Identifier">Rectangle</span>[{<span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">25</span>}, {<span class="Statement">.</span><span class="Type">75</span>, <span class="Statement">.</span><span class="Type">75</span>}]}, ImageSize <span class="Statement">-&gt;</span> {<span class="Type">20</span>, <span class="Type">20</span>}];

colorSchemes <span class="Statement">=</span> {
   {<span class="Identifier">Darker</span>[<span class="Identifier">Blend</span>[{<span class="Identifier">Yellow</span>, <span class="Identifier">Green</span>}], <span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">7</span>], <span class="String">&quot;default&quot;</span>},
   {invert, <span class="String">&quot;invert colors&quot;</span>},
   {<span class="Identifier">RGBColor</span>[<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">9495</span>, <span class="Statement">.</span><span class="Type">125</span>], <span class="Identifier">RGBColor</span>[<span class="Type">0</span>, <span class="Statement">.</span><span class="Type">5384</span>, <span class="Statement">.</span><span class="Type">04806</span>]},
   {<span class="Identifier">RGBColor</span>[<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">3846</span>, <span class="Statement">.</span><span class="Type">7143</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">9</span>]},
   {<span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">577</span>, <span class="Statement">.</span><span class="Type">1539</span>, <span class="Type">1</span>], <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">0879</span>, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">3077</span>]},
   {<span class="Identifier">RGBColor</span>[<span class="Type">0</span>, <span class="Statement">.</span><span class="Type">8182</span>, <span class="Statement">.</span><span class="Type">7918</span>], <span class="Identifier">White</span>},
   {<span class="Identifier">White</span>, <span class="Identifier">Black</span>}};

colorSchemeList <span class="Statement">=</span>
  (<span class="Statement">#</span> <span class="Statement">/.</span> {
       {invert, <span class="Type">t_</span>} <span class="Statement">:&gt;</span> (<span class="Identifier">Grid</span>[ <span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">Dynamic</span><span class="Statement">@</span><span class="Identifier">ColorSchemeIcon</span>[background, color, <span class="Identifier">True</span>], t}, Spacings <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">5</span>, Alignment <span class="Statement">-&gt;</span> {Center, Center}] <span class="Statement">:&gt;</span>
          <span class="Identifier">With</span>[{swap <span class="Statement">=</span> color}, {color <span class="Statement">=</span> background, background <span class="Statement">=</span> swap}]),
       {<span class="Type">f_</span>, <span class="Type">b_</span>} <span class="Statement">:&gt;</span> (<span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">ColorSchemeIcon</span>[f, b]}, Spacings <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">5</span>, Alignment <span class="Statement">-&gt;</span> {Center, Center}] <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> f, background <span class="Statement">=</span> b}),
       {<span class="Type">f_</span>, <span class="Type">b_</span>, <span class="Type">t_</span>} <span class="Statement">:&gt;</span> (<span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{<span class="Identifier">ColorSchemeIcon</span>[f, b], t}, Spacings <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">5</span>, Alignment <span class="Statement">-&gt;</span> {Center, Center}] <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> f, background <span class="Statement">=</span> b})
       }) <span class="Statement">&amp;</span> <span class="Statement">/@</span> colorSchemes;

fullRandomBookmark <span class="Statement">=</span> <span class="Identifier">Grid</span>[{{<span class="String">&quot;Full Random&quot;</span>}}] <span class="Statement">:&gt;</span> <span class="Identifier">Module</span>[{},
    color <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[<span class="Identifier">RandomReal</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Type">3</span>]];
    background <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[<span class="Identifier">RandomReal</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Type">3</span>]];
    thickness <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{<span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">3</span>, <span class="Statement">.</span><span class="Type">2</span>} <span class="Statement">-&gt;</span> shapeChoices][[<span class="Type">1</span>]];
    width <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{widthMin, widthMax}];
    iterations <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{iterationsMin, iterationsMax}];
    type <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[typeChoices][[<span class="Type">1</span>]];

    rule <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{<span class="Type">0</span>, <span class="Identifier">ruleMax</span>[type]}];
    initialArray <span class="Statement">=</span> <span class="Identifier">RandomInteger</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, width]];

<span class="Comment">(*the control used for adjusting the initial array*)</span>
<span class="Identifier">gridControl</span>[<span class="Identifier">Dynamic</span>[<span class="Type">var_</span>], <span class="Type">colorFunction_</span>, <span class="Type">maxWidth_</span>, <span class="Type">height_</span>] <span class="Statement">:=</span>
  <span class="Identifier">DynamicModule</span>[{lastValue, lastIndex <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, mouseLoc},

   <span class="Identifier">mouseLoc</span>[] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{pos <span class="Statement">=</span> <span class="Identifier">MousePosition</span>[<span class="String">&quot;Graphics&quot;</span>]},
     <span class="Identifier">If</span>[pos <span class="Statement">===</span> <span class="Identifier">None</span>, <span class="Identifier">None</span>, <span class="Identifier">Ceiling</span>[<span class="Identifier">Abs</span>[<span class="Identifier">First</span><span class="Statement">@</span>pos]]]];

   <span class="Comment">(*main gridControl output*)</span>
   <span class="Identifier">Panel</span>[<span class="Statement">#</span>, ImageSize <span class="Statement">-&gt;</span> maxWidth, Alignment <span class="Statement">-&gt;</span> Center, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Frameless&quot;</span>, FrameMargins <span class="Statement">-&gt;</span> <span class="Type">0</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
    <span class="Identifier">EventHandler</span>[
     <span class="Identifier">Dynamic</span>[<span class="Identifier">ArrayPlot</span>[{var}, Mesh <span class="Statement">-&gt;</span> <span class="Identifier">All</span>, ImageSize <span class="Statement">-&gt;</span> {{maxWidth}, height}, ColorFunction <span class="Statement">-&gt;</span> colorFunction, ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, PlotRangePadding <span class="Statement">-&gt;</span> <span class="Type">0</span>]],

     {<span class="String">&quot;MouseDown&quot;</span> <span class="Statement">:&gt;</span> <span class="Identifier">Module</span>[{x <span class="Statement">=</span> <span class="Identifier">Clip</span>[<span class="Identifier">mouseLoc</span>[], {<span class="Type">1</span>, <span class="Identifier">Length</span>[var]}]},
        <span class="Identifier">If</span>[<span class="Identifier">Head</span>[x] <span class="Statement">=!=</span> <span class="Identifier">Integer</span>, <span class="Identifier">Return</span>[]];
        <span class="Identifier">var</span>[[x]] <span class="Statement">=</span> <span class="Identifier">Boole</span>[<span class="Identifier">var</span>[[x]] <span class="Statement">==</span> <span class="Type">0</span>];
        lastValue <span class="Statement">=</span> <span class="Identifier">var</span>[[x]]],

      <span class="String">&quot;MouseDragged&quot;</span> <span class="Statement">:&gt;</span> <span class="Identifier">Module</span>[{x <span class="Statement">=</span> <span class="Identifier">Clip</span>[<span class="Identifier">mouseLoc</span>[], {<span class="Type">1</span>, <span class="Identifier">Length</span>[var]}]},
        <span class="Identifier">If</span>[<span class="Identifier">Head</span>[x] <span class="Statement">=!=</span> <span class="Identifier">Integer</span>, <span class="Identifier">Return</span>[]];
        <span class="Identifier">If</span>[x <span class="Statement">=!=</span> lastIndex,<span class="Comment">(*only when entering new cell*)</span>
         lastIndex <span class="Statement">=</span> x;
         <span class="Identifier">var</span>[[x]] <span class="Statement">=</span> lastValue]]}]];

<span class="Comment">(*function that creates the Cuboids*)</span>
<span class="Identifier">render</span>[<span class="Type">stack_</span>, <span class="Type">iterations_</span>, <span class="Type">color_</span>, <span class="Type">thickness_</span>, <span class="Type">overlap_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{
    center, interval, width <span class="Statement">=</span> <span class="Identifier">Length</span>[<span class="Identifier">stack</span>[[<span class="Type">1</span>]]]},
   interval <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">.</span> <span class="String">\[Pi]</span><span class="Statement">/</span>width;

   <span class="Identifier">Last</span><span class="Statement">@</span><span class="Identifier">Reap</span>[<span class="Identifier">Do</span>[
      <span class="Identifier">Sow</span>[<span class="Identifier">Rotate</span>[
        <span class="Identifier">Last</span><span class="Statement">@</span><span class="Identifier">Reap</span>[<span class="Identifier">Do</span>[
           <span class="Identifier">If</span>[<span class="Identifier">stack</span>[[level, rad]] <span class="Statement">==</span> <span class="Type">1</span>,
            center <span class="Statement">=</span> {<span class="Identifier">Cos</span>[interval<span class="Statement">*</span>rad]<span class="Statement">/</span>interval, <span class="Identifier">Sin</span>[interval<span class="Statement">*</span>rad]<span class="Statement">/</span>interval, <span class="Type">0</span>} <span class="Statement">//</span><span class="Identifier"> N</span>;
            <span class="Identifier">Sow</span>[<span class="Identifier">Cuboid</span>[center <span class="Statement">+</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>level} <span class="Statement">+</span> {thickness, overlap<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">52</span>, <span class="Statement">.</span><span class="Type">52</span>}, center <span class="Statement">+</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>level} <span class="Statement">-</span> {<span class="Type">0</span>, overlap<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">52</span>, <span class="Statement">.</span><span class="Type">52</span>}], color];
            <span class="Comment">(*make the cylinder darker on the inside*)</span><span class="Identifier">Sow</span>[<span class="Identifier">Cuboid</span>[ center <span class="Statement">+</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>level} <span class="Statement">+</span> {<span class="Type">0</span>, overlap<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">52</span>, <span class="Statement">.</span><span class="Type">52</span>}, center <span class="Statement">+</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>level} <span class="Statement">-</span> {<span class="Statement">.</span><span class="Type">02</span>, overlap<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">52</span>, <span class="Statement">.</span><span class="Type">52</span>}],
             <span class="Identifier">Darker</span>[color, <span class="Statement">.</span><span class="Type">5</span>]]],
           {level, <span class="Type">1</span>, iterations}], <span class="Type">_</span>, {<span class="Statement">#1</span>, <span class="Statement">#2</span>} <span class="Statement">&amp;</span>],
        interval<span class="Statement">*</span>rad, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, center]]

      , {rad, <span class="Type">1</span>, width}]]];

<span class="Comment">(*Manipulate*)</span>
<span class="Identifier">Manipulate</span>[<span class="Identifier">Module</span>[{stack},
  <span class="Comment">(*mention these so that they are saved in CDF*)</span>
  {opList, colorSchemeList, fullRandomBookmark};

  <span class="Comment">(*clamp 'rule' slider max*)</span>
  <span class="Identifier">If</span>[rule <span class="Statement">&gt;</span> <span class="Identifier">ruleMax</span>[type], rule <span class="Statement">=</span> <span class="Identifier">ruleMax</span>[type]];

  <span class="Comment">(*readjust length of initial array*)</span>
  <span class="Identifier">If</span>[<span class="Identifier">Length</span>[initialArray] <span class="Statement">!=</span> width, initialArray <span class="Statement">=</span> <span class="Identifier">PadRight</span>[initialArray, width]];

  <span class="Comment">(*the 2D matrix*)</span>
  stack <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[type <span class="Statement">/.</span> n <span class="Statement">-&gt;</span> rule, initialArray, iterations];

  <span class="Comment">(*prevent recursive updating*)</span>
  <span class="Identifier">If</span>[<span class="Identifier">arrayColor</span>[<span class="Type">0</span>] <span class="Statement">=!=</span> background <span class="Statement">||</span> <span class="Identifier">arrayColor</span>[<span class="Type">1</span>] <span class="Statement">=!=</span> color,
   <span class="Identifier">arrayColor</span>[<span class="Type">0</span>] <span class="Statement">=</span> background; <span class="Identifier">arrayColor</span>[<span class="Type">1</span>] <span class="Statement">=</span> color];

  <span class="Comment">(*main output. this Overlay/ControlActive structure is to prevent the user's adjustments</span>
<span class="Comment">   to the Graphics3D pane from being lost, as they would be with a simple ControlActive[a,b] setup*)</span>
  <span class="Identifier">Overlay</span>[{
    <span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[], <span class="Identifier">ControlActive</span>[<span class="Identifier">Null</span>, <span class="Identifier">If</span>[<span class="Identifier">Total</span><span class="Statement">@</span><span class="Identifier">Total</span><span class="Statement">@</span>stack <span class="Statement">&gt;</span> <span class="Type">0</span>, a <span class="Statement">=</span> <span class="Identifier">render</span>[stack, iterations <span class="Statement">+</span> <span class="Type">1</span>, color, thickness, <span class="Identifier">shapeOverlap</span>[thickness]]]]},
          Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Background <span class="Statement">-&gt;</span> background, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, ImageSize <span class="Statement">-&gt;</span> graphicsSize],
    <span class="Identifier">ControlActive</span>[<span class="Identifier">ArrayPlot</span>[stack <span class="Statement">//</span><span class="Identifier"> Transpose</span>, ColorFunction <span class="Statement">-&gt;</span> arrayColor, ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, ImageSize <span class="Statement">-&gt;</span> graphicsSize], <span class="String">&quot;&quot;</span>]},
   <span class="Identifier">All</span>, <span class="Type">1</span>, Alignment <span class="Statement">-&gt;</span> Center]

  <span class="Comment">(*endModule*)</span>]

 <span class="Comment">(*Manipulate options*)</span>
 , <span class="Identifier">OpenerView</span>[{<span class="String">&quot;Style&quot;</span>, <span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{
      <span class="Identifier">Control</span><span class="Statement">@</span>{color, <span class="Identifier">Darker</span>[<span class="Identifier">Blend</span>[{<span class="Identifier">Yellow</span>, <span class="Identifier">Green</span>}], <span class="Statement">.</span><span class="Type">1</span>], ImageSize <span class="Statement">-&gt;</span> Small, ContinuousAction <span class="Statement">-&gt;</span> <span class="Identifier">False</span>},
      <span class="Identifier">Control</span><span class="Statement">@</span>{background, <span class="Identifier">Lighter</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">7</span>], ImageSize <span class="Statement">-&gt;</span> Small, ContinuousAction <span class="Statement">-&gt;</span> <span class="Identifier">False</span>},
      <span class="Identifier">Control</span><span class="Statement">@</span>{{thickness, <span class="Statement">.</span><span class="Type">2</span>, <span class="String">&quot;shape&quot;</span>}, shapeChoices, ControlType <span class="Statement">-&gt;</span> SetterBar, Background <span class="Statement">-&gt;</span> background}},
    Dividers <span class="Statement">-&gt;</span> {{<span class="Identifier">False</span>, <span class="Identifier">False</span>, <span class="Identifier">False</span>, <span class="Identifier">True</span>}, {<span class="Identifier">False</span>, <span class="Identifier">True</span>}}, FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Directive</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">Darker</span><span class="Statement">@</span><span class="Identifier">Gray</span>]]}],

 <span class="Identifier">Grid</span>[<span class="Identifier">List</span><span class="Statement">@</span>{
    <span class="Identifier">Control</span><span class="Statement">@</span>{{width, widthDefault}, widthMin, widthMax, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small},
    <span class="Identifier">Control</span><span class="Statement">@</span>{{iterations, iterationsDefault}, iterationsMin, iterationsMax, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small},
    <span class="Identifier">Control</span><span class="Statement">@</span>{{type, <span class="Identifier">typeChoices</span>[[<span class="Type">1</span>, <span class="Type">1</span>]]}, typeChoices, ControlType <span class="Statement">-&gt;</span> SetterBar}},
  Spacings <span class="Statement">-&gt;</span> <span class="Type">0</span>],

 {{rule, <span class="Type">30</span>}, <span class="Type">0</span>, <span class="Identifier">ruleMax</span>[type], <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Large},
 {{initialArray, {<span class="Type">1</span>}, <span class="Identifier">Null</span>}, <span class="Identifier">gridControl</span>[<span class="Statement">#1</span>, arrayColor, <span class="Identifier">graphicsSize</span>[[<span class="Type">1</span>]], gridControlHeight] <span class="Statement">&amp;</span>, ControlPlacement <span class="Statement">-&gt;</span> Bottom},

 Alignment <span class="Statement">-&gt;</span> Center,
 AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;ManipulateMenu&quot;</span>,
 SaveDefinitions <span class="Statement">-&gt;</span> <span class="Identifier">True</span>,

 Bookmarks <span class="Statement">:&gt;</span> {
   <span class="Identifier">Sequence </span><span class="Statement">@@</span> opList,
   <span class="Identifier">Sequence </span><span class="Statement">@@</span> colorSchemeList,
   fullRandomBookmark}
 <span class="Comment">(*endManipulate*)</span>]





</pre>
                </li>
            </ol>

            <p>
            The awesomeness of this program is acceptable, I suppose. However I wrote it when I was just starting to get the hang of Mathematica. For a more idiomatic approach to the geometry (one using <span style="font-family: monospace">Position</span>), see my more recent <a href="flipbook-cellularautomata3D1.htm">cellular automata 3D 1</a>. And for a more methodical approach to structuring larger programs of this kind, see my <a href="flipbook-matrixreplacement2.htm">matrix replacement 2</a>.
            </p>


        </ul>
    </div>

    <div class="section"> 
        <div class="header"> <img src="img/siermasterlock24.png"/> <a href="permanent-sierpinskitriangle.htm"><h2>Sierpinski triangle</h2></a> </div>

        <p>
        So I was me and I was in math class watching paint dry it was starting to crack when suddenly I realized there was a page for which the internet was invented. I set out to create that page, ultimately succeeding with <a href="sierpinski.htm">the sierpinski triangle page to end most sierpinski triangle pages &#0153;</a>.
        </p>

        <p>
        Another version of the story claims I was fiddling with geometric transforms of the Sierpinski triangle, and produced this figure:
        </p>

        <br />
        <center>
            <a href="flipbook-wizardsaucery.htm"><img src="img/siermasterlock7.png" width="188" height="176" /></a>
        </center>
        <br />
        <br />

        <p>
        Which I thought would make a nifty addition to this blog-like thingie you're currently reading. Then, I got carried away. And then I got carried away more. And then I got carried away with how carried away I was getting carried away, and so on. It's a freaking miracle I managed to eventually stop myself.
        </p>

        <p>
        So while <a href="sierpinski.htm">the sierpinski triangle page to end most sierpinski triangle pages &#0153;</a> purports to be some kind of exploratory rundown of the Sierpinski triangle, it's also a fractal expression of just how carried away I get, namely very.
        </p>

    </div>

    <div class="section">
            <div class="header">
                <a href="#lsystems" name="lsystems"></a> <img src="img/mlogo1.png" /> <a href="permanent-l-systems.htm"><h2>L-systems</h2></a>
            </div>

            <p>
            L-systems are simple rule-based constructions that can make pretty fractals. Ergo the obligatory Mathematica program:
            </p>

            <ol class="flipbook static" name="l-systems 0">
                <li>
                    <img src="img/lsys6.png" width="449" height="565" />
                </li>
                <li>
                    <img src="img/lsys2.png" width="449" height="565" />
                </li>
                <li>
                    <img src="img/lsys3.png" width="449" height="565" />
                </li>
                <li>
                    <img src="img/lsys5.png" width="449" height="565" />
                </li>
                <li name="source">
                <pre style="font-size: 1px">





imageSize <span class="Statement">=</span> {<span class="Type">400</span>, <span class="Type">400</span>};
thumbSize <span class="Statement">=</span> {<span class="Type">26</span>, <span class="Type">26</span>};
thumbPadding <span class="Statement">=</span> <span class="Type">2</span>;
nextStyle <span class="Statement">=</span> {<span class="Identifier">RGBColor</span>[<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Statement">.</span><span class="Type">6</span>], <span class="Identifier">Dashing</span>[<span class="Type">1</span> <span class="Statement">/</span> (<span class="Type">40</span> <span class="Statement">+</span> <span class="Type">3</span><span class="Statement">^</span>(i<span class="Statement">+</span><span class="Type">1</span>))]};
maxIterations <span class="Statement">=</span> <span class="Type">5</span>; <span class="Comment">(* initialized so it's not Null *)</span>

<span class="Comment">(* ignore these warnings *)</span>
<span class="Identifier">Off</span>[<span class="Type">Part::</span><span class="Special">partw</span>];
<span class="Identifier">Off</span>[<span class="Type">Rule::</span><span class="Special">rhs</span>];
<span class="Identifier">Off</span>[<span class="Type">Join::</span><span class="Special">heads</span>];

<span class="Comment">(* main LSystem function. it does ReplaceAll</span>
<span class="Comment">    in a way that splices into the list *)</span>
<span class="Identifier">Module</span>[{adjustment <span class="Statement">=</span> {
    <span class="Identifier">Rule</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Rule</span>[a, <span class="Identifier">Sequence </span><span class="Statement">@@</span> b],
    <span class="Identifier">RuleDelayed</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">RuleDelayed</span>[a, <span class="Identifier">Sequence </span><span class="Statement">@@</span> b]}},

    <span class="Identifier">LSystem</span>[<span class="Type">0</span>, <span class="Type">axiom_</span>, <span class="Type">_</span>] <span class="Statement">:=</span> axiom;
    <span class="Identifier">LSystem</span>[<span class="Type">iterations_</span>, <span class="Type">axiom_</span>, <span class="Type">rule_</span>] <span class="Statement">:=</span>
            <span class="Identifier">LSystem</span>[iterations <span class="Statement">-</span> <span class="Type">1</span>, axiom, rule] <span class="Statement">/.</span> (rule <span class="Statement">/.</span> adjustment);
];

<span class="Comment">(* main drawing function. executes a sequence of movement commands *)</span>
<span class="Identifier">LOGO</span>[<span class="Type">commands_</span>, {<span class="Type">startx_</span>, <span class="Type">starty_</span>, <span class="Type">starta_</span>}] <span class="Statement">:=</span> <span class="Identifier">Block</span>[{
    <span class="Comment">(* note that these commands are functions</span><span class="Special"> *which construct*</span>
<span class="Comment">        transformations that operate on the turtle's state *)</span>
    forward <span class="Statement">=</span> {<span class="Type">x_Real</span>, <span class="Type">y_Real</span>, <span class="Type">a_Real</span>} <span class="Statement">-&gt;</span> {x <span class="Statement">+</span> <span class="Statement">#</span> <span class="Identifier">Cos</span>[a], y <span class="Statement">+</span> <span class="Statement">#</span> <span class="Identifier">Sin</span>[a], a} <span class="Statement">&amp;</span>,
    left <span class="Statement">=</span> {<span class="Type">x_Real</span>, <span class="Type">y_Real</span>, <span class="Type">a_Real</span>} <span class="Statement">-&gt;</span> {x, y, a <span class="Statement">+</span> <span class="Statement">#</span> <span class="Identifier">Degree</span>} <span class="Statement">&amp;</span>,
    backward <span class="Statement">=</span> <span class="Identifier">forward</span>[<span class="Statement">-</span><span class="Statement">#</span>] <span class="Statement">&amp;</span>,
    right <span class="Statement">=</span> <span class="Identifier">left</span>[<span class="Statement">-</span><span class="Statement">#</span>] <span class="Statement">&amp;</span>,
    push, pop},

    <span class="Comment">(* LIFO stack *)</span>
    {push, pop} <span class="Statement">=</span> <span class="Identifier">Module</span>[{list <span class="Statement">=</span> {}},
        {<span class="Type">triple_</span> <span class="Statement">:&gt;</span> (<span class="Identifier">AppendTo</span>[list, triple]; triple),
        <span class="Type">_</span> <span class="Statement">:&gt;</span> <span class="Identifier">Module</span>[
            {val <span class="Statement">=</span> <span class="Identifier">list</span>[[<span class="Statement">-</span><span class="Type">1</span>]]},
            list <span class="Statement">=</span> <span class="Identifier">Delete</span>[list,<span class="Statement">-</span><span class="Type">1</span>];
            val]}];

    <span class="Identifier">Block</span>[{
        <span class="Comment">(* remove non-commands *)</span>
        filteredCommands <span class="Statement">:=</span> filteredCommands <span class="Statement">=</span> <span class="Identifier">Cases</span>[commands, <span class="Type">_Rule</span> <span class="Statement">|</span> <span class="Type">_RuleDelayed</span>],

        <span class="Comment">(* split lines where there is a pop command *)</span>
        spans <span class="Statement">:=</span> spans <span class="Statement">=</span> <span class="Identifier">Join</span>[{<span class="Type">0</span>},
            <span class="Identifier">Position</span>[filteredCommands, pop] <span class="Statement">//</span><span class="Identifier"> Flatten</span>,
            <span class="Identifier">If</span>[<span class="Identifier">filteredCommands</span>[[<span class="Statement">-</span><span class="Type">1</span>]] <span class="Statement">=!=</span> pop, {<span class="Identifier">Length</span>[filteredCommands]<span class="Statement">+</span><span class="Type">1</span>}, {}]],
        removeAngles <span class="Statement">=</span> <span class="Identifier">ArrayPad</span>[<span class="Statement">#</span>, {{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">1</span>}}] <span class="Statement">&amp;</span>,
        splitLines <span class="Statement">=</span> <span class="Identifier">Function</span>[lines,
            <span class="Identifier">Cases</span>[<span class="Identifier">Partition</span>[spans, <span class="Type">2</span>, <span class="Type">1</span>],
                {<span class="Type">start_</span>, <span class="Type">end_</span>} <span class="Statement">:&gt;</span> <span class="Identifier">lines</span>[[ (start <span class="Statement">+</span> <span class="Type">1</span>) ;; end ]]]]},

        <span class="Comment">(* execute commands. *)</span>
        <span class="Comment">(* note that duplicate points created by left/right are not removed *)</span>
        <span class="Identifier">FoldList</span>[Replace, {startx, starty, starta <span class="Identifier">Degree</span>}, filteredCommands]
        <span class="Statement">//</span><span class="Identifier"> removeAngles</span>
        <span class="Statement">//</span><span class="Identifier"> splitLines</span>]
];

<span class="Comment">(* executes LOGO commands within the context of the given L-system *)</span>
<span class="Identifier">geometry</span>[<span class="Type">system_</span>, <span class="Type">iterations_</span>] <span class="Statement">:=</span> <span class="Identifier">Block</span>[{
    i <span class="Statement">=</span> iterations,
    <span class="Comment">(* set a default offset if one isn't defined *)</span>
    offset <span class="Statement">=</span> (offset <span class="Statement">/.</span> system) <span class="Statement">/.</span> (offset <span class="Statement">-&gt;</span> {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>})},

    <span class="Identifier">Hold</span>[<span class="Identifier">LOGO</span>[<span class="Identifier">LSystem</span>[i, axiom, rules] <span class="Statement">/.</span> conversions,
        <span class="Identifier">Append</span>[offset, orientation]]]
    <span class="Statement">/.</span> system
    <span class="Statement">//</span><span class="Identifier"> ReleaseHold</span>
];

<span class="Comment">(* generates the thumbnail for the given L-system *)</span>
<span class="Identifier">thumbnail</span>[<span class="Type">system_</span>] <span class="Statement">:=</span> <span class="Identifier">Tooltip</span>[
    <span class="Identifier">Graphics</span>[<span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">geometry</span>[system, (thumbIterations <span class="Statement">/.</span> system)],
        ImagePadding <span class="Statement">-&gt;</span> thumbPadding, ImageSize <span class="Statement">-&gt;</span> thumbSize],
    (name <span class="Statement">/.</span> system), TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>];

<span class="Comment">(* these are the structure definitions for the curves.  the list replacement</span>
<span class="Comment">    is very flexible since it uses Mathematica's symbolic transformations --</span>
<span class="Comment">    I have two different methods of scaling here as examples.</span>
<span class="Comment"> a scaling option that I didn't implement is to use matrix transformations *)</span>
curves <span class="Statement">=</span> {

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;L\[EAcute]vy C Curve&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">0</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {<span class="Identifier">forward</span>[<span class="Type">1</span>]},

    <span class="Comment">(* scaling method 1. scale within the rules of the L-system itself *)</span>
    rules <span class="Statement">-&gt;</span> { <span class="Identifier">forward</span>[<span class="Type">x_</span>] <span class="Statement">-&gt;</span>
        {R, <span class="Identifier">forward</span>[<span class="Identifier">Cos</span>[<span class="Type">45</span><span class="Statement">.</span> <span class="Identifier">Degree</span>] x], L, L, <span class="Identifier">forward</span>[<span class="Identifier">Cos</span>[<span class="Type">45</span><span class="Statement">.</span> <span class="Identifier">Degree</span>] x], R}},

    conversions <span class="Statement">-&gt;</span> {
        L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">45</span>], R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">45</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-.</span><span class="Type">5</span>, <span class="Type">1.5</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">25</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">5</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">13</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">8</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Sierpinski Triangle&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">60</span><span class="Statement">.</span> <span class="Identifier">Mod</span>[i, <span class="Type">2</span>],
    axiom <span class="Statement">-&gt;</span> {A},
    rules <span class="Statement">-&gt;</span> {
        A <span class="Statement">-&gt;</span> {B, R, A, R, B},
        B <span class="Statement">-&gt;</span> {A, L, B, L, A}},

    <span class="Comment">(* scaling method 2. scale </span><span class="String">&quot;globally&quot;</span><span class="Comment"> after iteration *)</span>
    conversions <span class="Statement">-&gt;</span> {
        A <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">2</span><span class="Statement">.^</span>(<span class="Statement">-</span>i)],
        B <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">2</span><span class="Statement">.^</span>(<span class="Statement">-</span>i)],
        L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">60</span>],
        R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">60</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Statement">-.</span><span class="Type">1</span>, <span class="Type">1</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">3</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">9</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">6</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Hilbert Curve&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">180</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {A},
    rules <span class="Statement">-&gt;</span> {
        A <span class="Statement">-&gt;</span> {L, B, F, R, A, F, A, R, F, B, L},
        B <span class="Statement">-&gt;</span> {R, A, F, L, B, F, B, L, F, A, R}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">2</span><span class="Statement">.^</span>(<span class="Statement">-</span>i)],
        L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">90</span>], R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">90</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">01</span>}, {<span class="Statement">-</span><span class="Type">1.01</span>, <span class="Statement">.</span><span class="Type">01</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">3</span>,
    offset <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">2</span><span class="Statement">.^</span>(<span class="Statement">-</span>i<span class="Statement">-</span><span class="Type">1</span>), <span class="Statement">-</span><span class="Type">2</span><span class="Statement">.^</span>(<span class="Statement">-</span>i<span class="Statement">-</span><span class="Type">1</span>) },
    maxIters <span class="Statement">-&gt;</span> <span class="Type">7</span>,
    minIters <span class="Statement">-&gt;</span> <span class="Type">1</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">5</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Heighway Dragon Curve&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">45</span><span class="Statement">.</span> i,
    axiom <span class="Statement">-&gt;</span> {F, X},
    rules <span class="Statement">-&gt;</span> {
        X <span class="Statement">-&gt;</span> {X, R, Y, F, R},
        Y <span class="Statement">-&gt;</span> {L, F, X, L, Y}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Identifier">Sqrt</span>[<span class="Type">2</span><span class="Statement">.</span>]<span class="Statement">^</span>(<span class="Statement">-</span>i)],
        R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">90</span>], L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">90</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-.</span><span class="Type">4</span>, <span class="Type">1.22</span>}, {<span class="Statement">-.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">8</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">5</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">13</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">8</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Pinwheel Embroidery&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">45</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {X, push, L, X, R, R, X, pop, R, X, L, L, X, R, F},
    rules <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> {F, push, L, X, R, R, X, pop, R, X, L, L, X, R, F},
        X <span class="Statement">-&gt;</span> {F, push, L, F, R, R, R, F, pop, R, F, L, L, F, R, F}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">1</span>], R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">45</span>], L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">45</span>]},
    plotRange <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">2</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">4</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Statement">-</span><span class="Type">1</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Koch Snowflake&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">0</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {F, <span class="Identifier">right</span>[<span class="Type">120</span>], F, <span class="Identifier">right</span>[<span class="Type">120</span>], F},
    rules <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> {F, <span class="Identifier">left</span>[<span class="Type">60</span>], F, <span class="Identifier">right</span>[<span class="Type">120</span>], F, <span class="Identifier">left</span>[<span class="Type">60</span>], F}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">3</span><span class="Statement">.^</span>(<span class="Statement">-</span>i)]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-.</span><span class="Type">1</span>, <span class="Type">1.1</span>}, {<span class="Statement">-.</span><span class="Type">92</span>, <span class="Statement">.</span><span class="Type">33</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">2</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">5</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">3</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Ces\[AGrave]ro Curve&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">0</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {F},
    rules <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> {F, L, F, R, R, F, L, F}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[(<span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Cos</span>[<span class="Type">85</span><span class="Statement">.</span> <span class="Identifier">Degree</span>])<span class="Statement">^</span>(<span class="Statement">-</span>i)],
        R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">85</span>], L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">85</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Statement">-.</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">5</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">2</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">7</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">5</span> },

<span class="Comment">(* empirically find magnitude/rotation transform for Gosper curve</span>
<span class="Comment">    since it's not immediately straightforward *)</span>
<span class="Identifier">Module</span>[{gosper, abs, arg},
    <span class="Identifier">gosper</span>[<span class="Type">abs_</span>, <span class="Type">arg_</span>, <span class="Type">baseAngle_</span>] <span class="Statement">:=</span> {
        name <span class="Statement">-&gt;</span> <span class="String">&quot;Gosper Curve&quot;</span>,
        orientation <span class="Statement">-&gt;</span> baseAngle <span class="Statement">+</span> arg <span class="Identifier">Degree</span><span class="Statement">^</span>(<span class="Statement">-</span><span class="Type">1</span>) i,
        axiom <span class="Statement">-&gt;</span> {F, X},
        rules <span class="Statement">-&gt;</span> {
            X <span class="Statement">-&gt;</span> {X, R, Y, F, R, R, Y, F, L, F, X, L, L, F, X, F, X, L, Y, F, R},
            Y <span class="Statement">-&gt;</span> {L, F, X, R, Y, F, Y, F, R, R, Y, F, R, F, X, L, L, F, X, L, Y}},
        conversions <span class="Statement">-&gt;</span> {
            F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[abs<span class="Statement">^</span>(<span class="Statement">-</span>i)],
            R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">60</span>], L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">60</span>]},
        plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-.</span><span class="Type">4</span>, <span class="Type">1</span>}, {<span class="Statement">-.</span><span class="Type">2</span>, <span class="Type">1.2</span>}},
        thumbIterations <span class="Statement">-&gt;</span> <span class="Type">2</span>,
        maxIters <span class="Statement">-&gt;</span> <span class="Type">5</span>,
        maxShowNext <span class="Statement">-&gt;</span> <span class="Type">3</span> };

    {abs, arg} <span class="Statement">=</span> <span class="Identifier">Complex </span><span class="Statement">@@</span> (<span class="Identifier">geometry</span>[<span class="Identifier">gosper</span>[<span class="Type">1</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>], <span class="Type">1</span>] <span class="Statement">//</span><span class="Identifier"> Last</span> <span class="Statement">//</span><span class="Identifier"> Last</span>) <span class="Comment">(* last point *)</span>
                 <span class="Statement">//</span> {<span class="Statement">#</span> <span class="Statement">//</span><span class="Identifier"> Abs</span>, <span class="Statement">#</span> <span class="Statement">//</span><span class="Identifier"> Arg</span>} <span class="Statement">&amp;</span>;

    <span class="Identifier">gosper</span>[abs, <span class="Statement">-</span>arg, <span class="Type">90</span><span class="Statement">.</span>]],

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Penrose Tiling&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Identifier">If</span>[i <span class="Statement">&gt;</span> <span class="Type">6</span>, <span class="Type">0</span><span class="Statement">.</span>, {<span class="Type">36</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">36</span><span class="Statement">.</span>, <span class="Type">36</span><span class="Statement">.</span>}[[i]]],
    axiom <span class="Statement">-&gt;</span>
        {SV, <span class="Type">7</span>, RS, 2R, SV, <span class="Type">7</span>, RS, 2R, SV, <span class="Type">7</span>, RS, 2R, SV, <span class="Type">7</span>, RS, 2R, SV, <span class="Type">7</span>, RS},
    rules <span class="Statement">-&gt;</span> {
        <span class="Type">6</span> <span class="Statement">-&gt;</span> {<span class="Type">8</span>, <span class="Type">1</span>, 2R, <span class="Type">9</span>, <span class="Type">1</span>, 4L, <span class="Type">7</span>, <span class="Type">1</span>, SV, L, <span class="Type">8</span>, <span class="Type">1</span>, 4L, <span class="Type">6</span>, <span class="Type">1</span>, RS, 2R},
        <span class="Type">7</span> <span class="Statement">-&gt;</span> {R, <span class="Type">8</span>, <span class="Type">1</span>, 2L, <span class="Type">9</span>, <span class="Type">1</span>, SV, 3L, <span class="Type">6</span>, <span class="Type">1</span>, 2L, <span class="Type">7</span>, <span class="Type">1</span>, RS, R},
        <span class="Type">8</span> <span class="Statement">-&gt;</span> {L, <span class="Type">6</span>, <span class="Type">1</span>, 2R, <span class="Type">7</span>, <span class="Type">1</span>, SV, 3R, <span class="Type">8</span>, <span class="Type">1</span>, 2R, <span class="Type">9</span>, <span class="Type">1</span>, RS, L},
        <span class="Type">9</span> <span class="Statement">-&gt;</span> {2L, <span class="Type">8</span>, <span class="Type">1</span>, 4R, <span class="Type">6</span>, <span class="Type">1</span>, SV, R, <span class="Type">9</span>, <span class="Type">1</span>, 4R, <span class="Type">7</span>, <span class="Type">1</span>, RS, 2L, <span class="Type">7</span>, <span class="Type">1</span>},
        <span class="Type">1</span> <span class="Statement">-&gt;</span> {}},
    conversions <span class="Statement">-&gt;</span> {
        <span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">1</span>], (<span class="Type">x_</span> <span class="Statement">:</span> <span class="Type">1</span>) L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">36</span> x],
        (<span class="Type">x_</span> <span class="Statement">:</span> <span class="Type">1</span>) R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">36</span> x], SV <span class="Statement">-&gt;</span> push, RS <span class="Statement">-&gt;</span> pop},
    plotRange <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
    customStyle <span class="Statement">-&gt;</span> {<span class="Identifier">JoinForm</span>[<span class="String">&quot;Round&quot;</span>]},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">1</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">5</span>,
    minIters <span class="Statement">-&gt;</span> <span class="Type">1</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">3</span> },

{ name <span class="Statement">-&gt;</span> <span class="String">&quot;Plant&quot;</span>,
    orientation <span class="Statement">-&gt;</span> <span class="Type">90</span><span class="Statement">.</span>,
    axiom <span class="Statement">-&gt;</span> {F},
    rules <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> {F, push, L, F, F, pop, F, push, R, F, F, pop, F}},
    conversions <span class="Statement">-&gt;</span> {
        F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">3</span><span class="Statement">.^</span>(<span class="Statement">-</span>i)], L <span class="Statement">-&gt;</span> <span class="Identifier">left</span>[<span class="Type">25</span>], R <span class="Statement">-&gt;</span> <span class="Identifier">right</span>[<span class="Type">25</span>]},
    plotRange <span class="Statement">-&gt;</span> {{<span class="Statement">-.</span><span class="Type">4</span>, <span class="Statement">.</span><span class="Type">48</span>}, {<span class="Statement">-.</span><span class="Type">01</span>, <span class="Type">1.36</span>}},
    thumbIterations <span class="Statement">-&gt;</span> <span class="Type">2</span>,
    maxIters <span class="Statement">-&gt;</span> <span class="Type">4</span>,
    maxShowNext <span class="Statement">-&gt;</span> <span class="Type">3</span> }
};

<span class="Comment">(* the choices that will populate the SetterBar *)</span>
choices <span class="Statement">=</span> (<span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">thumbnail</span>[<span class="Statement">#</span>]) <span class="Statement">&amp;</span> <span class="Statement">/@</span> curves;

<span class="Identifier">Manipulate</span>[

maxIterations <span class="Statement">=</span> (maxIters <span class="Statement">/.</span> system); <span class="Comment">(* readjust slider max *)</span>
iterations <span class="Statement">=</span> <span class="Identifier">Min</span>[iterations, (maxIters <span class="Statement">/.</span> system)];

<span class="Comment">(* main Manipulate output *)</span>
<span class="Identifier">Tooltip</span>[
    <span class="Identifier">Show</span>[

    <span class="Comment">(* next iteration *)</span>
    <span class="Identifier">If</span>[showNext <span class="Statement">&amp;&amp;</span> (iterations <span class="Statement">&lt;=</span> (maxShowNext <span class="Statement">/.</span> system)),
            <span class="Identifier">Graphics</span>[<span class="Identifier">Join</span>[
                <span class="Identifier">Block</span>[{i <span class="Statement">=</span> iterations <span class="Statement">+</span> <span class="Type">1</span>}, nextStyle],
                {<span class="Identifier">Thickness</span>[lineThickness<span class="Statement">/</span><span class="Type">2</span>]},
                <span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">geometry</span>[system, iterations <span class="Statement">+</span> <span class="Type">1</span>]]],
        {}],

    <span class="Comment">(* current iteration *)</span>
    <span class="Identifier">Graphics</span>[<span class="Identifier">Join</span>[
        {color, <span class="Identifier">Thickness</span>[lineThickness]},
        (customStyle <span class="Statement">/.</span> system) <span class="Statement">/.</span> (customStyle <span class="Statement">-&gt;</span> {}),
        <span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">geometry</span>[system, iterations]]],
    PlotRange <span class="Statement">-&gt;</span> (plotRange <span class="Statement">/.</span> system), ImageSize <span class="Statement">-&gt;</span> imageSize],

<span class="Comment">(* tooltip content *)</span>
<span class="Identifier">Framed</span>[<span class="Identifier">Column</span>[{
    (name <span class="Statement">/.</span> system) <span class="Statement">&lt;&gt;</span> <span class="String">&quot; L-system at &quot;</span> <span class="Statement">&lt;&gt;</span>
    <span class="Identifier">ToString</span>[iterations] <span class="Statement">&lt;&gt;</span> <span class="String">&quot; iteration&quot;</span> <span class="Statement">&lt;&gt;</span> <span class="Identifier">If</span>[iterations <span class="Statement">=!=</span> <span class="Type">1</span>, <span class="String">&quot;s&quot;</span>, <span class="String">&quot;&quot;</span>], <span class="Identifier">Null</span>,
    <span class="Identifier">ToString</span>[(name <span class="Statement">/.</span> system)] <span class="Statement">&lt;&gt;</span> <span class="String">&quot; Construction:&quot;</span>, <span class="Identifier">Null</span>,
    <span class="Identifier">Grid</span>[{{<span class="String">&quot;Axiom:&quot;</span>, (axiom <span class="Statement">/.</span> system)}}], <span class="Identifier">Null</span>,
    <span class="Identifier">Grid</span>[{{<span class="String">&quot;Transformation rules:&quot;</span>, <span class="Identifier">MatrixForm</span>[{rules <span class="Statement">/.</span> system}<span class="Statement">//</span><span class="Identifier">Transpose</span>]}}], <span class="Identifier">Null</span>,
    <span class="Identifier">Grid</span>[{{<span class="String">&quot;Definitions:&quot;</span>, <span class="Identifier">MatrixForm</span>[{conversions <span class="Statement">/.</span> system} <span class="Statement">//</span><span class="Identifier"> Transpose</span>],
    <span class="Identifier">If</span>[<span class="Identifier">Count</span>[conversions <span class="Statement">/.</span> system, i, <span class="Identifier">Infinity</span>] <span class="Statement">&gt;</span> <span class="Type">0</span>,
        <span class="String">&quot;With i = the current iteration&quot;</span>]}}]}],
ImageMargins <span class="Statement">-&gt;</span> <span class="Type">3</span>, FrameMargins <span class="Statement">-&gt;</span> <span class="Type">0</span>, FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">None</span>],

TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">6</span>],

<span class="Identifier">OpenerView</span>[{<span class="String">&quot;Style&quot;</span>, <span class="Identifier">Column</span>[{
    <span class="Identifier">Control</span>[{{color, <span class="Identifier">Black</span>, <span class="String">&quot;line color&quot;</span>}, ColorSlider}],
    <span class="Identifier">Control</span>[{{lineThickness, <span class="Type">0.005</span>, <span class="String">&quot;line thickness&quot;</span>}, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">02</span>, <span class="Statement">.</span><span class="Type">005</span>}],
    <span class="Identifier">Control</span>[{{showNext, <span class="Identifier">True</span>, <span class="String">&quot;show next iteration&quot;</span>}, {<span class="Identifier">True</span>, <span class="Identifier">False</span>}}]}]}],
{{system, <span class="Identifier">curves</span>[[<span class="Type">2</span>]], <span class="String">&quot;L-system&quot;</span>}, choices, ControlType <span class="Statement">-&gt;</span> SetterBar},
{{iterations, <span class="Type">1</span>, <span class="String">&quot;iterations&quot;</span>}, <span class="Type">0</span>, <span class="Identifier">Dynamic</span>[maxIterations], <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>,

<span class="Comment">(* disable animation, since it plays poorly with Dynamic[maxIterations] *)</span>
ContinuousAction <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, ControlType <span class="Statement">-&gt;</span> Slider},
SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]





</pre>
                </li>
            </ol>

            <p>
            This is however basically the first Mathematica program I wrote. For a slightly different, not necessarily better approach, see my 3D-capable <a href="flipbook-l-system3D1.htm">l-system 3D 1</a>, and some of the <a href="flipbook-l-system3D2.htm">images</a> I produced with it. For a soup-to-nuts L-system in a minimal piece of code, see <a href="flipbook-l-system.htm">l-system</a>.
            </p>
        </div>

        <div class="section">
            <div class="header"> <img src="img/vim_small.gif" /> <a href="permanent-vim.htm"><h2> Vim </h2></a> </div>

            <p>
            Many years ago during an expedition into Linux I happened upon a text editor called <a href="http://www.vim.org">Vim</a>. I've been using it ever since. It's difficult to get across how powerful a tool Vim is, but it's something like this: High-level conceptual manipulations ("delete this variable", "replace this line") flow out through the muscle memory of your fingertips. So it's not just speed, it also makes editing more straightforward in terms of mental energy, despite how strange that may sound if you're a noob.
            </p>

            <p>
            Sadly, modern IDEs don't support Vim editing. Or so I thought. Recently I discovered <a href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329">VsVim</a>, which is a Vim emulation layer for Visual Studio. It's the first emulation layer I've found where pretty much all the commands I use are supported. This extension has single-handedly made Visual Studio my favorite IDE.
            </p>

            <p>
            For the record, the best Vim layer I've found for Eclipse is in <a href="http://www.slickedit.com/products/slickedit-core-for-eclipse">SlickEdit Core</a>. Its Vim emulation is a lot better than nothing, but it's not as replete as VsVim's.
            </p>
        </div>

        <div class="section"></div>

        <div class="links centered">
            <a class="pagelink" style="color: white;">&lt;&lt;</a>
            <span class="pagelink inactivePagelink">1</span>
            <a href="page2.htm" class="pagelink">2</a>
            <a href="page2.htm" class="pagelink">&gt;&gt;</a>
        </div>

    </div>
</body>
</html>
