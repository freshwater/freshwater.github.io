<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
    <head>
        <title> oftenpaper.net/sierpinski.htm </title>

        <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.9.0/build/reset-fonts-grids/reset-fonts-grids.css" />
        <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.9.0/build/base/base-min.css" />

        <link rel="stylesheet" type="text/css" href="oftencss.css" />

        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

        <script type="text/javascript" id="mathjax" src="https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
        <script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax:{inlineMath:[['$','$']]}})</script>

        <script type="text/javascript" src="flipbook.js"></script>
    </head>

<body>
    <h1><a href="/"> oftenpaper.net </a></h1>
    <h3>the sierpinski triangle page to end most sierpinski triangle pages &#0153;</h3>

    <br />

    <center class="consumable" style="margin-top: 20px; margin-bottom: 25px;">
        <img src="img/siermasterlock22.png" width="181" height="157" />
    </center>

    <div class="content">

        <div class="section">
            <div class="header"> <h2> Constructing the Sierpinski triangle </h2> </div>

            <p>
            Throughout my years playing around with fractals, the Sierpinski triangle has been a consistent staple. The triangle is named after <a href="http://en.wikipedia.org/wiki/Wac%C5%82aw_Sierpi%C5%84ski">Wac&#0322;aw Sierpi&#324;ski</a> and as fractals are wont the pattern appears in many places, so there are many different ways of constructing the triangle on a computer.
            </p>

            <p>
            All of the methods are fundamentally iterative. The most obvious method is probably the triangle-in-triangle approach. We start with one triangle, and at every step we replace each triangle with 3 subtriangles:
            </p>

            <ol class="flipbook static" name="triangle in triangle">
                <li>
                <img src="img/siermathgb3.png" width="602" height="527"/>
                </li>
                <li>
                <img src="img/siermathgb2.png" width="602" height="527"/>
                </li>
                <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}];
</pre>
                </li>
            </ol>

            <p>
            This triangle-in-triangle method strikes me as a disguised Lindenmayer system. L-systems are iterative symbol-based replacement mechanisms. There are a variety of more explicit L-system constructions for the triangle, such as the 'arrowhead' L-system (also see my <a href="index.htm#lsystems">L-systems program</a>):
            </p>

            <ol class="flipbook static" name="l-system">
                <li name="table">
                <img src="img/sierlsys3.png" width="602" height="572" />
                </li>
                <li name="source">
<pre>
axiom <span class="Statement">=</span> {A};
rules <span class="Statement">=</span> {A <span class="Statement">-&gt;</span> {B, R, A, R, B}, B <span class="Statement">-&gt;</span> {A, L, B, L, A}};
conversions <span class="Statement">=</span> {A <span class="Statement">-&gt;</span> forward, B <span class="Statement">-&gt;</span> forward, L <span class="Statement">-&gt;</span> left, R <span class="Statement">-&gt;</span> right};

<span class="Comment">(* state transformations *)</span>
<span class="Identifier">forward</span>[{<span class="Type">z_</span>, <span class="Type">a_</span>}] <span class="Statement">:=</span> {z <span class="Statement">+</span> <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> a), a};
<span class="Identifier">left</span>[{<span class="Type">z_</span>, <span class="Type">a_</span>}] <span class="Statement">:=</span> {z, a <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};
<span class="Identifier">right</span>[{<span class="Type">z_</span>, <span class="Type">a_</span>}] <span class="Statement">:=</span> {z, a <span class="Statement">-</span> <span class="Type">2</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{program, zs},
  program <span class="Statement">=</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Nest</span>[<span class="Statement">#</span> <span class="Statement">/.</span> rules <span class="Statement">&amp;</span>, axiom, n]] <span class="Statement">/.</span> conversions;
  zs <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">ComposeList</span>[program, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}];
  <span class="Identifier">Graphics</span>[<span class="Identifier">Line</span>[{<span class="Identifier">Re</span>[<span class="Statement">#</span>], <span class="Identifier">Im</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Split</span>[zs]]]];
</pre>
                </li>
            </ol>

            <p>
            There's the cellular automata approach, where the 'world' is a single array of bits and at each "instant" we alter a bit based on the state of it and its neighbors. If we plot the evolution of Rule 22 (and others), we get these patterns:
            </p>

            <ol class="flipbook static" name="cellular automata 1">
                <li name="table">
                <img src="img/sierca.png" width="600" height="600" />
                </li>
                <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">ArrayPlot</span>[<span class="Identifier">CellularAutomaton</span>[<span class="Type">22</span>, {{<span class="Type">1</span>}, <span class="Type">0</span>}, n]];
</pre>
                </li> 
            </ol>

            <p>
            There are bound to be many elementary number-theoretic constructions of the Sierpinski triangle given that it looks like a percolation pattern (as in the cellular automata above). The <a href="http://en.wikipedia.org/wiki/Sierpinski_triangle">Wikipedia article</a> mentions that it appears in Pascal's Triangle when differentiating between even and odd numbers. Sure enough:
            </p>

            <ol class="flipbook static" name="pascal's triangle">
                <li>
                <img src="img/sierpasc1.png" width="600" height="511" />
                </li>
                <li>
                <img src="img/sierpasc2.png" width="600" />
                </li>
                <li>
                <img src="img/sierpasc3.png" width="394" height="652" />
                </li>
                <li name="source"><pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{t},
    t <span class="Statement">=</span> <span class="Identifier">Table</span>[<span class="Identifier">Binomial</span>[m, k], {m, <span class="Type">0</span>, n}, {k, <span class="Type">0</span>, m}];

    <span class="Identifier">Column</span>[<span class="Identifier">Row</span>[<span class="Statement">#</span>, <span class="String">&quot; &quot;</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> t, Center] <span class="Statement">/.</span> {
        <span class="Type">x_</span><span class="Statement">?</span><span class="Type">EvenQ </span><span class="Statement">:&gt;</span><span class="Type"> </span><span class="Identifier">Style</span><span class="Type">[</span><span class="Identifier">Framed</span><span class="Type">[x</span>], LightGray],
        <span class="Type">x_</span><span class="Statement">?</span><span class="Type">OddQ </span><span class="Statement">:&gt;</span><span class="Type"> </span><span class="Identifier">Framed</span><span class="Type">[x</span>]}];
</pre></li>
            </ol>

            <p>
            If we look at these Pascal forms and reverse engineer the parity rules, we get Rule 22. Though it might depend on what exactly you're reverse engineering. We can generalize from even/odd to other moduli:
            </p>

            <ol class="flipbook static" name="pascal's mexican hat">
                <li>
                    <h4> Pascal's triangle mod 4 </h4>
                    <img src="img/sierpasc7.png" width="575" height="640" />
                </li>
                <li>
                <h4> Pascal's triangle $x\equiv 2\space(\text{mod }4)$ </h4>
                    <img src="img/sierpasc8.png" width="575" height="640" />
                </li>
                <li name="source">
                <pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{t},
   t <span class="Statement">=</span> <span class="Identifier">Table</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Binomial</span>[m, k], <span class="Type">4</span>], {m, <span class="Type">0</span>, n}, {k, <span class="Type">0</span>, m}];

   <span class="Identifier">Column</span>[<span class="Identifier">Row</span>[<span class="Statement">#</span>, <span class="String">&quot; &quot;</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> t, Center] <span class="Statement">/.</span> <span class="Type">x_</span><span class="Statement">?</span><span class="Type">NumberQ </span><span class="Statement">:&gt;</span>
     <span class="Identifier">Style</span>[<span class="Identifier">Framed</span>[<span class="String">&quot;  &quot;</span>, FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">None</span>],
      Background <span class="Statement">-&gt;</span> <span class="Identifier">ColorData</span>[<span class="Type">3</span>][<span class="Type">2</span> <span class="Statement">+</span> x]]];
</pre>
                </li>
            </ol>

            <p>
            The Wikipedia article for <a href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal's triangle</a> mentions that we can construct a 'Pascal matrix' using the matrix exponential:
            </p>

            <div style="font-size: larger">
$$
e^{\left(
\begin{array}{ccccc}
 0 & 0 & 0 & 0 & 0 \\
 1 & 0 & 0 & 0 & 0 \\
 0 & 2 & 0 & 0 & 0 \\
 0 & 0 & 3 & 0 & 0 \\
 0 & 0 & 0 & \ddots & 0 \\
\end{array}
\right)}=\left(
\begin{array}{ccccc}
 1 & 0 & 0 & 0 & 0 \\
 1 & 1 & 0 & 0 & 0 \\
 1 & 2 & 1 & 0 & 0 \\
 1 & 3 & 3 & 1 & 0 \\
 1 & 4 & 6 & 4 & \ddots \\
\end{array}
\right)
$$
            </div>

            <p>
            "Ah, that makes sense." You say. Indeed, but what's cool is that we then have a pedantic way of specifying the Sierpinski triangle:
            </p>

            <div style="font-size: larger">
$$

\mathfrak{S}\equiv e^{\left(
\begin{array}{ccccc}
 0 & 0 & 0 & 0 & 0 \\
 1 & 0 & 0 & 0 & 0 \\
 0 & 2 & 0 & 0 & 0 \\
 0 & 0 & 3 & 0 & 0 \\
 0 & 0 & 0 & \ddots & 0 \\
\end{array}
\right)}(\text{mod } 2)

$$

            </div>

        <p>
        This equation is in what's called "straight ballin'" form, and it gives us a fancy way of producing the triangle:
        </p>

        <ol class="flipbook static" name="pascal matrix mod hat" default="2">
            <li name="image">
            <img src="img/sierpasc5.png" width="360" height="359" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">ArrayPlot</span>[<span class="Identifier">Mod</span>[<span class="Identifier">MatrixExp</span>[<span class="Identifier">DiagonalMatrix</span>[<span class="Identifier">Range</span>[n], <span class="Statement">-</span><span class="Type">1</span>]], <span class="Type">2</span>]];
</pre>
            </li>
        </ol>

        <p>
        Heawt deaowg /drawl. It's not very performant though. The following is faster and arguably more elegant:
        </p>

        <ol class="flipbook static" name="binomial" default="2">
            <li name="image">
            <img src="img/sierpasc9.png" width="360" height="359" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">ArrayPlot</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>]];
</pre>
            </li>
        </ol>

        <p>
        Along these lines, it shouldn't be surprising that the Sierpinski pattern appears in other combinatorial expressions, such as the Stirling numbers:
        </p>

        <ol class="flipbook static" name="hypernomial">
            <li name="table">
            <img src="img/hypernomial1.png" width="600" height="629" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">2</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">Table</span>[<span class="Identifier">ArrayPlot</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[f, {n, n}], <span class="Type">2</span>],
     PlotLabel <span class="Statement">-&gt;</span> f, FrameStyle <span class="Statement">-&gt;</span> LightGray],
    {f, {Binomial, StirlingS1, StirlingS2, Multinomial}}];
</pre>
            </li>
        </ol>

        <p>
        If we treat the rows produced by these combinatorial functions as arrays of bits, what sequence of numbers do the bits represent? There's a variety of ways to interpret this question, but here's one assortment:
        </p>

        <ol class="flipbook static" name="number list">
            <li name="table">
            $$
\left(
\begin{array}{ccccccccccc}
 \text{Binomial} & 1 & 3 & 5 & 15 & 17 & 51 & 85 & 255 & 257 & \ldots  \\
 \text{StirlingS1} & 1 & 1 & 3 & 3 & 5 & 5 & 15 & 15 & 17 & \ldots  \\
 \text{StirlingS2} & 1 & 1 & 3 & 7 & 13 & 29 & 55 & 115 & 209 & \ldots  \\
 \text{Multinomial} & 511 & 341 & 409 & 273 & 481 & 321 & 385 & 257 & 255 & \ldots  \\
\end{array}
\right)
$$
            </li>
            <li name="source">
<pre style="font-size: 13px">

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">With</span>[{dropZeros <span class="Statement">=</span> <span class="Statement">#</span> <span class="Statement">/.</span> {<span class="Type">x__</span>, <span class="Type">0</span> <span class="Statement">..</span>} <span class="Statement">:&gt;</span> {x} <span class="Statement">&amp;</span>},
   <span class="Identifier">MatrixForm</span>[<span class="Identifier">Table</span>[<span class="Identifier">Flatten</span>[
      {f, <span class="Identifier">FromDigits</span>[<span class="Identifier">dropZeros</span>[<span class="Statement">#</span>], <span class="Type">2</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[f, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>], <span class="String">&quot;\[Ellipsis]&quot;</span>}],
     {f, {Binomial, StirlingS1, StirlingS2, Multinomial}}]]];

</pre>
            </li>
        </ol>

        <p>
        The first, second, and fourth sequences are versions of each other, tautologically described in OEIS as <a href="http://oeis.org/A001317">A001317</a>. The sequence for the Stirling numbers of the second kind doesn't seem to have any fame, but if you shift its bits around you can find <a href="http://oeis.org/A099901">A099901</a> and <a href="http://oeis.org/A099902">A099902</a>.
        </p>

        <p>
        The Wikipedia article for the Sierpinski triangle mentions its appearance in logic tables such as <a href="http://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Multigrade_operator_AND.svg/1000px-Multigrade_operator_AND.svg.png">this one</a>. If you stare blankly at that image long enough you'll notice it's a set-inclusion table. Take the subsets of a set and pair them against each other under set-inclusion (is subset A a subset of subset B?) and you will get that table.
        </p>

        <p>
        Personally that's a more interesting interpretation than the binary logic one, though the apparent distinction between these subjects is likely just a matter of perspective. Another set-related Sierpinski pattern I found is set disjunction (when sets have no common elements):
        </p>

        <ol class="flipbook static" name="set theoretic">
            <li name="table">
                <img src="img/issubarein1.png" width="600" height="313" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">isSubset</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:=</span> <span class="Identifier">Union</span>[a, b] <span class="Statement">==</span> b;
<span class="Identifier">areDisjoint</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:=</span> <span class="Identifier">Intersection</span>[a, b] <span class="Statement">==</span> {};

<span class="Identifier">subs</span>[<span class="Type">0</span>] <span class="Statement">=</span> {{}};
<span class="Identifier">subs</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{s <span class="Statement">=</span> <span class="Identifier">subs</span>[n <span class="Statement">-</span> <span class="Type">1</span>]},
   <span class="Identifier">Join</span>[s, <span class="Identifier">Append</span>[<span class="Statement">#</span>, n] <span class="Statement">&amp;</span> <span class="Statement">/@</span> s]];

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Grid</span>[<span class="Identifier">List</span>[<span class="Identifier">Table</span>[
     <span class="Identifier">ArrayPlot</span>[<span class="Identifier">Boole</span>[<span class="Identifier">Outer</span>[f, <span class="Identifier">subs</span>[n], <span class="Identifier">subs</span>[n], <span class="Type">1</span>]],
      PlotLabel <span class="Statement">-&gt;</span> f, FrameStyle <span class="Statement">-&gt;</span> LightGray],
     {f, {isSubset, areDisjoint}}]]]
</pre>
            </li>
        </ol>

        <p>
        One thing I noticed is that these set patterns depend on the order in which you place the subsets. It has to be the same order that you would get if you were constructing the subsets iteratively. I also wasn't able to find a straightforward ranking function that would order the sets into this iterative sequence. Mathematica's Combinatorica package refers to it as the binary ordering. I think I'm starting to understand what Gandalf meant when he said
        </p>

        <p style="max-width: 680px; margin-left: auto; margin-right: auto">
        <span style="font-size: large">"</span>
        <i>The Sierpinski triangle cannot-be wrought without heed to the creeping tendrils of
            recursion. Even the binomial coefficient has factorials which are recursively defined.
        </i>
        <span style="font-size: large">"</span>
        </p>

        <p>
        MathWorld mentions a broader context for why binary logic can be used in the construction of the Sierpinski triangle. Namely the <a href="http://mathworld.wolfram.com/LucasCorrespondenceTheorem.html">Lucas correspondence theorem</a> which states that given two numbers written in a prime base,
        </p>

        $$n=n_mp^m+\cdots+n_1p^1+n_0p^0\space\space\space(0\le n_i\le p)$$
        $$k=k_mp^m+\cdots+k_1p^1+k_0p^0\space\space\space(0\le k_i\le p)$$

        <p>
        We can get their binomial coefficient modulo that prime by performing binomial coefficients digit-wise and multiplying the results.
        </p>

        $$\binom{n}{k}=\prod _{i=0}^m \binom{n_i}{k_i}(\text{mod }p)$$

        <p>
        The binomial coefficient $\binom{n}{k}$ represents the number of $k$-element subsets of a set of $n$ elements. If we're using zeros and ones, then:
        </p>

        <ol class="flipbook static" name="little binomial table">
            <li name="table">
$$
\begin{array}{cc}
 \binom{0}{0}=1 & \binom{0}{1}=0 \\
 \binom{1}{0}=1 & \binom{1}{1}=1 \\
\end{array}
$$
            </li>
            <li name="source">
<pre>

<span class="Identifier">TraditionalForm</span>[<span class="Identifier">Grid</span>[<span class="Identifier">Outer</span>[
    <span class="Identifier">HoldForm</span>[<span class="Identifier">Binomial</span>[<span class="Statement">##</span>]] <span class="Statement">==</span> <span class="Identifier">Binomial</span>[<span class="Statement">##</span>] <span class="Statement">&amp;</span>,
  {<span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Type">0</span>, <span class="Type">1</span>}]]]

</pre>
            </li>
        </ol>

        <p>The factorial definition is interesting in this case.</p>

        $$\binom{n}{k} = \frac {n!} {k!(n-k)!}$$

        <p>
        Notice that if we have <span style="font-size: small">$\binom 0 1$</span>, we get the factorial of a negative number in the denominator. By sticking with the recursive definition of the factorial, the conclusion is that the denominator is some flavor of $\infty$, so you have $\frac 1 \infty=0$. ($0!$ is defined as 1).
        </p>

        <p>
        The binary operation I found in our little <span class="flipbookLink" name="little binomial table" index="1">binary binomial table</span> was NOTing $n$, ANDing the result with $k$, and then NOTing that: <span style="">$\neg(\neg n\land k)=n\lor \neg k$</span>. Also notice it's equivalent to the greater than or equal to operation $n \ge k$.
        </p>

        <p>
        If by some stroke of luck we happen to have the two numbers stored in binary on our computer, these operations can be performed atomically on the numbers as a whole. And since we're multiplying everything at the end, any presence of <span style="font-size: small">$\binom 0 1$</span> in the original numbers means the binomial is congruent to 2. The only trick would be tracking whatever the most significant bit of either number was.
        </p>

        <ol class="flipbook static" name="binary 101">
            <li name="image">
            <img src="img/sierbin1.png" width="360" height="359" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">binaryBinomial</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{bits},
   bits <span class="Statement">=</span> <span class="Identifier">IntegerDigits</span>[{a, b}, <span class="Type">2</span>];
   bits <span class="Statement">=</span> <span class="Identifier">PadLeft</span>[<span class="Statement">#</span>, <span class="Identifier">Max</span>[<span class="Identifier">Length </span><span class="Statement">/@</span> bits]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> bits;

   <span class="Identifier">Boole</span>[<span class="Identifier">FreeQ</span>[<span class="Identifier">Transpose</span>[bits], {<span class="Type">0</span>, <span class="Type">1</span>}]]];

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPlot</span>[
   <span class="Identifier">Array</span>[binaryBinomial, {<span class="Type">2</span><span class="Statement">^</span>n, <span class="Type">2</span><span class="Statement">^</span>n}, <span class="Type">0</span>],
   Frame <span class="Statement">-&gt;</span> <span class="Identifier">None</span>];
</pre>
            </li>
        </ol>

        <p>
        There's a lot of related patterns:
        </p>

        <ol class="flipbook static" name="binary 203">
            <li name="image">
            <img src="img/sierbin2.png" width="400" height="399" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">binaryWhoKnows</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:=</span>
  <span class="Identifier">DigitCount</span>[<span class="Identifier">BitOr</span>[a, <span class="Identifier">BitNot</span>[b]], <span class="Type">3</span>, <span class="Type">1</span>];

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPlot</span>[
   <span class="Identifier">Array</span>[binaryWhoKnows, {<span class="Type">2</span><span class="Statement">^</span>n, <span class="Type">2</span><span class="Statement">^</span>n}, <span class="Type">0</span>],
   Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];
</pre>
            </li>
        </ol>

        <p>
        And look what I found!
        </p>

        <div style="font-size:large">
        $$
        2 b\lor \neg 2 b = \text{true}
        $$
        <!--div style="font-size: 1px; color: #fbfbfb; text-align: center">...provided we exclude the
            middle...</div-->
        </div>

        <p>
        If we're looking for a one- or two-liner that's one- or two-linear in languages beside Mathematica, we'd have trouble doing better than the chaos game algorithm, which goes like this:
        </p>

<pre>
<span class="lnr">1 </span>start at any point. call it p
<span class="lnr">2 </span>pick one of the three vertices at random
<span class="lnr">3 </span>find the point halfway between p and that vertex
<span class="lnr">4 </span>call that point p and draw it
<span class="lnr">5 </span>goto 2
</pre>

        <ol class="flipbook static" name="chaos game">
            <!--li>
            <img src="img/sierchaos1.png" width="600" height="522" />
            </li-->
            <li name="image">
            <img src="img/sierchaos2.png" width="640" height="557" />
            </li>
            <li name="source">
<pre>
vertices <span class="Statement">=</span> {{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}};

<span class="Identifier">draw</span>[<span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]}];
</pre>
            </li>
            <li name="?">
<pre>
vertices <span class="Statement">=</span> {{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}};

<span class="Identifier">draw</span>[<span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]},
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>];

<span class="Identifier">draw</span>[<span class="Type">50000000</span>] <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span> <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>]] <span class="Statement">&amp;</span>
</pre> 
            </li>
        </ol>

        <p>
        The chaos game doesn't render as crisply as a lot of the other methods, especially without transparency effects, but it has the advantage of being highly performant. It runs about one million points per second on my laptop. Mind you this is with Mathematica's RNG, which is not your everyday <span style="font-family: monospace">math.rand()</span>.
        </p>

        <p>
        One thing I realized is that the randomness isn't actually a necessary aspect of the general algorithm. It's used as an approximating force (or perhaps something a bit more subtle than that). Otherwise with enough spacetime on your computer you can just perform all possible half-distancings:
        </p>

        <ol class="flipbook static" name="sierpinski full">
            <!--li>
            <img src="img/sierfull4.png" width="600" height="522" />
            </li-->
            <li name="image">
            <img src="img/sierfull5.png" width="640" height="557" />
            </li>
            <li name="source">
            <pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> { 
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> Polygon <span class="Statement">-&gt;</span> Point}];


</pre>
            </li>
            <li name="?">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">points</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">DeleteDuplicates</span>[<span class="Identifier">Flatten</span>[
    <span class="Identifier">Nest</span>[next, axiom, n] <span class="Statement">/.</span> Polygon <span class="Statement">-&gt;</span> Sequence, n]];

<span class="Identifier">points</span>[<span class="Type">5</span>]
</pre>
</li>
        </ol>

        <p>
        These images look basically the same. Not surprising since they're both point-based. But I gander the distinction between these two algorithms may have been more than just an issue of curiousity 20 years ago. I still remember my first computer, the alien-processored TI-85, chugging away furiously for a good half a minute before the triangle became clear.
        </p>

        <p>
        Notice that <span class="flipbookLink" name="sierpinski full" index="2">this specific algorithm</span> is actually just a minor modification of the triangle-in-triangle algorithm. The difference is that polygon vertices are here rendered as points. This modification is possible because of Mathematica's symbolic semantics. The symbol <span style="font-family: monospace">Polygon</span> is <i>meaningless</i> until it's processed by the <span style="font-family: monospace">Graphics</span> function. Until then, we can perform structural operations such as replacing it by the <span style="font-family: monospace">Point</span> symbol. In fact the following is completely valid:
        </p>

        <pre>
axiom <span class="Statement">=</span> <span class="Identifier">triangle</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">triangle</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">triangle</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">triangle</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">triangle</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span style="background: lightgray"> triangle <span class="Statement">:&gt;</span> Polygon </span>];
</pre>

        <p>
        <span style="font-family: monospace">triangle</span> here doesn't have any meaning, ever,
        until we replace it:
        </p>

        <ol class="flipbook static" name="pure algorithm" default="3">
            <li>
                <h4><pre> triangle <span class="Statement">:&gt;</span> Polygon</pre></h4>
                <img src="img/sierpure1.png" width="600" height="522" />
            </li>
            <li>
                <h4><pre> triangle <span class="Statement">:&gt;</span> Line</pre></h4>
                <img src="img/sierpure2.png" width="600" height="522" />
            </li>
            <li>
                <h4><pre><span class="Identifier">triangle</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Line</span>[<span class="Identifier">RandomChoice</span>[pts, <span class="Identifier">RandomInteger</span>[{<span class="Type">2</span>, <span class="Type">3</span>}]]]</pre></h4>
                <img src="img/sierpure5.png" width="600" height="522" />
            </li>
            <li>
                <h4><pre><span class="Identifier">triangle</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Disk</span>[<span class="Identifier">Mean</span>[pts], <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span><span class="Statement">^</span>(n <span class="Statement">+</span> <span class="Type">1</span>)]</pre></h4>
                <img src="img/sierpure3.png" width="600" height="523" />
            </li>
            <li>
                <h4><pre>
<span class="Identifier">triangle</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Sphere</span>[<span class="Identifier">Append</span>[<span class="Identifier">Mean</span>[pts], <span class="Type">0</span>], <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span><span class="Statement">^</span>(n <span class="Statement">+</span> <span class="Type">1</span>)]
</pre></h4>
                <img src="img/sierpure8.png" width="600" height="600" />
            </li>
        </ol>

        <p>
        <b>Sidenote.</b> What do you get when you methodically build a Lisp on top of symbolic replacement semantics? You get the Mathematica language, of which Mathematica and <a href="http://www.mathics.net/">Mathics</a> appear to be the only incarnations.
        </p>

        <p>
        Let's say you forgot how to multiply matrices. Well, just type in some symbols and see the results empirically:
        </p>
        <br />
<pre>{{a, b}, {c, d}} <span class="Statement">.</span> {{e, f}, {g, h}} <span class="Statement">//</span><span class="Identifier"> MatrixForm</span></pre>

$$
\left(
\begin{array}{cc}
 a e+b g & a f+b h \\
 c e+d g & c f+d h \\
\end{array}
\right)
$$

<br />

        <p>
        If that's still confusing, you can use strings, colored text, graphics, images, etc.  instead of symbols. In fact if you have a Tron zapper you can even zap your cat into Mathematica and have him fill up one of those matrix slots, for the advancement of science.
        </p>

        <ol class="flipbook static" name="kitty!">
            <li name="The Matrix">
            <img src="img/binomialcat3.png" width="537" height="142" />
            </li>
            <li name="The Source">
            <pre style="font-size: 12px">
kitty <span class="Statement">=</span> <span class="Identifier">WolframAlpha</span>[<span class="String">&quot;cat picture&quot;</span>, <span class="String">&quot;PodImages&quot;</span>][[<span class="Type">2</span>]];

<span class="Comment">(* see <a href="http://mathematica.stackexchange.com/a/8291/950">http://mathematica.stackexchange.com/a/8291/950</a> *)</span>
text <span class="Statement">=</span> <span class="Identifier">First</span>[<span class="Identifier">First</span>[<span class="Identifier">ImportString</span>[<span class="Identifier">ExportString</span>[
      <span class="Identifier">Style</span>[<span class="String">&quot;IM IN UR MATRIX...&quot;</span>, FontFamily <span class="Statement">-&gt;</span> <span class="String">&quot;Impact&quot;</span>], <span class="String">&quot;PDF&quot;</span>]]]];

sym <span class="Statement">=</span> <span class="Identifier">Framed</span>[<span class="Identifier">Overlay</span>[{kitty,
     <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], <span class="Identifier">White</span>, text}, ImageSize <span class="Statement">-&gt;</span> <span class="Type">150</span>,
     PlotRangePadding <span class="Statement">-&gt;</span> <span class="Type">0</span>]}], FrameStyle <span class="Statement">-&gt;</span> LightGray];

{{a, b}, {<span class="Identifier">Magnify</span>[sym, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>], d}} <span class="Statement">.</span> {{e, f}, {g, h}} <span class="Statement">//</span><span class="Identifier"> MatrixForm</span>
</pre>
            </li>
        </ol>

        <p>
        There's poor Mr. Scruples. Our neighbor will miss him.
        </p>

        <p>
        The exponential identity for the Pascal matrix is not difficult to understand based on the series definition of the exponential function:
        </p>

        $$
        e^x=\frac{x^0}{0!}+\frac{x^1}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+\frac{x^4}{4!}+\frac{x^5}{5!}+\cdots
        $$

        <p>
        You could work out the matrix arithmetic by hand, or you could do this:
        </p>

<br />

<pre>
<span class="Identifier">power</span>[<span class="Type">n_</span>, <span class="Type">p_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPower</span>[
    <span class="Identifier">DiagonalMatrix</span>[<span style="background: lightgray"><span class="Identifier">ToString </span><span class="Statement">/@</span> </span><span class="Identifier">Range</span>[n], <span class="Statement">-</span><span class="Type">1</span>], p] <span class="Statement">//</span><span class="Identifier"> MatrixForm</span>;

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Identifier">Table</span>[<span class="Identifier">power</span>[<span class="Type">6</span>, p], {p, <span class="Type">1</span>, <span class="Type">6</span>}], <span class="Type">3</span>]] <span class="Statement">/.</span> <span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="String">&quot;\[CenterDot]&quot;</span>
</pre>

        <div style="font-size: 10px">

<br />

$$
\begin{array}{ccc}
 \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & 2 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & 3 & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & 4 & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & 5 & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 6 & \cdot  \\
\end{array}
\right) & \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 2 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & 2 3 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & 3 4 & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & 4 5 & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & 5 6 & \cdot  & \cdot  \\
\end{array}
\right) & \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 2 3 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & 2 3 4 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & 3 4 5 & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & 4 5 6 & \cdot  & \cdot  & \cdot  \\
\end{array}
\right) \\
 \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 2 3 4 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & 2 3 4 5 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & 3 4 5 6 & \cdot  & \cdot  & \cdot  & \cdot  \\
\end{array}
\right) & \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 2 3 4 5 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & 2 3 4 5 6 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
\end{array}
\right) & \left(
\begin{array}{ccccccc}
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 2 3 4 5 6 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
\end{array}
\right) \\
\end{array}
$$

<br />
<br />
</div>

        <p>
        These are the first 6 powers of the subdiagonal matrix. You can see that the diagonal gets multiplied by subsequently shifted versions of itself, so the calculation ends up creating factorial products. For example, 3x4x5x6 (in the fourth power) can be written in terms of factorials as $6!/2!$. If we factor in the denominator from the series for $e$, we have
        </p>

        $$\frac {6!} {4!2!}$$

        <p>
        From the factorial definition of the binomial coefficient:
        </p>

        $$\binom{n}{k} = \frac {n!} {k!(n-k)!}$$

        <p>
        We see that this particular slot in the matrix is <span style="font-size: small">$\binom 6 4$</span>. The binomial coefficient itself is of course directly related to Pascal's triangle. Also notice that every power of the matrix has its numbers on a different diagonal, so when we sum up all the powers there is no interaction to account for. Every term in the series is a distinct diagonal of Pascal's triangle.
        </p>

        <p>
        Powers of matrices have a well-known interpretation in terms of graph walks/probabilities. I didn't find anything interesting along this line though. What about graphs represented by the Sierpinski matrix itself?
        </p>

<br />
        <div style="font-size: 10px">
$$\left(
\begin{array}{cccccccccccccccc}
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  \\
 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\
\end{array}
\right)$$
        </div>
<br />

        <p>
        Those were more interesting:
        </p>

        <ol class="flipbook static" name="sierpinski adjacency graph">
            <li>
            <img src="img/siertetrakawhata10.png" width="583" height="603" />
            </li>
            <li>
            <img src="img/siertetrakawhata6.png" width="548" height="635" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">graph</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">GraphPlot3D</span>[
   <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>],
   Method <span class="Statement">-&gt;</span> <span class="String">&quot;HighDimensionalEmbedding&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
   VertexRenderingFunction <span class="Statement">-&gt;</span> ({<span class="Identifier">White</span>, <span class="Identifier">Sphere</span>[<span class="Statement">#</span>, <span class="Statement">.</span><span class="Type">05</span>]} <span class="Statement">&amp;</span>),
   PlotStyle <span class="Statement">-&gt;</span> {Thick, <span class="Identifier">Hue</span>[<span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>]}];
</pre>
            </li>
        </ol>

        <p>
        Note this is a <span class="flipbookLink" name="sierpinski adjacency graph" index="2">3D graph layout</span>. It has some <span class="flipbookLink" name="sierpinski adjacency graph" index="1">pretty symmetries</span>. I did some tiresome work trying to figure out what polyhedron it might be.
        </p>

<pre>
<span class="Identifier">Tooltip</span>[<span class="Identifier">PolyhedronData</span>[<span class="Statement">#</span>], <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Select</span>[
  <span class="Identifier">PolyhedronData</span>[], <span class="Identifier">PolyhedronData</span>[<span class="Statement">#</span>, <span class="String">&quot;VertexCount&quot;</span>] <span class="Statement">==</span> <span class="Type">14</span> <span class="Statement">&amp;</span>]
</pre>

        <p>
        After much time, I find. It's the tetrakis hexahedron:
        </p>

        <ol class="flipbook static" name="tetrakawhatawhoda">
            <li name="image">
            <img src="img/siertetrakawhata5.png" width="502" height="518" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">Graphics3D</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">94</span>], <span class="Identifier">FaceForm</span>[<span class="Identifier">Gray</span>],
  <span class="Identifier">PolyhedronData</span>[<span class="String">&quot;TetrakisHexahedron&quot;</span>, <span class="String">&quot;Faces&quot;</span>]},
 Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]
</pre>
            </li>
        </ol>

        <p>
        I'm certain it's this particular figure because we can just <span class="flipbookLink" name="isomorphism check" index="2">build a graph from its vertex data</span> and then do a graph isomorphism check. And look, we can run this polyhedron grapherizer willy-nilly allabouts, like on the <span class="flipbookLink" name="isomorphism check" index="1">Archimedean solids</span>:
        </p>

        <ol class="flipbook static" name="isomorphism check">
            <li name="table">
            <img src="img/siertetrakawhata4.png" width="608" height="499" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">polyGraph</span>[<span class="Type">poly_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graph</span>[<span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">PolyhedronData</span>[poly, <span class="String">&quot;EdgeIndices&quot;</span>], options];

<span class="Identifier">sierpinskiMatrixGraph</span>[<span class="Type">n_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{a},
   <span class="Comment">(*symmetrize and remove self-loops to allow general isomorphism</span>
<span class="Comment">   comparison. note that we remove the </span><span class="String">&quot;inner&quot;</span><span class="Comment"> vertex since</span>
<span class="Comment">   we're comparing the </span><span class="String">&quot;external&quot;</span><span class="Comment"> geometry as rendered*)</span>
   a <span class="Statement">=</span> <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">1</span>], <span class="Type">2</span>];
   <span class="Identifier">AdjacencyGraph</span>[a <span class="Statement">+</span> <span class="Identifier">Transpose</span>[a] <span class="Statement">/.</span> <span class="Type">2</span> <span class="Statement">-&gt;</span> <span class="Type">0</span>, options]];

<span class="Identifier">IsomorphicGraphQ</span>[<span class="Identifier">polyGraph</span>[<span class="String">&quot;TetrakisHexahedron&quot;</span>], <span class="Identifier">sierpinskiMatrixGraph</span>[<span class="Type">14</span>]]
<span class="Identifier">IsomorphicGraphQ</span>[<span class="Identifier">polyGraph</span>[<span class="String">&quot;CumulatedCube&quot;</span>], <span class="Identifier">sierpinskiMatrixGraph</span>[<span class="Type">14</span>]]

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">4</span>]] <span class="Statement">&amp;</span>[
  <span class="Identifier">polyGraph</span>[<span class="Statement">#</span>, PlotLabel <span class="Statement">-&gt;</span> <span class="Identifier">PolyhedronData</span>[<span class="Statement">#</span>, <span class="String">&quot;Name&quot;</span>]] <span class="Statement">&amp;</span> <span class="Statement">/@</span>
   <span class="Identifier">PolyhedronData</span>[<span class="String">&quot;Archimedean&quot;</span>]]
</pre>
            </li>
        </ol>

        <p>
        Here are the first few powers of the Sierpinski matrix:
        </p>

        <ol class="flipbook static" name="sierpinski matrix pow 101">
            <li name="powers" style="font-size: 8px">
$$
\begin{array}{cc}
 \left(
\begin{array}{cccccccccccccccc}
 1 &\cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & 1 & 1 & 1 & 1 & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  \\
 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  & 1 & 1 & \cdot  & \cdot  \\
 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  & 1 & \cdot  \\
 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\
\end{array}
\right) & \left(
\begin{array}{cccccccccccccccc}
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & 2 & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & 2 & \cdot  & \cdot  & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & 2 & \cdot  & 2 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 8 & 4 & 4 & 2 & 4 & 2 & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & 2 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & 2 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 2 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 8 & 4 & 4 & 2 & \cdot  & \cdot  & \cdot  & \cdot  & 4 & 2 & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & \cdot  & \cdot  & 2 & \cdot  & \cdot  & \cdot  & 2 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  \\
 8 & 4 & \cdot  & \cdot  & 4 & 2 & \cdot  & \cdot  & 4 & 2 & \cdot  & \cdot  & 2 & 1 & \cdot  & \cdot  \\
 8 & \cdot  & 4 & \cdot  & 4 & \cdot  & 2 & \cdot  & 4 & \cdot  & 2 & \cdot  & 2 & \cdot  & 1 & \cdot  \\
 16 & 8 & 8 & 4 & 8 & 4 & 4 & 2 & 8 & 4 & 4 & 2 & 4 & 2 & 2 & 1 \\
\end{array}
\right) \\
 \left(
\begin{array}{cccccccccccccccc}
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & 3 & 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & 3 & \cdot  & \cdot  & 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & \cdot  & 3 & \cdot  & 3 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 27 & 9 & 9 & 3 & 9 & 3 & 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & 3 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & \cdot  & 3 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 3 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 27 & 9 & 9 & 3 & \cdot  & \cdot  & \cdot  & \cdot  & 9 & 3 & 3 & 1 & \cdot  & \cdot  & \cdot  & \cdot  \\
 9 & \cdot  & \cdot  & \cdot  & 3 & \cdot  & \cdot  & \cdot  & 3 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  \\
 27 & 9 & \cdot  & \cdot  & 9 & 3 & \cdot  & \cdot  & 9 & 3 & \cdot  & \cdot  & 3 & 1 & \cdot  & \cdot  \\
 27 & \cdot  & 9 & \cdot  & 9 & \cdot  & 3 & \cdot  & 9 & \cdot  & 3 & \cdot  & 3 & \cdot  & 1 & \cdot  \\
 81 & 27 & 27 & 9 & 27 & 9 & 9 & 3 & 27 & 9 & 9 & 3 & 9 & 3 & 3 & 1 \\
\end{array}
\right) & \left(
\begin{array}{cccccccccccccccc}
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & 4 & 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & 4 & \cdot  & \cdot  & 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & \cdot  & 4 & \cdot  & 4 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 64 & 16 & 16 & 4 & 16 & 4 & 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 4 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & 4 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & \cdot  & 4 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 4 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 64 & 16 & 16 & 4 & \cdot  & \cdot  & \cdot  & \cdot  & 16 & 4 & 4 & 1 & \cdot  & \cdot  & \cdot  & \cdot  \\
 16 & \cdot  & \cdot  & \cdot  & 4 & \cdot  & \cdot  & \cdot  & 4 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  \\
 64 & 16 & \cdot  & \cdot  & 16 & 4 & \cdot  & \cdot  & 16 & 4 & \cdot  & \cdot  & 4 & 1 & \cdot  & \cdot  \\
 64 & \cdot  & 16 & \cdot  & 16 & \cdot  & 4 & \cdot  & 16 & \cdot  & 4 & \cdot  & 4 & \cdot  & 1 & \cdot  \\
 256 & 64 & 64 & 16 & 64 & 16 & 16 & 4 & 64 & 16 & 16 & 4 & 16 & 4 & 4 & 1 \\
\end{array}
\right) \\
\end{array}
$$
            </li>
            <li name="source">
<pre>
<span class="Identifier">power</span>[<span class="Type">n_</span>, <span class="Type">p_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPower</span>[
   <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>], p];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">2</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
 <span class="Identifier">Table</span>[
  <span class="Identifier">MatrixForm</span>[<span class="Identifier">power</span>[<span class="Type">16</span>, p] <span class="Statement">/.</span> <span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="String">&quot;\[CenterDot]&quot;</span>],
  {p, <span class="Type">1</span>, <span class="Type">4</span>}]
</pre>
            </li>
        </ol>

        <p>
        There's a lot of patterns here. For one, the powers of the Sierpinski matrix are Sierpinski matrices! This isn't necessarily interesting though. The powers of a triangular matrix are going to be triangular. But the numbers follow a curious sequence of powers. For example, in the third power we have the sequence {1, 3, 3, 9, 3, 9, 9, 27, 3, ... }. And this sequence occurs in every column and every row of the matrix, if you hop over the zeros. We can normalize the powers to find:
        </p>

        <ol class="flipbook static" name="sierpinski matrix pow 404">
            <li name="matrix" style="font-size: 10px">
$$
 \left(
\begin{array}{cccccccccccccccc}
 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & 1 & 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & 1 & \cdot  & \cdot  & 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & 1 & \cdot  & 1 & \cdot  & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & 2 & 2 & 1 & 2 & 1 & 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & 1 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  & 1 & \cdot  & 0 & \cdot  & \cdot  & \cdot  & \cdot  & \cdot  \\
 3 & 2 & 2 & 1 & \cdot  & \cdot  & \cdot  & \cdot  & 2 & 1 & 1 & 0 & \cdot  & \cdot  & \cdot  & \cdot  \\
 2 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 1 & \cdot  & \cdot  & \cdot  & 0 & \cdot  & \cdot  & \cdot  \\
 3 & 2 & \cdot  & \cdot  & 2 & 1 & \cdot  & \cdot  & 2 & 1 & \cdot  & \cdot  & 1 & 0 & \cdot  & \cdot  \\
 3 & \cdot  & 2 & \cdot  & 2 & \cdot  & 1 & \cdot  & 2 & \cdot  & 1 & \cdot  & 1 & \cdot  & 0 & \cdot  \\
 4 & 3 & 3 & 2 & 3 & 2 & 2 & 1 & 3 & 2 & 2 & 1 & 2 & 1 & 1 & 0 \\
\end{array}
 \right)
$$
            </li>
            <li name="source">
<pre>



<span class="Identifier">power</span>[<span class="Type">n_</span>, <span class="Type">p_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPower</span>[
   <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>], p];

<span class="Identifier">MatrixForm </span><span class="Statement">/@</span> <span class="Identifier">Table</span>[
  <span class="Identifier">IntegerExponent</span>[<span class="Identifier">power</span>[<span class="Type">16</span>, p], p] <span class="Statement">/.</span> <span class="Identifier">Infinity</span> <span class="Statement">-&gt;</span> <span class="String">&quot;\[CenterDot]&quot;</span>,
  {p, <span class="Type">2</span>, <span class="Type">4</span>}]



</pre>
            </li>
        </ol>

        <p>
        This is the sequence in terms of the exponent, and it applies to each power of the Sierpinski matrix, including the first power. For example, 3 to the power of each of {0, 1, 1, 2, 1, 2, 2, 3, 1, ...} is {1, 3, 3, 9, 3, 9, 9, 27, 3, ...}. This power sequence appears in OEIS as <a href="http://oeis.org/A000120">the number of ones in the binary representation of n</a>, among other descriptions.
        </p>

        <p>
        Here is a totally practical application of all of this. A pretty array of buttons:
        </p>

        <ol class="flipbook static" name="switchboard">
            <li name="switchboard">
            <img src="img/switchboard2.png" width="492" height="241" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">power</span>[<span class="Type">n_</span>, <span class="Type">p_</span>] <span class="Statement">:=</span> <span class="Identifier">MatrixPower</span>[<span class="Identifier">Transpose</span><span class="Statement">@</span><span class="Identifier">Reverse</span><span class="Statement">@</span>
     <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>], p];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">4</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
 <span class="Identifier">With</span>[{m <span class="Statement">=</span> <span class="String">&quot;you, are now infused, with, the power of, dot, dot, dot... &quot;</span>},
  <span class="Identifier">Array</span>[<span class="Identifier">Function</span>[p,
    <span class="Identifier">Button</span>[<span class="Identifier">Rotate</span>[<span class="Statement">#</span>, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>], <span class="Identifier">Speak</span>[m <span class="Statement">&lt;&gt;</span> <span class="Identifier">ToString</span>[p]]] <span class="Statement">&amp;</span><span class="Statement">@</span>
     <span class="Identifier">Rasterize</span><span class="Statement">@</span><span class="Identifier">MatrixPlot</span>[<span class="Identifier">IntegerExponent</span>[<span class="Identifier">power</span>[<span class="Type">2</span><span class="Statement">^</span>p, <span class="Type">4</span>], <span class="Type">10</span>],
       ImageSize <span class="Statement">-&gt;</span> <span class="Type">94</span>, Frame <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, PlotRangePadding <span class="Statement">-&gt;</span> <span class="Type">0</span>]],
   <span class="Type">8</span>]] 
</pre>
            </li>
        </ol>

        <p>
The Towers of Hanoi is a variation on the sticks-in-holes game where instead of putting sticks <i>in</i> holes, you put holes <i>around</i> sticks. Thus the game is ultimately a quaint philosophical remark on the roles of the sexes. But for our purposes there is a claim on the internets that the states of the game form Sierpinski triangle-like graphs:
        </p>

        <ol class="flipbook static" name="hanoi 1">
            <li>
            <img src="img/sierhanoi1.png" width="640" height="531" />
            </li>
            <li>
            <img src="img/sierhanoi2.png" width="600" height="539" />
            </li>
            <li>
            <img src="img/sierhanoi6.png" width="600" height="546" />
            </li>
            <li>
            <img src="img/sierhanoi5.png" width="600" height="526" />
            </li>
            <li name="source">
<pre style="font-size: 13px;">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">Less </span><span class="Statement">@@@</span> s;

<span class="Comment">(*do all physically possible moves. remove invalid moves afterward.*)</span>
<span class="Identifier">neighbors</span>[<span class="Type">states </span><span class="Statement">:</span> {<span class="Type">__state</span>}] <span class="Statement">:=</span> <span class="Identifier">Select</span>[<span class="Statement">#</span>, validQ] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">DeleteDuplicates</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
     <span class="Identifier">Table</span>[<span class="Identifier">Module</span>[{st2 <span class="Statement">=</span> st},

       <span class="Identifier">If</span>[<span class="Identifier">Length</span>[<span class="Identifier">st2</span>[[from]]] <span class="Statement">&gt;</span> <span class="Type">0</span>,
        <span class="Identifier">PrependTo</span>[<span class="Identifier">st2</span>[[to]], <span class="Identifier">st2</span>[[from, <span class="Type">1</span>]]];
        <span class="Identifier">st2</span>[[from]] <span class="Statement">=</span> <span class="Identifier">Rest</span>[<span class="Identifier">st2</span>[[from]]]];

       <span class="Identifier">If</span>[st2 <span class="Statement">=!=</span> st <span class="Statement">&amp;&amp;</span> <span class="Identifier">validQ</span>[st2],
        <span class="Identifier">Sow</span><span class="Statement">@</span><span class="Identifier">UndirectedEdge</span>[st, st2]];

       st2], {st, states}, {to, <span class="Identifier">Length</span>[st]}, {from, <span class="Identifier">Length</span>[st]}];

<span class="Identifier">toStyle</span>[<span class="Type">expr_</span>] <span class="Statement">:=</span> expr <span class="Statement">/.</span> <span class="Type">s_state</span> <span class="Statement">:&gt;</span> (
     <span class="Identifier">Property</span>[<span class="Identifier">Tooltip</span>[s, <span class="Identifier">MatrixForm </span><span class="Statement">/@</span> <span class="Identifier">List </span><span class="Statement">@@</span> s],
      VertexStyle <span class="Statement">-&gt;</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
        <span class="Identifier">ColorData</span>[<span class="Type">3</span>][<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Length</span>[s] <span class="Statement">-</span> <span class="Identifier">Count</span>[s, {}]]}]);

<span class="Identifier">hanoiGraph</span>[<span class="Type">s_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices, edges, n},
   n <span class="Statement">=</span> <span class="Identifier">Count</span>[s, <span class="Type">_Integer</span>, <span class="Identifier">Infinity</span>];
   {vertices, {edges}} <span class="Statement">=</span> <span class="Identifier">Reap</span>[<span class="Identifier">Nest</span>[neighbors, {s}, <span class="Type">2</span><span class="Statement">^</span>n]];

   <span class="Identifier">SetAttributes</span>[UndirectedEdge, <span class="Identifier">Orderless</span>];
   <span class="Identifier">Graph</span>[<span class="Identifier">toStyle</span>[vertices], <span class="Identifier">DeleteDuplicates</span>[edges],
    options<span class="Comment">(*,GraphLayout-&gt;</span><span class="String">&quot;SpringEmbedding&quot;</span><span class="Comment">*)(*,</span>
<span class="Comment">    VertexShapeFunction-&gt;(Style[#,7,Black]&amp;@</span>
<span class="Comment">    Text[Row[MatrixForm/@List@@#2],#1]&amp;)*)</span>]];

<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, <span class="Identifier">Range</span>[<span class="Type">4</span>]],
 Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Inset</span>[<span class="Identifier">Rotate</span>[<span class="Identifier">Style</span>[<span class="String">&quot;F-&quot;</span>, <span class="Type">300</span>, Bold, <span class="Identifier">Red</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">65</span>]], <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">7</span>]]]
</pre>
            </li>
        </ol>
        <br />

        <p>
        Which, as you can see, is a lie if I've ever seen one (internets, you are now on notice). Then again, if you fiddle with the layout and you squint a bit, you can <span class="flipbookLink" name="hanoi 1" index="2">kinda see it</span>, but it's the sort of Sierpinski triangle that Maddox would stamp a huge red F over. To be clear, <span class="flipbookLink" name="hanoi 1" index="3">each vertex represents a single state of the game</span>, and vertices are connected if there is a legal move between those states.
        </p>

        <p>
        The nice thing about <span class="flipbookLink" name="hanoi 1" index="5">this algorithm</span> is that at each step it just blindly constructs all possibilities, which is easy, and then afterwards removes the ones that aren't valid, which is also easy. Point being it works in broad strokes. And at the end of it we have a <span class="flipbookLink" name="hanoi 1" index="3">map to follow</span> if we ever get stuck. You can do this sort of thing for all sorts of things, like say <a href="http://reference.wolfram.com/mathematica/tutorial/PermutationGroups.html#1423666859">Rubik's cube</a>. Though I don't know if the combinatorics are favorable in its case. The Towers of Hanoi can be played with more than three sticks:
        </p>

        <ol class="flipbook static" name="hanoi 2">
            <li>
            <h4><pre style="text-align: center"><span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, {}, <span class="Identifier">Range</span>[<span class="Type">4</span>]]]</pre></h4>
            <img src="img/sierhanoi7.png" width="600" height="581" />
            </li>
            <li>
            <h4><pre style="text-align: center"><span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, {}, {}, <span class="Identifier">Range</span>[<span class="Type">4</span>]]]
</pre></h4>
            <img src="img/sierhanoi8.png" width="600" height="573" />
            </li>
            <li>
            <h4><pre style="text-align: center">
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, <span class="Identifier">Range</span>[<span class="Type">3</span>], <span class="Identifier">Range</span>[<span class="Type">3</span>]]]
</pre></h4>
            <img src="img/sierhanoi10.png" width="600" height="579" />
            </li>
            <li>
            <h4><pre style="text-align: center">
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, {<span class="Type">1</span>}, <span class="Identifier">Range</span>[<span class="Type">3</span>]]]
</pre></h4>
            <img src="img/sierhanoi12.png" width="600" height="600" />
            </li>
            <li>
            <h4><pre style="text-align: center">
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, {<span class="Type">2</span>}, <span class="Identifier">Range</span>[<span class="Type">3</span>]]]
</pre></h4>
            <img src="img/sierhanoi13.png" width="600" height="600" />
            </li>
            <li>
            <h4><pre style="text-align: center">
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, {<span class="Type">3</span>}, <span class="Identifier">Range</span>[<span class="Type">3</span>]]]
</pre></h4>
            <img src="img/sierhanoi14.png" width="600" height="600" />
            </li>
            <li>
            <h4><pre style="text-align: left">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">Equal </span><span class="Statement">@@@</span> s;
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, <span class="Identifier">ConstantArray</span>[<span class="Type">1</span>, <span class="Type">5</span>]]]
</pre></h4>
            <img src="img/sierhanoi15.png" width="600" height="528" />
            </li>
            <li>
            <h4><pre style="text-align: left">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">LessEqual </span><span class="Statement">@@@</span> s;
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, <span class="Identifier">ConstantArray</span>[<span class="Type">2</span>, <span class="Type">3</span>], <span class="Identifier">ConstantArray</span>[<span class="Type">1</span>, <span class="Type">3</span>]]]</pre></h4>
            <img src="img/sierhanoi16.png" width="600" height="600" />
            </li>
            <li>
            <h4><pre style="text-align: left">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">Equal </span><span class="Statement">@@@</span> s;
<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, <span class="Identifier">ConstantArray</span>[<span class="Type">2</span>, <span class="Type">3</span>], <span class="Identifier">ConstantArray</span>[<span class="Type">1</span>, <span class="Type">3</span>]]]</pre></h4>
            <img src="img/sierhanoi17.png" width="600" height="600" />
            </li>
        </ol>

        <p>
        "WHAT THE HELL IS THAT", you say. Indeed, it's messy because it's a low-D rendering. We can also play <span class="flipbookLink" name="hanoi 2" index="3">variations</span> of the game that allow multiple holes of the same diameter, or <span class="flipbookLink" name="hanoi 2" index="7">variations</span> where we adjust the rules a bit. In higher dimensions you can <span class="flipbookLink" name="hanoi 3D" index="2">see the structure better</span>:
        </p>

        <ol class="flipbook static" name="hanoi 3D">
            <li>
            <img src="img/sierhanoi3D6.png" width="600" height="536" />
            </li>
            <li>
            <img src="img/sierhanoi3D4.gif" width="360" height="360" />
            </li>
            <li name="source">
                <ol class="flipbook static" name="hanoi 3D source">
                    <li name="setup">
<pre style="font-size: 14px">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">Less </span><span class="Statement">@@@</span> s;

<span class="Comment">(*do all physically possible moves. remove invalid moves afterward.*)</span>
<span class="Identifier">neighbors</span>[<span class="Type">states </span><span class="Statement">:</span> {<span class="Type">__state</span>}] <span class="Statement">:=</span> <span class="Identifier">Select</span>[<span class="Statement">#</span>, validQ] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">DeleteDuplicates</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
     <span class="Identifier">Table</span>[<span class="Identifier">Module</span>[{st2 <span class="Statement">=</span> st},

       <span class="Identifier">If</span>[<span class="Identifier">Length</span>[<span class="Identifier">st2</span>[[from]]] <span class="Statement">&gt;</span> <span class="Type">0</span>,
        <span class="Identifier">PrependTo</span>[<span class="Identifier">st2</span>[[to]], <span class="Identifier">st2</span>[[from, <span class="Type">1</span>]]];
        <span class="Identifier">st2</span>[[from]] <span class="Statement">=</span> <span class="Identifier">Rest</span>[<span class="Identifier">st2</span>[[from]]]];

       <span class="Identifier">If</span>[st2 <span class="Statement">=!=</span> st <span class="Statement">&amp;&amp;</span> <span class="Identifier">validQ</span>[st2],
        <span class="Identifier">Sow</span><span class="Statement">@</span><span class="Identifier">UndirectedEdge</span>[st, st2]];

       st2], {st, states}, {to, <span class="Identifier">Length</span>[st]}, {from, <span class="Identifier">Length</span>[st]}];

<span class="Identifier">hanoiGraph</span>[<span class="Type">s_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices, edges, n},
    n <span class="Statement">=</span> <span class="Identifier">Count</span>[s, <span class="Type">_Integer</span>, <span class="Identifier">Infinity</span>];
    {vertices, {edges}} <span class="Statement">=</span> <span class="Identifier">Reap</span>[<span class="Identifier">Nest</span>[neighbors, {s}, <span class="Type">2</span><span class="Statement">^</span>n]];

    <span class="Identifier">SetAttributes</span>[UndirectedEdge, <span class="Identifier">Orderless</span>];
    <span class="Identifier">Graph</span>[<span class="Identifier">DeleteDuplicates</span>[edges]]];
</pre>
                    </li>
                    <li name="3D">
<pre style="font-size: 14px">
<span class="Identifier">toStyle3D</span>[<span class="Type">g_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{st <span class="Statement">=</span> <span class="Identifier">VertexList</span>[g][[<span class="Statement">#2</span>]]},
    <span class="Identifier">Tooltip</span>[{<span class="Identifier">ColorData</span>[<span class="Type">3</span>][<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Length</span>[st] <span class="Statement">-</span> <span class="Identifier">Count</span>[st, {}]],
      <span class="Identifier">Opacity</span>[<span class="Type">1</span>], <span class="Identifier">Sphere</span>[<span class="Statement">#1</span>, <span class="Statement">.</span><span class="Type">045</span>]}, <span class="Identifier">MatrixForm </span><span class="Statement">/@</span> <span class="Identifier">List </span><span class="Statement">@@</span> st]] <span class="Statement">&amp;</span>;

<span class="Identifier">hanoiGraph3D</span>[<span class="Type">s_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{g <span class="Statement">=</span> <span class="Identifier">hanoiGraph</span>[s]},
   <span class="Identifier">GraphPlot3D</span>[g,
    Method <span class="Statement">-&gt;</span> <span class="String">&quot;SpringElectricalEmbedding&quot;</span>,
    VertexRenderingFunction <span class="Statement">-&gt;</span> <span class="Identifier">toStyle3D</span>[g], options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
    PlotStyle <span class="Statement">-&gt;</span> {<span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>]<span class="Comment">(*,Opacity[.5]*)</span>}]];

{vv, vp} <span class="Statement">=</span> {{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Type">2</span>, <span class="Type">0</span>, <span class="Type">0</span>}};
<span class="Identifier">Animate</span>[
 <span class="Identifier">hanoiGraph3D</span>[<span class="Identifier">state</span>[{}, {}, {}, <span class="Identifier">Range</span>[<span class="Type">4</span>]],
  Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>,
  ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv], Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
  ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">RotationTransform</span>[<span class="String">\[Theta]</span>, vv][vp], (vp <span class="Statement">=</span> <span class="Statement">#1</span>) <span class="Statement">&amp;</span>]],
 {<span class="String">\[Theta]</span>, <span class="Type">2</span> <span class="Identifier">Pi</span>, <span class="Type">0</span>}, SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]
</pre>
                    </li>
                </ol>
            </li>
        </ol>

        <p>
        Although the 3-stick Hanoi graphs merely resemble Sierpinski graphs, it would be folly to ignore that resemblance given the thread of recursion that runs through both. We can create Sierpinski graphs easily, by once again reusing our polygon-in-polygon approach and this time replacing the <span style="font-family: monospace">Polygon[{p1, p2, p3}]</span> expression with <span style="font-family: monospace">{p1 <-> p2, p2 <-> p3, p3 <-> p1}</span>:
        </p>

        <ol class="flipbook static" name="hanoi 4">
            <li>
            <img src="img/siergraph5.png" width="600" height="507" />
            </li>
            <li>
            <img src="img/siergraph14.png" width="600" height="522" />
            </li>
            <li>
            <img src="img/siergraph6.png" width="600" height="540" />
            </li>
            <li>
            <img src="img/siergraph16.png" width="639" height="540" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graph</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
     <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];
</pre>
            </li>
            <li name="?">
<pre style="font-size: 13px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Comment">(*Orderless attribute not necessary here. but it causes the particular permutation</span>
<span class="Comment"> of the edge list that results in the particular layout*)</span>

<span class="Comment">(*triple-click on </span><span class="String">&quot;DynamicSetting&quot;</span><span class="Comment"> below, Right-click -&gt; Evaluate in Place*)</span>
<span class="Identifier">DynamicSetting</span>[<span class="Identifier">SetterBar</span>[<span class="Type">1</span>, {SetAttributes, ClearAttributes}]][UndirectedEdge, <span class="Identifier">Orderless</span>];
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graph</span>[<span class="Statement">#</span>, VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">05</span>, GraphLayout <span class="Statement">-&gt;</span> <span class="String">&quot;SpringEmbedding&quot;</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
    <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
     <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

g <span class="Statement">=</span> <span class="Identifier">draw</span>[<span class="Type">5</span>]
<span class="Identifier">GraphPlot3D</span>[g, VertexRenderingFunction <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
   PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Hue</span>[<span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span><span class="Comment">(*,1/2*)</span>],
   Method <span class="Statement">-&gt;</span> <span class="String">&quot;SpringEmbedding&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]
</pre>
</li>
        </ol>

        <p>
        There's the Sierpinski triangle I know and love; the graph of. You might think it doesn't look good. But you don't realize it's a Sierpinski triangle <i>wearing a cape made of Sierpinski triangles</i>. Not only does it not not look good, it looks completely badass. Because we're using the coordinates of the points as vertices, we can straightforwardly recover the regular Sierpinski layout:
        </p>

        <ol class="flipbook static" name="sierpinski graph 1">
            <li>
            <img src="img/siergraph9.png" width="608" height="534" />
            </li>
            <li>
            <img src="img/siergraph10.png" width="600" height="522" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];
</pre>
            </li>
        </ol>
    <br />

        <p>
        The point of spending 1 or 2 LOC's worth of developer time to convert our geometric Sierpinski triangle into a graph is so that we can ask questions about the graph. Like for example, what are its Hamiltonicness and Eulerity quotients? What is the average degree of the graph, in Celsius? In Kelvin? Frankly most of these questions are boring, and I don't really know anything about graphs. But here is a picture of the line graphs of the first few Sierpinski iterations:
        </p>

        <ol class="flipbook static" name="sierpinski graph 2">
            <li>
            <img src="img/siergraph11.png" width="608" height="536" />
            </li>
            <li>
            <img src="img/siergraph12.gif" width="360" height="314" />
            </li>
            <li>
            <img src="img/siergraph13.gif" width="360" height="314" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];

g <span class="Statement">=</span> <span class="Identifier">draw</span>[<span class="Type">2</span>];
<span class="Identifier">LineGraph</span>[g]

cycle <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{FindHamiltonianCycle, FindEulerianCycle}][g][[<span class="Type">1</span>]];

<span class="Identifier">Animate</span>[
 <span class="Identifier">HighlightGraph</span>[g, <span class="Identifier">Graph</span>[<span class="Identifier">cycle</span>[[<span class="Type">1</span> ;; n]]],
  EdgeShapeFunction <span class="Statement">-&gt;</span> (<span class="Identifier">Line</span>[<span class="Statement">#1</span>] <span class="Statement">&amp;</span>),
  VertexShapeFunction <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
  GraphHighlightStyle <span class="Statement">-&gt;</span> <span class="String">&quot;DehighlightHide&quot;</span>],
 {n, <span class="Type">1</span>, <span class="Identifier">Length</span>[cycle], <span class="Type">1</span>}, AnimationRate <span class="Statement">-&gt;</span> <span class="Type">1</span>]
</pre>
            </li>
            <li name="?">
            <pre style="font-size: 12px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">sierpinskiGraph</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graph</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
     <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
    <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

dg <span class="Statement">=</span> <span class="Identifier">Mean</span>[<span class="Identifier">VertexDegree</span>[<span class="Identifier">sierpinskiGraph</span>[<span class="Type">8</span>]]];

<span class="Comment">(*if live in us, above comes out in farenheit, so have to convert*)</span>
us <span class="Statement">=</span> <span class="Identifier">Graphics</span>[<span class="Identifier">CountryData</span>[<span class="String">&quot;UnitedStates&quot;</span>, <span class="String">&quot;Polygon&quot;</span>], ImageSize <span class="Statement">-&gt;</span> <span class="Type">8000</span>];
<span class="Identifier">If</span>[<span class="Identifier">Rasterize</span>[us] <span class="Statement">===</span> <span class="Identifier">Rasterize</span>[<span class="Identifier">Show</span>[us, <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Point</span>[<span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">FindGeoLocation</span>[]]}]]],
 <span class="Identifier">WolframAlpha</span>[<span class="Identifier">ToString</span>[dg, InputForm] <span class="Statement">&lt;&gt;</span> <span class="String">&quot; degrees f in celcius&quot;</span>, {{<span class="String">&quot;Result&quot;</span>, <span class="Type">1</span>}, <span class="String">&quot;NumberData&quot;</span>}],
 dg]
</pre>
            </li>
        </ol>

        <p>
        Also the <span class="flipbookLink" name="sierpinski graph 2" index="2">minimal zig zag</span> of the triangle, notable because it looks like a bunch of resistors (no doubt the inspiration for <a href="http://www.math.uconn.edu/~teplyaev/research/randomSG.pdf">certain papers</a>). And its <span class="flipbookLink" name="sierpinski graph 2" index="3">minimal criss cross</span>. I don't really see anything though. Do you see anything? I don't see anything. These graphs just vertices and edges to me.
        </p>

        <p>
        They do raise a question though. What game (or what anything) does the Sierpinski graph represent? I wasn't able to produce the Sierpinski triangle from any variation of the Hanoi game beyond the first couple of trivial iterations. In any case, through the extensive research I've done here I've found that layered graph layouts are pretty:
        </p>

        <ol class="flipbook static" name="layered graphs">
            <li>
            <img src="img/sierhanoilayered1.png" width="460" height="658" />
            </li>
            <li>
            <img src="img/sierhanoilayered2.png" width="460" height="574" />
            </li>
            <li>
            <img src="img/sierhanoilayered4.png" width="260" height="390" />
            </li>
            <li>
            <img src="img/siergraphlayered1.png" width="286" height="658" />
            </li>
            <li>
            <img src="img/siergraphlayered2.png" width="275" height="656" />
            </li>
            <li name="source">
                <pre style="font-size: 12px">
<span class="Identifier">validQ</span>[<span class="Type">s_state</span>] <span class="Statement">:=</span> <span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">Less </span><span class="Statement">@@@</span> s;
<span class="Identifier">neighbors</span>[<span class="Type">states </span><span class="Statement">:</span> {<span class="Type">__state</span>}] <span class="Statement">:=</span> <span class="Identifier">Select</span>[<span class="Statement">#</span>, validQ] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">DeleteDuplicates</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
     <span class="Identifier">Table</span>[<span class="Identifier">Module</span>[{st2 <span class="Statement">=</span> st},
       <span class="Identifier">If</span>[<span class="Identifier">Length</span>[<span class="Identifier">st2</span>[[from]]] <span class="Statement">&gt;</span> <span class="Type">0</span>,
        <span class="Identifier">PrependTo</span>[<span class="Identifier">st2</span>[[to]], <span class="Identifier">st2</span>[[from, <span class="Type">1</span>]]];
        <span class="Identifier">st2</span>[[from]] <span class="Statement">=</span> <span class="Identifier">Rest</span>[<span class="Identifier">st2</span>[[from]]]];
       <span class="Identifier">If</span>[st2 <span class="Statement">=!=</span> st <span class="Statement">&amp;&amp;</span> <span class="Identifier">validQ</span>[st2],
        <span class="Identifier">Sow</span><span class="Statement">@</span><span class="Identifier">UndirectedEdge</span>[st, st2]];
       st2], {st, states}, {to, <span class="Identifier">Length</span>[st]}, {from, <span class="Identifier">Length</span>[st]}];

<span class="Identifier">hanoiGraph</span>[<span class="Type">s_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices, edges, n},
   n <span class="Statement">=</span> <span class="Identifier">Count</span>[s, <span class="Type">_Integer</span>, <span class="Identifier">Infinity</span>];
   {vertices, {edges}} <span class="Statement">=</span> <span class="Identifier">Reap</span>[<span class="Identifier">Nest</span>[neighbors, {s}, <span class="Type">2</span><span class="Statement">^</span>n]];
   <span class="Identifier">SetAttributes</span>[UndirectedEdge, <span class="Identifier">Orderless</span>];
   <span class="Identifier">Graph</span>[<span class="Identifier">DeleteDuplicates</span>[edges]]];

axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];
<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Comment">(*certain layout depends on this ordering*)</span>
<span class="Comment">(*next[prev_]:=prev/.Polygon[pts_]:&gt;(</span>
<span class="Comment">Polygon[ScalingTransform[1/2{1,1},#][pts]]&amp;/@pts);*)</span>

<span class="Identifier">sierpinskiGraph</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graph</span><span class="Statement">@</span><span class="Identifier">Flatten</span><span class="Statement">@</span>
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
     <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

<span class="Identifier">draw</span>[<span class="Type">g_</span>] <span class="Statement">:=</span> <span class="Identifier">LayeredGraphPlot</span>[g,
   EdgeRenderingFunction <span class="Statement">-&gt;</span> ({<span class="Identifier">CapForm</span>[<span class="String">&quot;Round&quot;</span>], <span class="Identifier">Line</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span>),
   VertexRenderingFunction <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
   PlotStyle <span class="Statement">-&gt;</span> {<span class="Identifier">Thickness</span>[<span class="Statement">.</span><span class="Type">01</span>], <span class="Identifier">Black</span>}];

<span class="Identifier">draw </span><span class="Statement">/@</span> {<span class="Identifier">hanoiGraph</span>[<span class="Identifier">state</span>[{}, {}, <span class="Identifier">Range</span>[<span class="Type">3</span>]]], <span class="Identifier">sierpinskiGraph</span>[<span class="Type">3</span>]}
</pre>
            </li>
        </ol>

        <br/>

    </div>

    <div class="section">
        <div class="header"> <h2> Chaos </h2> </div>

        <p>
        One of the nice things about the chaos game algorithm is that we can easily generalize it to more than three points. To begin with, we can place equiangular points on a circle using $\cos$ and $\sin$ (see also my <a href="page2.htm#hexagon">screwing around with polygons</a>). 
        </p>

        <ol class="flipbook static" name="chaos gen 1" default="2">
            <li name="4">
            <img src="img/sierderb4.png" width="600" height="599" />
            </li>
            <li name="5">
            <img src="img/sierderb5.png" width="600" height="628" />
            </li>
            <li name="6">
            <img src="img/sierderb6.png" width="600" height="523" />
            </li>
            <li name="7">
            <img src="img/sierderb7.png" width="600" height="613" />
            </li>
            <li name="5">
            <img src="img/sierderb52.png" width="600" height="629" />
            </li>
            <li name="7">
            <img src="img/sierderb73.png" width="600" height="613" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices},
  vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

  <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]}]];
</pre>
            </li>
        </ol>

        <p>
        These are drawn with 10 million points. The last two are drawn with 50 million points. The key to the quality here is giving the points transparency so that varying degrees of overlap/nearness form different shades. <span class="flipbookLink" name="chaos gen 1" index="4">Higher vertex counts</span> clearly have some structure, but it becomes blurry for one reason or another. You might be able to pull out the structure better with a more methodical approach and some <span class="flipbookLink" name="chaos gen 1" index="5">image </span><span class="flipbookLink" name="chaos gen 1" index="6">trickery</span>.
        </p>

        <p>
        If you play around with pentagons in a vector editor (Mathematica itself has basic vector editing capabilities), you will find this figure:
        </p>

        <p>
        <center><img src="img/sierderb51.png" width="360" height="374" /></center>
        </p>

        <p>
        I've highlighted one of the inner pentagons. You can see that this figure reproduces the faded stellation pattern in the center of the chaos game rendition. So the chaos game algorithm remains consistent in this geometric fashion: At each vertex of the figure, attach a copy of the larger figure, but with sidelength one-half of the original (note the red edge in the above image).
        </p>

        <p>
        This also explains why the 4-vertex rendering is a block. And since we now have the geometric rule, we can turn to an explicit geometric construction to see if we can make the structure of these chaos games clearer. After <span class="flipbookLink" name="chaos gen 2" index="1">some hiccups</span>, I was able to get something working:
        </p>

        <ol class="flipbook static" name="chaos gen 2" default="2">
            <li name="3?">
            <ol class="flipbook static" name="chaos gen 404">
                <li name="image">
                <img src="img/sierring0stepawesome.png" width="600" height="555" />
                </li>
                <li name="source">
<pre>
<span class="Identifier">SetAttributes</span>[toXY, <span class="Identifier">Listable</span>];
<span class="Identifier">toXY</span>[<span class="Type">z_</span>] <span class="Statement">:=</span> {<span class="Identifier">Re</span>[z], <span class="Identifier">Im</span>[z]};

<span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">0</span>] <span class="Statement">:=</span> c;
<span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{zs},
   zs <span class="Statement">=</span> c <span class="Statement">+</span> r <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>);
   <span class="Identifier">ring</span>[c <span class="Statement">+</span> <span class="Statement">#</span> <span class="Identifier">Normalize</span>[<span class="Statement">#</span> <span class="Statement">-</span> c], r<span class="Statement">/</span><span class="Type">2</span><span class="Statement">.</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs];

<span class="Identifier">Graphics</span>[<span class="Identifier">Rotate</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">95</span>], LightGray, <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
   <span class="Identifier">Polygon </span><span class="Statement">/@</span> <span class="Identifier">toXY </span><span class="Statement">/@</span> <span class="Identifier">Level</span>[<span class="Identifier">ring</span>[<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">5</span>], {<span class="Statement">-</span><span class="Type">2</span>}]}, <span class="Identifier">Pi</span>]]
</pre>
                </li>
            </ol>
            </li>
            <li name="table">
            <img src="img/sierring345672.png" width="551" height="615" />
            </li>
            <li name="5">
            <img src="img/sierring5step8.png" width="600" height="600" />
            </li>
            <li name="6">
            <img src="img/sierring6step7.png" width="600" height="522" />
            </li>
            <li name="16">
            <img src="img/sierring16step4.png" width="600" height="600" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{Transparent,
     <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">28</span>], <span class="Identifier">Black</span>}],
     <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];
</pre>
            </li>
        </ol>

        <p>
        The <span class="flipbookLink" name="chaos gen 2" index="4">snowflake</span> has all sorts of symmetries, probably because $6=2 \times 3$. It even has 3D grids and cubes. It's an infinite cubic matryoshka snowflake. And there is a lot of <span class="flipbookLink" name="chaos gen 2" index="5">amazing detail</span> in these drawings.
        </p>

        <p>
        At this point I should mention that all of the code snippets on this page are self-contained.  If you have Mathematica you can copy-paste <span class="flipbookLink" name="chaos gen 2" index="6">this</span> and start producing these figures.
        </p>

        <p>
        The chaos game has another generalization. Instead of moving halfway between the active point and the randomly-chosen vertex, we can move 1/3rd of the way, or 3/2 of the way, etc:
        </p>

        <ol class="flipbook static" name="chaos distance gen 1">
            <li name="table">
            <img src="img/siermodratio1.png" width="604" height="510" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">numPoints_</span><span class="Statement">:</span> <span class="Type">10000</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices},
   vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
     <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[df, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
       <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]}]];

functions <span class="Statement">=</span> <span class="Identifier">Function</span>[r, (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) r <span class="Statement">&amp;</span>] <span class="Statement">/@</span> {<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">96</span>, <span class="Statement">.</span><span class="Type">7</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">2</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
  {<span class="Identifier">TraditionalForm</span>[<span class="Statement">#</span>[a, b]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
  <span class="Identifier">Table</span>[<span class="Identifier">draw</span>[v, df], {v, <span class="Type">3</span>, <span class="Type">6</span>}, {df, functions}]]]
</pre>
            </li>
        </ol>

        <p>
        In the case where we're just adding the numbers, we get a normal n-directional random walk. Of course, the geometric approach has its own similar generalization:
        </p>

        <ol class="flipbook static" name="geom distance gen 1">
            <li name="table">
            <!--img src="img/siergeommodratio1.png" width="604" height="414" /-->
            <img src="img/siergeommodratio3.png" width="634" height="444" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, <span class="Identifier">df</span>[<span class="Type">0</span>, r], depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{Transparent,
     <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">26</span>], <span class="Identifier">Black</span>}],
     <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];

functions <span class="Statement">=</span> <span class="Identifier">Function</span>[r, (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) r <span class="Statement">&amp;</span>] <span class="Statement">/@</span> {<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">7</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">35</span>, <span class="Statement">.</span><span class="Type">2</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
  {<span class="Identifier">TraditionalForm</span>[<span class="Statement">#</span>[a, b]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
  <span class="Identifier">Table</span>[<span class="Identifier">draw</span>[v, df, <span class="Type">4</span>], {v, <span class="Type">3</span>, <span class="Type">6</span>}, {df, functions}]]]
</pre>
            </li>
        </ol>

        <p>
        One of the things you might try to do, if you're me, is adjust the ratio until the corners match up:
        </p>


        <ol class="flipbook static" name="connecting pentagons">
            <li name="image">
            <img src="img/siergeommodratio2.png" width="496" height="507" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
<span class="Identifier">drawGeom</span>[<span class="Type">v_</span>, <span class="Type">ratio_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r ratio, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{Transparent,
     <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">28</span>], <span class="Identifier">Black</span>}],
     <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];

<span class="Identifier">drawChaos</span>[<span class="Type">v_</span>, <span class="Type">ratio_</span>, <span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices},
   vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
     <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) ratio <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
       <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]}]];

<span class="Identifier">With</span>[{
  verticesC <span class="Statement">=</span> <span class="Identifier">Control</span>[{vertices, <span class="Type">3</span>, <span class="Type">8</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}],
  iterationsC <span class="Statement">=</span> <span class="Identifier">Control</span>[{iterations, <span class="Type">0</span>, <span class="Type">8</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}],
  numPointsC <span class="Statement">=</span> <span class="Identifier">Control</span>[{numpoints, <span class="Type">0</span>, <span class="Type">100000</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}]},

 <span class="Identifier">Manipulate</span>[<span class="Identifier">Overlay</span>[{
    <span class="Identifier">drawGeom</span>[vertices, ratio, iterations],
    <span class="Identifier">drawChaos</span>[vertices, ratio, numpoints]}],
  <span class="Identifier">Row</span>[{verticesC, iterationsC, numPointsC}, <span class="String">&quot; &quot;</span>],
  {{ratio, <span class="Statement">.</span><span class="Type">5</span>}, <span class="Type">0</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>},
  Alignment <span class="Statement">-&gt;</span> Center]]
</pre>
            </li>
        </ol>

        <p>
        Look! There are Koch snowflake figures that form in the negative space. The boundary becomes snowflaked. A Koch snowflake can easily be made with an L-system construction:
        </p>

        <ol class="flipbook static" name="koch main">
            <li name="hexagonal">
                <ol class="flipbook static" name="koch snowflake">
                    <li name="image">
                    <img src="img/sierkoch1.png" width="550" height="415" />
                    </li>
                    <li name="source">
<pre>
axiom <span class="Statement">=</span> {F, <span class="Identifier">right</span>[<span class="Type">2</span>], F, <span class="Identifier">right</span>[<span class="Type">2</span>], F};
rules <span class="Statement">=</span> F <span class="Statement">-&gt;</span> {F, <span class="Identifier">left</span>[<span class="Type">1</span>], F, <span class="Identifier">right</span>[<span class="Type">2</span>], F, <span class="Identifier">left</span>[<span class="Type">1</span>], F};
conversions <span class="Statement">=</span> {F <span class="Statement">-&gt;</span> forward, <span class="Type">dir_</span>[<span class="Type">n_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">ConstantArray</span>[dir, n]};

<span class="Comment">(*state transformations*)</span>
<span class="Identifier">forward</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z <span class="Statement">+</span> <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> theta), theta};
<span class="Identifier">left</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z, theta <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};
<span class="Identifier">right</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z, theta <span class="Statement">-</span> <span class="Type">2</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{program, zs},
   program <span class="Statement">=</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Nest</span>[<span class="Statement">#</span> <span class="Statement">/.</span> rules <span class="Statement">&amp;</span>, axiom, n] <span class="Statement">/.</span> conversions];
   zs <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">ComposeList</span>[program, {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}];
   <span class="Identifier">Graphics</span>[{Thin, <span class="Identifier">Line</span>[{<span class="Identifier">Re</span>[<span class="Statement">#</span>], <span class="Identifier">Im</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs]}]];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">3</span>]] <span class="Statement">&amp;</span>[<span class="Identifier">draw </span><span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">5</span>]]
</pre>
                    </li>
                </ol>
                </li>
            </li>
            <li name="pentagonal">
                <ol class="flipbook static" name="koch pentagon">
                    <li name="image">
                    <img src="img/sierkoch2.png" width="601" height="415" />
                    </li>
                    <li name="source">
                    <pre>
<span class="DiffChange">axiom </span><span class="Statement DiffChange">=</span><span class="DiffChange"> {F, </span><span class="Identifier DiffChange">right</span><span class="DiffChange">[</span><span class="Type DiffText">1</span><span class="DiffText">], F, </span><span class="Identifier DiffText">right</span><span class="DiffText">[</span><span class="Type DiffText">1</span><span class="DiffText">], F, </span><span class="Identifier DiffText">right</span><span class="DiffText">[</span><span class="Type DiffText">1</span><span class="DiffText">], F, </span><span class="Identifier DiffText">right</span><span class="DiffText">[</span><span class="Type DiffText">1</span><span class="DiffChange">], F};</span>
rules <span class="Statement">=</span> F <span class="Statement">-&gt;</span> {F, <span class="Identifier">left</span>[<span class="Type">1</span>], F, <span class="Identifier">right</span>[<span class="Type">2</span>], F, <span class="Identifier">left</span>[<span class="Type">1</span>], F};
conversions <span class="Statement">=</span> {F <span class="Statement">-&gt;</span> forward, <span class="Type">dir_</span>[<span class="Type">n_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">ConstantArray</span>[dir, n]};

<span class="Comment">(*state transformations*)</span>
<span class="Identifier">forward</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z <span class="Statement">+</span> <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> theta), theta};
<span class="Identifier DiffChange">left</span><span class="DiffChange">[{</span><span class="Type DiffChange">z_</span><span class="DiffChange">, </span><span class="Type DiffChange">theta_</span><span class="DiffChange">}] </span><span class="Statement DiffChange">:=</span><span class="DiffChange"> {z, theta </span><span class="Statement DiffChange">+</span><span class="DiffChange"> </span><span class="Type DiffChange">2</span><span class="DiffChange"> </span><span class="Identifier DiffChange">Pi</span><span class="Statement DiffChange">/</span><span class="Type DiffText">5</span><span class="DiffChange">};</span>
<span class="Identifier DiffChange">right</span><span class="DiffChange">[{</span><span class="Type DiffChange">z_</span><span class="DiffChange">, </span><span class="Type DiffChange">theta_</span><span class="DiffChange">}] </span><span class="Statement DiffChange">:=</span><span class="DiffChange"> {z, theta </span><span class="Statement DiffChange">-</span><span class="DiffChange"> </span><span class="Type DiffChange">2</span><span class="DiffChange"> </span><span class="Identifier DiffChange">Pi</span><span class="Statement DiffChange">/</span><span class="Type DiffText">5</span><span class="DiffChange">};</span>

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{program, zs},
   program <span class="Statement">=</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Nest</span>[<span class="Statement">#</span> <span class="Statement">/.</span> rules <span class="Statement">&amp;</span>, axiom, n] <span class="Statement">/.</span> conversions];
<span class="DiffChange">   zs </span><span class="Statement DiffChange">=</span><span class="DiffChange"> </span><span class="Identifier DiffChange">First </span><span class="Statement DiffChange">/@</span><span class="DiffChange"> </span><span class="Identifier DiffChange">ComposeList</span><span class="DiffChange">[program, {</span><span class="Type DiffChange">0</span><span class="Statement DiffChange">.</span><span class="DiffChange">, </span><span class="Statement DiffText">-</span><span class="Identifier DiffText">Pi</span><span class="Statement DiffText">/</span><span class="Type DiffText">1</span><span class="Type DiffChange">0</span><span class="Statement DiffChange">.</span><span class="DiffChange">}];</span>
   <span class="Identifier">Graphics</span>[{Thin, <span class="Identifier">Line</span>[{<span class="Identifier">Re</span>[<span class="Statement">#</span>], <span class="Identifier">Im</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs]}]];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">3</span>]] <span class="Statement">&amp;</span>[<span class="Identifier">draw </span><span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">5</span>]]
</pre>
                    </li>
                </ol>
            </li>
        </ol>

        <p>
        With some <span class="flipbookLink" name="koch snowflake" index="2">minor</span><span class="flipbookLink" name="koch pentagon" index="2">adjustments</span> we get our <span class="flipbookLink" name="koch pentagon" index="1">pentagonal snowflake</span>. If we do the same procedure for the hexagonal chaos game we get the familiar triangular snowflake. All of the geometries seem to create Koch snowflakes, which makes sense given that indentations are triangles.
        </p>

        <p>
        Of course, there are much more interesting generalizations we can come up with than simple ratios:
        </p>


        <ol class="flipbook static" name="bizarroplot101">
            <li>
            <img src="img/sierbizarroplot1.png" width="600" height="460" />
            </li>
            <li>
            <img src="img/sierpinskibubbles1.png" width="600" height="522" />
            </li>
            <li>
            <img src="img/siriousbisness101.png" width="600" height="507" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">numPoints_</span><span class="Statement">:</span> <span class="Type">1000</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices},
   vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">15</span>],
     <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[df, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
       <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]}]];

rotate <span class="Statement">=</span> RotationTransform;
functions <span class="Statement">=</span> {
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]<span class="Statement">!</span>] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">10</span>]]] <span class="Statement">&amp;</span>,
   <span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">5</span> <span class="Identifier">rotate</span>[<span class="Type">10</span><span class="Statement">.</span> <span class="Identifier">Degree</span>, <span class="Statement">#1</span>][<span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>] <span class="Statement">&amp;</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
  {<span class="Identifier">TraditionalForm</span>[<span class="Identifier">Trace</span>[<span class="Statement">#</span>[a, b]][[<span class="Type">2</span>]]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
  <span class="Identifier">ParallelTable</span>[<span class="Identifier">draw</span>[v, df], {v, <span class="Type">3</span>, <span class="Type">5</span>}, {df, functions}]]]
</pre>
            </li>
        </ol>

        <p>
        Some of these drawings remind me of the kind of fractal scattering found in the more <span class="flipbookLink" name="bizarroplot101" index="3">deterministic algorithms</span>. I wonder what kind of relation there is. The best distance function I found was logarithm-based:
        </p>

        <ol class="flipbook static" name="fadeleaf" default="2">
            <li>
            <img src="img/sierrander3.png" width="600" height="624" />
            </li>
            <li>
            <img src="img/sierrander1x.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/rander3.png" width="600" height="600" />
            </li>
            <li>
            <img src="img/sierrander2x.png" width="640" height="636" />
            </li>
            <li>
            <img src="img/sierrander4x.png" width="640" height="640" />
            </li>
            <!--li>
            <img src="img/randerflower.png" width="600" height="600" />
            </li>
            <li>
            <img src="img/rander6.png" width="600" height="600" />
            </li-->
            <li name="source">
<pre>
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{v, <span class="Type">_Integer</span>}, {wowzerz, <span class="Type">_Real</span>}, {numPoints, <span class="Type">_Integer</span>}},
   <span class="Identifier">Module</span>[{diff, vertices},
    vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

    <span class="Comment">(*distance function is Clip[(a+b)Log[EuclideanDistance[a,b]+wowzerz]*)</span>
    <span class="Identifier">FoldList</span>[(
       diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;<span class="Comment">(*note each of these is an x-y pair*)</span>
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> wowzerz], <span class="Type">1.1</span> {<span class="Statement">-</span><span class="Type">2</span>, <span class="Type">2</span>}]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numPoints]]]];

<span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">08</span>],
  <span class="Identifier">Point</span>[<span class="Identifier">game</span>[<span class="Type">5</span>, <span class="Statement">.</span><span class="Type">8</span>, <span class="Type">300000</span>]]}<span class="Comment">(*,PlotRange-&gt;1.15*)</span>]
</pre>
            </li>
        </ol>

        <p>
        All of these images are from the same distance function. The 'holes' on the inward-folded leaves of <span class="flipbookLink" name="fadeleaf" index="2">this one</span> are interesting. It's like a fractal Klein bottle thing goin on there. If my computer was worth more than my car, as it some day will be, I would burn a lot of lightning-sequestered power in my mad scientist laboratory in the process of rendering different distance functions. There's a lot of pretty pictures in these simple chaos games. As it stands all this lightning is going to waste.
        </p>

        <p>
        The geometric approach, not one to have been served, decides to go Tron:
        </p>

        <ol class="flipbook static" name="geometric tron" default="2">
            <li name="table">
                <ol class="flipbook static" name="tron table">
                    <li>
                    <img src="img/siertron1.png" width="602" height="553" />
                    </li>
                    <li name="source">
<pre>


<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{zs},
     zs <span class="Statement">=</span> c <span class="Statement">+</span> r <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[{<span class="Identifier">Re</span>[<span class="Statement">#</span>], <span class="Identifier">Im</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, <span class="Identifier">df</span>[<span class="Type">0</span>, r], depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs]];

   <span class="Identifier">Framed</span>[<span class="Identifier">Graphics</span>[{Transparent,
      <span class="Identifier">EdgeForm</span>[{Thick, LightBlue}],
      <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}], FrameStyle <span class="Statement">-&gt;</span> LightBlue]];

functions <span class="Statement">=</span> {
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]<span class="Statement">!</span>] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">10</span>]]] <span class="Statement">&amp;</span>,
   <span class="Statement">#1</span> <span class="Statement">+</span> (<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>) (<span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>) <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> <span class="Type">10</span><span class="Statement">.</span> <span class="Identifier">Degree</span>) <span class="Statement">&amp;</span>};

<span class="Identifier">Framed</span>[<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
   {<span class="Identifier">TraditionalForm</span>[<span class="Identifier">Trace</span>[<span class="Statement">#</span>[a, b]][[<span class="Type">2</span>]]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
   <span class="Identifier">Table</span>[<span class="Identifier">draw</span>[v, df, <span class="Type">3</span>], {v, <span class="Type">3</span>, <span class="Type">5</span>}, {df, functions}]]],
 Background <span class="Statement">-&gt;</span> <span class="Identifier">Black</span>, BaseStyle <span class="Statement">-&gt;</span> LightBlue]


</pre>
                    </li>
                </ol>
            </li>
            <li name="images">
                <ol class="flipbook static" name="tron images">
                    <li>
                    <img src="img/siertron12.png" width="600" height="626" />
                    </li>
                    <li>
                    <img src="img/siertron4.png" width="600" height="660" />
                    </li>
                    <li>
                    <img src="img/siertron5.png" width="600" height="588" />
                    </li>
                    <li>
                    <img title="Tron noir. best idea ever?" src="img/siertron8.png" width="600" height="572" />
                    </li>
                    <li name="source">
<pre>





<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, <span class="Identifier">df</span>[<span class="Type">0</span>, r], depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">White</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">4</span>],
     <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">4</span>, <span class="Type">1</span>, <span class="Type">1</span>], <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];

<span class="Identifier">Show</span>[<span class="Comment">(*repeatedly draw to cover more possibilities*)</span>
 <span class="Identifier">draw</span>[<span class="Type">4</span>, (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">4</span>]]] <span class="Statement">&amp;</span>,
    <span class="Identifier">RandomChoice</span>[{<span class="Statement">.</span><span class="Type">1</span>, <span class="Type">1.5</span>} <span class="Statement">-&gt;</span> {<span class="Type">2</span>, <span class="Type">3</span>}]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">20</span>],
 Background <span class="Statement">-&gt;</span> <span class="Identifier">Black</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">600</span>]






</pre>
                    </li>
                </ol>
            </li>
        </ol>

        <p>
        Or <span class="flipbookLink" name="geometric tron" index="1">Asteroids</span>. Same thing.
        </p>

        <p>
        The most interesting place I've seen the chaos game is in genetics. The idea is that instead of randomly picking the vertex at each step, you let the letters of the genetic code pick for you. There are 4 letters in DNA: A, T, G, C. So you run a chaos game with 4 vertices. If some sequence of DNA is AAAATC, your active point will approach the point labeled A 4 times, then it will approach the T point, then the C point.
        </p>

        <p>
        If the DNA sequence is completely random, you will just recreate our beautiful block, which I have named the Charcoal Diamond:
        </p>

        <center>
            <img src="img/sierderb4.png" width="600" height="599" />
        </center>

        <p>
        But what you get is not random, as this chaos plot shows:
        </p>

        <ol class="flipbook static" name="chromosome X">
            <li name="image">
            <img src="img/siergenetics7.png" width="600" height="599" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}};
dat <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]] <span class="Statement">/.</span> coords;

<span class="Identifier">draw</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]},
   Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Text </span><span class="Statement">@@@</span> coords, <span class="Identifier">Red</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]];

<span class="Identifier">draw</span>[dat]
</pre>
            </li>
        </ol>

        <p>
        This is a chaos game plot of an arbitrarily-chosen 8 million basepair sequence from our chromosome X (for scale, a typical protein is encoded in only a few hundred basepairs). You might insensibly think this happens because the letters occur with different frequencies, but that's not the case. The following is a chaos game plot of a sequence that was randomly generated over the same statistical frequencies as the above sequence:
        </p>

        <ol class="flipbook static" name="schmomosome x">
            <li>
            <img src="img/siergenetics8.png" width="600" height="599" />
            </li>
            <li>
            <img src="img/siergenhisto3.png" width="360" height="213" />
            <br />
            <br />
            <br />
<pre style="font-size: 14px">
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
tallies <span class="Statement">=</span> <span class="Identifier">Tally</span>[chars];
<span class="Identifier">BarChart</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies, ChartLabels <span class="Statement">-&gt;</span> <span class="Identifier">First </span><span class="Statement">/@</span> tallies]
</pre>
            </li>
            <li>
            <img src="img/siergenetics9.png" width="600" height="599" />
            </li>
            <li>
            <ol class="flipbook static" name="genetics chess">
                <li name="image">
                <img src="img/siergeneticsboard1.png" width="600" height="600" />
                </li>
                <li name="source">
<pre style="font-size: 14px">
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
dat <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]] <span class="Statement">/.</span> coords;

scale <span class="Statement">=</span> <span class="Type">2</span>;
grid <span class="Statement">=</span> <span class="Identifier">Tuples</span>[<span class="Identifier">Range</span>[{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, {<span class="Type">1</span>, <span class="Type">1</span>} <span class="Statement">-</span> <span class="Type">2</span><span class="Statement">^-</span>scale, <span class="Type">2</span><span class="Statement">^-</span>scale]];
color <span class="Statement">=</span> <span class="Identifier">If</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Plus </span><span class="Statement">@@</span> <span class="Statement">#</span><span class="Statement">*</span><span class="Type">2</span><span class="Statement">^</span>scale, <span class="Type">2</span>] <span class="Statement">==</span> <span class="Type">1</span>,
    <span class="Identifier">Blend</span>[{<span class="Identifier">Lighter</span><span class="Statement">@</span><span class="Identifier">Purple</span>, <span class="Identifier">Yellow</span>}],
    <span class="Identifier">Blend</span>[{<span class="Identifier">Lighter</span><span class="Statement">@</span><span class="Identifier">Blue</span>, <span class="Identifier">Red</span>}]] <span class="Statement">&amp;</span>;

overunder <span class="Statement">=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">25</span>],
    {<span class="Identifier">color</span>[<span class="Statement">#</span>], <span class="Identifier">Rectangle</span>[<span class="Statement">#</span>, <span class="Statement">#</span> <span class="Statement">+</span> <span class="Type">2</span><span class="Statement">^-</span>scale]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> grid}];

<span class="Identifier">draw</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Show</span>[overunder,
   <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">06</span>],
     <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>},
       <span class="Identifier">RandomChoice</span>[data, <span class="Identifier">Length</span>[data]]]]}],
   overunder, PlotRange <span class="Statement">-&gt;</span> <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> {<span class="Type">600</span>, <span class="Type">600</span>}];

<span class="Identifier">draw</span>[dat] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>
</pre>
                </li>
            </ol>
            </li>
            <li name="source">
<pre style="font-size: 14px">
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}};
dat <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]] <span class="Statement">/.</span> coords;

<span class="Identifier">draw</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[data, <span class="Identifier">Length</span>[data]]]]},
   Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Text </span><span class="Statement">@@@</span> coords, <span class="Identifier">Red</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]];

<span class="Identifier">draw</span>[dat]
</pre>
            </li>
        </ol>

        <p>
        The letters do occur in <span class="flipbookLink" name="schmomosome x" index="2">different frequencies</span>, but that doesn't make any interesting patterns. If you <span class="flipbookLink" name="schmomosome x" index="3">move the letters around</span> you get a pattern related in this case to the fact that the frequencies are bilateral, but otherwise it's just a <span class="flipbookLink" name="schmomosome x" index="4">glorified chessboard</span>. And look what happens when we do the same vertex movearounding for our genetic code:
        </p>

        <ol class="flipbook static" name="vertex movearounding">
            <li name="image">
            <img src="img/siergenetics10.png" width="600" height="599" />
            </li>
            <li name="source">
<pre>
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
dat <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]] <span class="Statement">/.</span> coords;

<span class="Identifier">draw</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]},
   Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Text </span><span class="Statement">@@@</span> coords, <span class="Identifier">Red</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]];

<span class="Identifier">draw</span>[dat]
</pre>
            </li>
        </ol>


        <p>
        The <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC330698/pdf/nar00192-0217.pdf">original paper</a> does a good job explaining how the chaos plot is something of a "fractal subsequence histogram." Assume your active point is anywhere in the entire square, and the next move is toward the bottom-left corner. Because you move halfway toward that corner (instead of, say, only one third or one fifth of the way), you will <i>land inside that corner's quadrant</i> regardless of where your point was to begin with.
        </p>

        <p>
        Furthermore, you can apply this argument to subquadrants. It's easy to see this if you "work backwards." The formula for going from the current active point toward the next vertex is
        </p>

            $$p_{i+1}=\frac 1 2 (p_i + v)$$

        <p>
        By the DeLorean transform, we can go backwards like this:
        </p>

            $$p_{i-1}=2p_i-v$$

        <p>
        So, reversing all the points in a particular subquadrant:
        </p>

        <ol class="flipbook static" name="time travel">
            <li>
            <img src="img/sierfluxcapacitor1.png" width="415" height="461" />
            </li>
            <li>
            <img src="img/sierfluxcapacitor2.png" width="415" height="461" />
            </li>
            <li>
            <img src="img/sierfluxcapacitor3.png" width="415" height="461" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">Manipulate</span>[<span class="Identifier">Module</span>[{delorean, preimage, pt1, pt2},
  pt1 <span class="Statement">=</span> ptc <span class="Statement">-</span> width;
  pt2 <span class="Statement">=</span> ptc <span class="Statement">+</span> width;

  <span class="Identifier">delorean</span>[<span class="Type">x_</span>] <span class="Statement">:=</span> <span class="Type">2</span> x <span class="Statement">-</span> coord;
  preimage <span class="Statement">=</span> <span class="Identifier">delorean </span><span class="Statement">/@</span> <span class="Identifier">Tuples</span>[<span class="Identifier">Range</span>[pt1, pt2, <span class="Statement">.</span><span class="Type">025</span>]];

  <span class="Identifier">Graphics</span>[{
    <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Thickness</span>[<span class="Statement">.</span><span class="Type">01</span>], <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">4</span>]}],
    {Transparent, <span class="Identifier">Rectangle</span>[{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}]},
    {LightGray, <span class="Identifier">Rectangle</span>[pt1, pt2]},
    {<span class="Identifier">Gray</span>, <span class="Identifier">Point</span>[preimage]}},
   PlotRange <span class="Statement">-&gt;</span> <span class="Type">1.2</span>, GridLines <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
   GridLinesStyle <span class="Statement">-&gt;</span> <span class="Identifier">Lighter</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">8</span>]]],

 {{width, <span class="Statement">.</span><span class="Type">25</span>}, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Type">2</span><span class="Statement">.^-</span><span class="Type">3</span>},
 {{ptc, {<span class="Statement">-.</span><span class="Type">75</span>, <span class="Statement">-.</span><span class="Type">25</span>}}, Locator},
 {{coord, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}}, Locator,
  Appearance <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="String">&quot;\[FilledSquare]&quot;</span>, <span class="Identifier">Red</span>]}]
</pre>
            </li>
        </ol>


        <p>
        You can <span class="flipbookLink" name="time travel" index="1">see here</span> that for all the points which were just ordered to move toward the little red dot in the bottom-left corner, those that landed in the gray square had to have come from the top-left quadrant of the main square (the region with gray dots). So for the points in that gray region, we not only know that they were ordered to move toward the bottom-left vertex in the last step, but also that they were ordered to move toward the top-left vertex in the step before that.
        </p>

        <p>
        And so on. The points in <span class="flipbookLink" name="time travel" index="2">this little gray region</span> were ordered to move previously toward the bottom-left, and before that the top-left, and before that the <span class="flipbookLink" name="time travel" index="3">bottom-right.</span> All points in <span class="flipbookLink" name="time travel" index="2">that square</span> have that history. So going back to our genetic chaos plot:
        </p>

        <ol class="flipbook static" name="vertex movearounding part2">
            <li>
            <img src="img/siergenetics10.png" width="600" height="599" />
            </li>
            <li>
            <img src="img/sierfluxcapacitor3.png" width="415" height="461" />
            </li>
            <li>
            <img src="img/sierfluxcapacitor2.png" width="415" height="461" />
            </li>
            <li>
            <img src="img/siergenetics7.png" width="600" height="599" />
            </li>
        </ol>

        <p>
        What those big holes mean is that CG is a rare sequence. As we <span class="flipbookLink" name="vertex movearounding part2" index="2">just saw</span>, a point can only get to that big empty square by coming from the bottom-right quadrant and going toward the top-left vertex. And since that square is so empty, there are rarely any points that are available to go toward other subsquares, such as <span class="flipbookLink" name="vertex movearounding part2" index="3">this one</span>, and so on.
        </p>

        <p>
        This accounts for the texture of the <span class="flipbookLink" name="vertex movearounding part2" index="4">first chaos plot</span> as well. It just looks more wacked out because the CG vertices are adjacent, so the empty squares touch each other and create those staggered serrations. A simple histogram confirms our suspicions of CG Paucity &mdash; a.k.a. biology's Dark Energy:
        </p>

        <ol class="flipbook static" name="CG Paucity Effect">
            <li name="image">
            <img src="img/siergenhisto8.png" width="467" height="283" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
tallies <span class="Statement">=</span> <span class="Identifier">Sort</span>[<span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[chars, <span class="Type">2</span>, <span class="Type">1</span>]]];
<span class="Identifier">BarChart</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies, ChartLabels <span class="Statement">-&gt;</span> <span class="Identifier">CenterDot </span><span class="Statement">@@@</span> <span class="Identifier">First </span><span class="Statement">/@</span> tallies]
</pre>
            </li>
        </ol>

        <p>
        If you sample subsequences instead of individual letters, and use those samples to simulate a genetic sequence, what's the smallest subsequence-sampling size you can get away with while still faithfully reproducing the texture of the chaos plot?
        </p>

        <p>
        Asked differently, what length of subsequence is it that accounts for the texture of the chaos plot? Here is a graph of our DNA letters with pair-wise sequences labeled by probability:
        </p>
        
        <ol class="flipbook static" name="markov1">
            <li name="image">
            <img src="img/siermark2.png" width="360" height="359" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
tallies <span class="Statement">=</span> <span class="Identifier">Sort</span>[<span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[chars, <span class="Type">2</span>, <span class="Type">1</span>]]];
sum <span class="Statement">=</span> <span class="Identifier">Total</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies];
stats <span class="Statement">=</span> {<span class="Identifier">Rule </span><span class="Statement">@@</span> <span class="Statement">#1</span>, <span class="Statement">#2</span><span class="Statement">/</span>sum} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> tallies;

<span class="Identifier">With</span>[{r <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">05</span>},
 <span class="Identifier">edgeF</span>[<span class="Type">pts_List</span>, <span class="Type">e_</span>] <span class="Statement">:=</span> <span class="Identifier">Arrow</span>[pts, r];
 <span class="Identifier">edgeF</span>[<span class="Type">pts_List</span>, <span class="Type">h_</span>[<span class="Type">a_</span>, <span class="Type">a_</span>]] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[<span class="Identifier">Arrow</span>[pts, r<span class="Statement">/.</span><span class="Type">3</span>], <span class="Statement">.</span><span class="Type">3</span>, <span class="Identifier">pts</span>[[<span class="Type">1</span>]]];
 vertexF <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>]], <span class="Identifier">Disk</span>[<span class="Statement">#1</span>, r], <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>, <span class="Statement">.</span><span class="Type">7</span>],
    <span class="Identifier">Style</span>[<span class="Identifier">Text</span>[<span class="Statement">#2</span>, <span class="Statement">#1</span>], <span class="Type">13</span>, Bold, FontFamily <span class="Statement">-&gt;</span> <span class="String">&quot;Comic Sans MS&quot;</span>]} <span class="Statement">&amp;</span>;
 edgeLabels <span class="Statement">=</span> <span class="Statement">#1</span> <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Round</span>[<span class="Statement">#2</span>, <span class="Statement">.</span><span class="Type">01</span>], <span class="Type">12</span>, Bold] <span class="Statement">&amp;</span> <span class="Statement">@@@</span> stats;]

<span class="Identifier">Graph</span>[<span class="Identifier">First </span><span class="Statement">/@</span> stats, EdgeLabels <span class="Statement">-&gt;</span> edgeLabels,
 EdgeStyle <span class="Statement">-&gt;</span> <span class="Identifier">Directive</span>[{Thick, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">56</span>]}],
 VertexShapeFunction <span class="Statement">-&gt;</span> vertexF, VertexStyle <span class="Statement">-&gt;</span> <span class="Identifier">Orange</span>,
 EdgeShapeFunction <span class="Statement">-&gt;</span> edgeF, PlotRangePadding <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">1</span>]
</pre>
            </li>
        </ol>

        <p>
        This is a graph of what's called a Markov chain, but don't quote me on the formalities. (Mathematica 9 has built-in Markov whatitswhats, but I'm using version 8). The point is we can generate a sequence whose letter-to-letter statistics are the same as those of our original DNA by following the graph probaballistically:
        </p>


        <ol class="flipbook static" name="markov2">
            <li name="pseudo">
            <img src="img/siergenetics13.png" width="600" height="599" />
            </li>
            <li name="real">
            <img src="img/siergenetics10.png" width="600" height="599" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">getStats</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{tallies, sum},
   tallies <span class="Statement">=</span> <span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[data, <span class="Type">2</span>, <span class="Type">1</span>]];
   sum <span class="Statement">=</span> <span class="Identifier">Total</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies];
   {<span class="Identifier">Rule </span><span class="Statement">@@</span> <span class="Statement">#1</span>, <span class="Statement">#2</span><span class="Statement">/</span>sum} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> tallies];

<span class="Identifier">draw</span>[<span class="Type">data_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]}, options,
   Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Text </span><span class="Statement">@@@</span> coords, <span class="Identifier">Red</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]];

chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
stats <span class="Statement">=</span> <span class="Identifier">getStats</span>[chars];

<span class="Identifier">Do</span>[<span class="Identifier">With</span>[{weights <span class="Statement">=</span>
    <span class="Identifier">Rule </span><span class="Statement">@@</span> <span class="Identifier">Transpose</span><span class="Statement">@</span><span class="Identifier">Cases</span>[stats, {letter <span class="Statement">-&gt;</span> <span class="Type">to_</span>, <span class="Type">p_</span>} <span class="Statement">:&gt;</span> {<span class="Identifier">N</span>[p], to}]},
  <span class="Identifier">next</span>[letter] <span class="Statement">:=</span> <span class="Identifier">RandomChoice</span>[weights]],
 {letter, <span class="Identifier">DeleteDuplicates</span>[<span class="Identifier">stats</span>[[<span class="Identifier">All</span>, <span class="Type">1</span>, <span class="Type">1</span>]]]}]

coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
pseudoDat <span class="Statement">=</span> <span class="Identifier">NestList</span>[next, <span class="String">&quot;A&quot;</span>, <span class="Identifier">Length</span>[chars]] <span class="Statement">/.</span> coords;

<span class="Identifier">draw</span>[pseudoDat]
</pre>
            </li>
        </ol>

        <p>
        You can see that, while similar, the <span class="flipbookLink" name="markov2" index="1">fake plot</span> immediately stands out as too Hollywood compared to the verisimilous beauty of the <span class="flipbookLink" name="markov2" index="2">real data</span>. The most notable distinction between them, besides the grain, is the dark diagonal that crosses A and T in the real plot, presumably because those two letters have a lot of interplay. That it's not replicated by our pseudosequence may mean there are a relatively large amount of ATA, TAT subsequences.
        </p>

        <p>
        So it looks like subsequences of length 2 aren't sufficient. We could generalize our Markovizer, but what I think is actually interesting here is the grain. We can do some image processing to see if we can bring it out:
        </p>

        <ol class="flipbook static" name="image difference">
            <li>
            <img src="img/siergenetics14.png" width="600" height="599" />
            </li>
            <li>
            <img src="img/siergenetics18.png" width="600" height="599" />
            </li>
            <li>
            <img src="img/siergenetics19.png" width="600" height="599" />
            </li>
            <li>
            <img src="img/siergenhisto5.png" width="439" height="291" />
            <br />
            <br />
            <br />
            <pre>
<span class="Identifier">ListPlot</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Type">1</span>,
  <span class="Identifier">Mod</span>[<span class="Identifier">Range</span>[<span class="Type">1000</span>], <span class="Type">2</span>]], PlotRange <span class="Statement">-&gt;</span> <span class="Type">1</span>,
 Ticks <span class="Statement">-&gt;</span> {<span class="Identifier">Automatic</span>, <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">3</span>]}]</pre>
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">getStats</span>[<span class="Type">data_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{tallies, sum},
   tallies <span class="Statement">=</span> <span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[data, <span class="Type">2</span>, <span class="Type">1</span>]];
   sum <span class="Statement">=</span> <span class="Identifier">Total</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies];
   {<span class="Identifier">Rule </span><span class="Statement">@@</span> <span class="Statement">#1</span>, <span class="Statement">#2</span><span class="Statement">/</span>sum} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> tallies];

<span class="Identifier">draw</span>[<span class="Type">data_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]}, options];

chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
stats <span class="Statement">=</span> <span class="Identifier">getStats</span>[chars];

<span class="Identifier">Do</span>[<span class="Identifier">With</span>[{weights <span class="Statement">=</span>
    <span class="Identifier">Rule </span><span class="Statement">@@</span> <span class="Identifier">Transpose</span><span class="Statement">@</span><span class="Identifier">Cases</span>[stats, {letter <span class="Statement">-&gt;</span> <span class="Type">to_</span>, <span class="Type">p_</span>} <span class="Statement">:&gt;</span> {<span class="Identifier">N</span>[p], to}]},
  <span class="Identifier">next</span>[letter] <span class="Statement">:=</span> <span class="Identifier">RandomChoice</span>[weights]],
 {letter, <span class="Identifier">DeleteDuplicates</span>[<span class="Identifier">stats</span>[[<span class="Identifier">All</span>, <span class="Type">1</span>, <span class="Type">1</span>]]]}]

coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
pseudoDat <span class="Statement">=</span> <span class="Identifier">NestList</span>[next, <span class="String">&quot;A&quot;</span>, <span class="Identifier">Length</span>[chars] <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">/.</span> coords;
realDat <span class="Statement">=</span> chars <span class="Statement">/.</span> coords;

<span class="Identifier">With</span>[{upsc <span class="Statement">=</span> <span class="Type">2</span>},
 pseudo <span class="Statement">=</span> <span class="Identifier">draw</span>[pseudoDat, ImageSize <span class="Statement">-&gt;</span> upsc <span class="Type">600</span>] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;
 real <span class="Statement">=</span> <span class="Identifier">draw</span>[realDat, ImageSize <span class="Statement">-&gt;</span> upsc <span class="Type">600</span>] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;

 <span class="Identifier">With</span>[{<span class="String">\[Theta]</span> <span class="Statement">=</span> ColorNegate},
   (<span class="Identifier">ImageSubtract</span>[<span class="String">\[Theta]</span>[real], <span class="String">\[Theta]</span>[pseudo]] <span class="Statement">//</span> <span class="String">\[Theta]</span>)
     <span class="Statement">~</span><span class="Identifier">MinFilter</span><span class="Statement">~</span><span class="Type">1</span>
     <span class="Statement">~</span><span class="Identifier">ImageMultiply</span><span class="Statement">~</span><span class="Type">1.1</span>
    <span class="Comment">(*~ImageAdjust~(9!)*)</span>
    <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span>]
  <span class="Statement">~</span><span class="Identifier">ImageResize</span><span class="Statement">~</span><span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span>upsc]]
</pre>
            </li>
        </ol>

        <p>
        My intuition here is to subtract the Hollywood plot from the real plot (as images) in order to highlight artifacts that are due to longer subsequence patterns. The two <span class="flipbookLink" name="image difference" index="2">horizontal streaks</span> are at the one-third and two-thirds marks of the square as a whole, which I think implies a lot of AT/TA. Note that a point at $\small{\frac 1 3}$ is halfway between zero and $\small{\frac 2 3}$, and vice versa. $\small{\{\frac 1 3, \frac 2 3\}}$ is the fixed point of alternating T/A, <span class="flipbookLink" name="image difference" index="4">so to speak</span>. Here's a histogram of 3-sequences:
        </p>

        <ol class="flipbook static" name="attatatatat main">
            <li>
            <ol class="flipbook static" name="attatatatat1">
                <li name="image">
                <img src="img/siergenhisto6.png" width="602" height="390" />
                </li>
                <li name="source">
<pre style="font-size: 14px">
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]]; 
tallies <span class="Statement">=</span> <span class="Identifier">Sort</span>[<span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[chars, <span class="Type">3</span>, <span class="Type">1</span>]]];
<span class="Identifier">BarChart</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> tallies, ChartLabels <span class="Statement">-&gt;</span> <span class="Identifier">Column </span><span class="Statement">/@</span> <span class="Identifier">First </span><span class="Statement">/@</span> tallies]

</pre>
                </li>
            </ol>
            </li>
            <li>
            <ol class="flipbook static" name="attatatatat2">
                <li name="image">
                <img src="img/siergenhisto7.png" width="631" height="390" />
                </li>
                <li name="source">
<pre style="font-size: 14px">
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];
tallies <span class="Statement">=</span> <span class="Identifier">Sort</span>[<span class="Identifier">Tally</span>[<span class="Identifier">Partition</span>[chars, <span class="Type">5</span>, <span class="Type">1</span>]]];
<span class="Identifier">ListPlot</span>[<span class="Identifier">Cases</span>[tallies, {<span class="Type">seq_</span>, <span class="Type">count_</span>} <span class="Statement">:&gt;</span> <span class="Identifier">Tooltip</span>[count, <span class="Identifier">Column</span>[seq]]],
 Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, Filling <span class="Statement">-&gt;</span> Axis, PlotRange <span class="Statement">-&gt;</span> Full]
</pre>
                </li>
            </ol>
            </li>
        </ol>

        <p>
        Which actually just shows a lot of TTT and AAA. Longer subsequence statistics show a <span class="flipbookLink" name="attatatatat main" index="2">similar picture</span>. And of course we can always just do this:
        </p>

        
        <ol class="flipbook static" name="contiguity table">
            <li name="table">
            <div style="font-size: 5px">
$$
\begin{array}{llllllll}
 \text{A} & 1119676 & \text{T} & 1120986 & \text{G} & 882866 & \text{C} & 882887 \\
 \text{AA} & 316677 & \text{TT} & 322527 & \text{GG} & 195417 & \text{CC} & 199940 \\
 \text{AAA} & 127806 & \text{TTT} & 130977 & \text{GGG} & 45560 & \text{CCC} & 46320 \\
 \text{AAAA} & 51308 & \text{TTTT} & 52674 & \text{GGGG} & 10022 & \text{CCCC} & 9962 \\
 \text{AAAAA} & 18837 & \text{TTTTT} & 19401 & \text{GGGGG} & 2177 & \text{CCCCC} & 2199 \\
 \text{AAAAAA} & 5617 & \text{TTTTTT} & 5772 & \text{GGGGGG} & 468 & \text{CCCCCC} & 409 \\
 \text{AAAAAAA} & 2308 & \text{TTTTTTT} & 2326 & \text{GGGGGGG} & 69 & \text{CCCCCCC} & 59 \\
 \text{AAAAAAAA} & 803 & \text{TTTTTTTT} & 797 & \text{GGGGGGGG} & 18 & \text{CCCCCCCC} & 14 \\
 \text{AAAAAAAAA} & 419 & \text{TTTTTTTTT} & 458 & \text{GGGGGGGGG} & 4 & \text{CCCCCCCCC} & 8 \\
 \text{AAAAAAAAAA} & 259 & \text{TTTTTTTTTT} & 265 & \text{GGGGGGGGGG} & 3 & \text{CCCCCCCCCC} & 8 \\
 \text{AAAAAAAAAAA} & 141 & \text{TTTTTTTTTTT} & 173 & \text{GGGGGGGGGGG} & 2 & \text{CCCCCCCCCCC} & 12 \\
 \text{AAAAAAAAAAAA} & 125 & \text{TTTTTTTTTTTT} & 114 & \text{GGGGGGGGGGGG} & 1 & \text{CCCCCCCCCCCC} & 2 \\
 \text{AAAAAAAAAAAAA} & 83 & \text{TTTTTTTTTTTTT} & 112 & \text{GGGGGGGGGGGGG} & 1 & \text{CCCCCCCCCCCCC} & 1 \\
 \text{AAAAAAAAAAAAAA} & 59 & \text{TTTTTTTTTTTTTT} & 110 & \text{GGGGGGGGGGGGGG} & 1 & \text{CCCCCCCCCCCCCC} & 2 \\
 \text{AAAAAAAAAAAAAAA} & 63 & \text{TTTTTTTTTTTTTTT} & 82 & \text{GGGGGGGGGGGGGGG} & 1 & \text{CCCCCCCCCCCCCCC} & 1 \\
 \text{AAAAAAAAAAAAAAAA} & 62 & \text{TTTTTTTTTTTTTTTT} & 66 & \text{GGGGGGGGGGGGGGGG} & 2 & \text{CCCCCCCCCCCCCCCCC} & 1 \\
 \text{AAAAAAAAAAAAAAAAA} & 34 & \text{TTTTTTTTTTTTTTTTT} & 52 & \text{GGGGGGGGGGGGGGGGGGGGG} & 1 & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAA} & 43 & \text{TTTTTTTTTTTTTTTTTT} & 49 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAA} & 28 & \text{TTTTTTTTTTTTTTTTTTT} & 38 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAA} & 28 & \text{TTTTTTTTTTTTTTTTTTTT} & 31 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAA} & 34 & \text{TTTTTTTTTTTTTTTTTTTTT} & 28 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAA} & 31 & \text{TTTTTTTTTTTTTTTTTTTTTT} & 23 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAA} & 26 & \text{TTTTTTTTTTTTTTTTTTTTTTT} & 14 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAA} & 15 & \text{TTTTTTTTTTTTTTTTTTTTTTTT} & 23 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAA} & 11 & \text{TTTTTTTTTTTTTTTTTTTTTTTTT} & 12 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAA} & 12 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTT} & 15 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAA} & 15 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTT} & 8 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 11 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 7 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 7 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 3 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 6 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 5 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 5 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 2 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 3 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 3 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 1 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 3 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 4 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 3 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 5 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 1 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 1 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 2 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 2 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 2 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 2 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 1 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 1 & \text{TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT} & 1 & \text{} & \text{} & \text{} & \text{} \\
 \text{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} & 1 & \text{} & \text{} & \text{} & \text{} & \text{} & \text{} \\
\end{array}
$$        
</div>
            </li>
            <li name="source">
<pre>



string <span class="Statement">=</span> <span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}];
tallies <span class="Statement">=</span> <span class="Identifier">Sort</span>[<span class="Identifier">Tally</span>[<span class="Identifier">StringCases</span>[string, (<span class="String">&quot;A&quot;</span> <span class="Statement">..</span> <span class="Statement">|</span> <span class="String">&quot;T&quot;</span> <span class="Statement">..</span> <span class="Statement">|</span> <span class="String">&quot;C&quot;</span> <span class="Statement">..</span> <span class="Statement">|</span> <span class="String">&quot;G&quot;</span> <span class="Statement">..</span>)]]];

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
   <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">Sort</span><span class="Statement">@</span>
      <span class="Identifier">SplitBy</span>[tallies, <span class="Identifier">StringTake</span>[<span class="Identifier">First</span>[<span class="Statement">#</span>], <span class="Type">1</span>] <span class="Statement">&amp;</span>], <span class="Type">2</span>],
  Alignment <span class="Statement">-&gt;</span> <span class="Identifier">Left</span>] <span class="Statement">//</span><span class="Identifier"> Magnify</span>[<span class="Statement">#</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>] <span class="Statement">&amp;</span>



</pre>
            </li>
            <li name="?">
<pre>



string <span class="Statement">=</span> <span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}];
strings <span class="Statement">=</span> <span class="Identifier">ParallelTable</span>[<span class="Identifier">Module</span>[{cases <span class="Statement">=</span>
      <span class="Identifier">StringCases</span>[string, <span class="Identifier">Alternatives </span><span class="Statement">@@</span> cs <span class="Statement">..</span>, Overlaps <span class="Statement">-&gt;</span> <span class="Identifier">True</span>]},
    <span class="Identifier">Last</span><span class="Statement">@</span><span class="Identifier">SortBy</span>[cases, StringLength]],
   {cs, <span class="Identifier">Subsets</span>[{<span class="String">&quot;A&quot;</span>, <span class="String">&quot;C&quot;</span>, <span class="String">&quot;T&quot;</span>, <span class="String">&quot;G&quot;</span>}, {<span class="Type">2</span>}]}];

<span class="Identifier">Grid</span>[{<span class="Identifier">Tooltip</span>[<span class="Identifier">Short</span>[<span class="Statement">#</span>], <span class="Statement">#</span>], <span class="Identifier">StringLength</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span>
  <span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">SortBy</span>[strings, StringLength], Alignment <span class="Statement">-&gt;</span> <span class="Identifier">Left</span>]



</pre>
            </li>
        </ol>

        <p>
        The longest single-letter run length in this section of DNA is 48 As. The longest string of A-or-T is 222 basepairs long. Quite long, but the longest pairing is actually T/C which has a sequence of length 231. C/G's longest sequence is 34 basepairs long. I wonder what it is about CG. Maybe an unusually (un)useful amino acid or some hydrophobilia issue. I wonder too if these are blanket statistical patterns or if certain quirks are only present, say, in non-coding regions.
        </p>

        <p>
        You might be wondering why we don't just <a href="http://biology.stackexchange.com/">ask a biologist</a> about these mysteries. The reason is because you're inside a car right now, I'm driving, we're lost, both of us are tourists, and I'm one of those people that would sooner burn hours of gasoline/diesel than ask for directions. You also suspect I might be some kind of criminal, so you're afraid of bringing up the issue. All around it's pretty awkward in here.
        </p>

        <p>
        We can do a lot better than these static diagrams by giving ourselves the ability to manually movearound the vertices to see if we can find interesting patterns:
        </p>

        <ol class="flipbook static" name="vertex movearounding part3">
            <li>
            <img src="img/siergenetics21.png" width="505" height="519" />
            </li>
            <li>
            <img src="img/siergenetics23.png" width="505" height="519" />
            </li>
            <li>
            <img src="img/siergenetics22.png" width="600" height="515" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
chars <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]];

<span class="Identifier">draw</span>[<span class="Type">data_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]}, options];

<span class="Identifier">Manipulate</span>[
 <span class="Identifier">draw</span>[
  <span class="Identifier">chars</span>[[<span class="Type">1</span> ;; <span class="Type">100000</span>]] <span class="Statement">/.</span> <span class="Identifier">Thread</span>[<span class="Identifier">First </span><span class="Statement">/@</span> coords <span class="Statement">-&gt;</span> pts],
  PlotRange <span class="Statement">-&gt;</span> <span class="Type">1.1</span>],
 {{pts, <span class="Identifier">Last </span><span class="Statement">/@</span> coords}, Locator,
  Appearance <span class="Statement">-&gt;</span> (<span class="Identifier">Framed</span>[<span class="Statement">#</span>, BaseStyle <span class="Statement">-&gt;</span> <span class="Identifier">Red</span>,
       FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, FrameMargins <span class="Statement">-&gt;</span> <span class="Type">0</span>,
       Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">First </span><span class="Statement">/@</span> coords)}]
</pre>
            </li>
        </ol>

        <p>
        And a tool that repeatedly applies the DeLorean transform to rebuild the sequence leading up to a region:
        </p>

        <ol class="flipbook static" name="deloreanx2">
            <li>
            <img src="img/siergenetics24.png" width="555" height="621" />
            </li>
            <li>
            <img src="img/siergenetics28.png" width="555" height="621" />
            </li>
            <li>
            <img src="img/siergenetics29.png" width="555" height="621" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
coords <span class="Statement">=</span> <span class="Identifier">N</span><span class="Statement">@</span>{<span class="String">&quot;A&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;T&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, <span class="String">&quot;G&quot;</span> <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, <span class="String">&quot;C&quot;</span> <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}};
dat <span class="Statement">=</span> <span class="Identifier">Characters</span>[<span class="Identifier">GenomeData</span>[{<span class="String">&quot;ChromosomeX&quot;</span>, {<span class="Type">28000000</span>, <span class="Type">36000000</span>}}]] <span class="Statement">/.</span> coords;
nfLetter <span class="Statement">=</span> <span class="Identifier">Module</span>[{nf <span class="Statement">=</span> <span class="Identifier">Nearest</span>[<span class="Identifier">Reverse </span><span class="Statement">/@</span> coords]}, <span class="Identifier">nf</span>[<span class="Statement">#</span>, <span class="Type">1</span>][[<span class="Type">1</span>]] <span class="Statement">&amp;</span>];

<span class="Identifier">draw</span>[<span class="Type">data_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, data]]}, options];

background <span class="Statement">=</span> <span class="Identifier">Raster</span>[<span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">ImageData</span><span class="Statement">@</span><span class="Identifier">Rasterize</span><span class="Statement">@</span>
      <span class="Identifier">draw</span>[dat, PlotRange <span class="Statement">-&gt;</span> <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">600</span> {<span class="Type">1</span>, <span class="Type">1</span>}],
   {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}];

<span class="Identifier">delorean</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> <span class="Type">2</span> p <span class="Statement">-</span> (<span class="Identifier">nfLetter</span>[p] <span class="Statement">/.</span> coords);
<span class="Identifier">Manipulate</span>[<span class="Identifier">Module</span>[{seq, r <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">^</span>radius},
  seq <span class="Statement">=</span> <span class="Identifier">Most</span>[<span class="Identifier">NestList</span>[delorean, pt, <span class="Identifier">Floor</span>[<span class="Type">1</span><span class="Statement">/</span>(<span class="Type">2</span> r)]]];

  <span class="Identifier">Graphics</span>[{background, {<span class="Identifier">Darker</span><span class="Statement">@</span><span class="Identifier">Gray</span>, <span class="Identifier">Point</span>[seq]},
    {<span class="Identifier">Orange</span>, Thick, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">8</span>], <span class="Identifier">Arrow</span>[<span class="Identifier">Reverse</span>[seq]],
     <span class="Identifier">MapThread</span>[Circle, {seq, <span class="Type">2</span><span class="Statement">^</span>(radius <span class="Statement">+</span> <span class="Type">1</span>) r <span class="Type">2</span><span class="Statement">^</span><span class="Identifier">Range</span>[<span class="Identifier">Length</span>[seq]]}]}},
   PlotRange <span class="Statement">-&gt;</span> <span class="Type">1.015</span>, PlotLabel <span class="Statement">-&gt;</span> (<span class="Identifier">nfLetter </span><span class="Statement">/@</span> <span class="Identifier">Reverse</span>[seq]),
   Epilog <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Identifier">Text </span><span class="Statement">@@@</span> coords, <span class="Identifier">Red</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]]],

 {{radius, <span class="Statement">-</span><span class="Type">2</span>}, <span class="Statement">-</span><span class="Type">4</span>, <span class="Statement">-</span><span class="Type">2</span>, <span class="Type">1</span>},
 {{pt, {<span class="Statement">-.</span><span class="Type">75</span>, <span class="Statement">-.</span><span class="Type">25</span>}}, Locator}]
</pre>
            </li>
        </ol>

        <p>
        I'm not actually sure how legit the maths of the program are, but there it be. Let's return to our charcoal diamond, here rotated:
        </p>
        
        <ol class="flipbook static" name="square removal">
            <li name="0">
            <img src="img/sierbycontradiction0.png" width="600" height="600" />
            </li>
            <li name="1">
            <img src="img/sierbycontradiction1.png" width="600" height="600" />
            </li>
            <li name="2">
            <img src="img/sierbycontradiction2.png" width="600" height="600" />
            </li>
            <li name="3">
            <img src="img/sierbycontradiction3.png" width="600" height="600" />
            </li>
            <li name="4">
            <img src="img/sierbycontradiction4.png" width="600" height="600" />
            </li>
            <li name="5">
            <img src="img/sierbycontradiction5.png" width="600" height="600" />
            </li>
            <li name="6">
            <img src="img/sierbycontradiction6.png" width="600" height="600" />
            </li>
            <li name="7">
            <img src="img/sierbycontradiction7.png" width="600" height="600" />
            </li>
            <li name='"&infin;"'>
            <img src="img/sierbycontradictioninfinity.png" width="600" height="600" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">drawDiamond</span>[<span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomInteger</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, {numPoints, <span class="Type">2</span>}]]]},
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">600</span>, PlotRangePadding <span class="Statement">-&gt;</span> <span class="Type">0</span>];

diamond <span class="Statement">=</span> <span class="Identifier">drawDiamond</span>[<span class="Type">15000000</span>] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;

axiom <span class="Statement">=</span> {{Transparent, <span class="Identifier">Rectangle</span>[<span class="Identifier">Scaled</span>[{<span class="Type">0</span>, <span class="Type">0</span>}], <span class="Identifier">Scaled</span>[{<span class="Type">2</span>, <span class="Type">2</span>}]]}, <span class="Identifier">White</span>,
   <span class="Identifier">If</span>[hl, <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Green</span>}]], <span class="Identifier">Rectangle</span>[<span class="Identifier">Scaled</span>[{<span class="Type">1</span>, <span class="Type">1</span>}], <span class="Identifier">Scaled</span>[{<span class="Type">2</span>, <span class="Type">2</span>}]]};

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Translate</span>[<span class="Identifier">Scale</span>[prev, <span class="Statement">.</span><span class="Type">5</span>], {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}}];

<span class="Identifier">Control</span>[{hl, {<span class="Identifier">True</span>, <span class="Identifier">False</span>}}] <span class="Identifier">Control</span>[{n, <span class="Type">0</span>, <span class="Type">10</span>, <span class="Type">1</span>}]
<span class="Identifier">Dynamic</span>[<span class="Identifier">Overlay</span>[{diamond, <span class="Identifier">Graphics</span>[<span class="Identifier">NestList</span>[next, axiom, n],
    ImageSize <span class="Statement">-&gt;</span> (ImageSize <span class="Statement">/.</span> <span class="Identifier">AbsoluteOptions</span>[diamond]), PlotRange <span class="Statement">-&gt;</span> <span class="Type">1</span>]}]]
</pre>
            </li>
        </ol>

        <p>
        Imagine we suddenly removed one vertex. That would mean that points can no longer land in <span class="flipbookLink" name="square removal" index="2">that quadrant</span>. Which would mean that no points could go from that quadrant to <span class="flipbookLink" name="square removal" index="3">these subquadrants</span>. Which would mean no points going to <span class="flipbookLink" name="square removal" index="4">these subquadrants</span>. And <span class="flipbookLink" name="square removal" index="5">so</span><span class="flipbookLink" name="square removal" index="6">on</span> and <span class="flipbookLink" name="square removal" index="7">so</span><span class="flipbookLink" name="square removal" index="8">forth</span>, <span class="flipbookLink" name="square removal" index="9">until</span>.
        </p>

        <p>
        So that explains the holes in the Sierpinski triangle. I call this the "Sierpinski triangle by infinite quadrilateral descent" method of construction. It seems very natural to me, but it raises the question of what these regions in the various deterministic constructions have to do with each other:
        </p>

        
        <ol class="flipbook static" name="contradiction matrix">
            <li name="image">
            <img src="img/sierbycontradictionmatrix1.png" width="132" height="117" />
            </li>
            <li name="source">
<pre style="font-size: 10px">
<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Array</span>[<span class="Identifier">Tooltip</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Binomial</span>[<span class="Statement">##</span>], <span class="Type">2</span>],
     <span class="Identifier">TraditionalForm</span>[<span class="Identifier">HoldForm</span>[<span class="Identifier">Binomial</span>[<span class="Statement">##</span>]] <span class="Statement">==</span> <span class="Identifier">Binomial</span>[<span class="Statement">##</span>]]] <span class="Statement">&amp;</span>, {<span class="Type">2</span><span class="Statement">^</span>n, <span class="Type">2</span><span class="Statement">^</span>n}, <span class="Type">0</span>];
<span class="Identifier">proc</span>[<span class="Type">a_</span> <span class="Statement">/;</span> <span class="Identifier">Length</span>[a] <span class="Statement">==</span> <span class="Type">2</span>] <span class="Statement">:=</span> a;
<span class="Identifier">proc</span>[<span class="Type">arr_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{l <span class="Statement">=</span> <span class="Identifier">Length</span>[arr]<span class="Statement">/</span><span class="Type">2</span>},
   <span class="Identifier">ArrayFlatten</span><span class="Statement">@</span><span class="Identifier">Map</span>[<span class="Identifier">Function</span>[square,
      <span class="Identifier">If</span>[<span class="Identifier">FreeQ</span>[square, <span class="Identifier">Tooltip</span>[<span class="Type">1</span>, <span class="Type">_</span>]],
       <span class="Comment">(**)</span><span class="Identifier">Map</span>[<span class="Identifier">Style</span>[<span class="Statement">#</span>, Bold, <span class="Identifier">ColorData</span>[<span class="Type">3</span>][l]] <span class="Statement">&amp;</span>, square, {<span class="Type">2</span>}],
       <span class="Comment">(**)</span><span class="Identifier">proc</span>[square]]], <span class="Identifier">Partition</span>[arr, {l, l}], {<span class="Type">2</span>}]];
<span class="Identifier">Style</span>[<span class="Identifier">MatrixForm</span>[<span class="Identifier">proc</span>[<span class="Identifier">draw</span>[<span class="Type">5</span>]]], Background <span class="Statement">-&gt;</span> <span class="Identifier">GrayLevel</span>[<span class="Statement">.</span><span class="Type">98</span>]]
</pre>
            </li>
        </ol>

        <p>
        (To be clear, the chaos game is just an algorithmic tradeoff vs the geometric approach. It is not necessarily doing anything non-deterministic in the larger scheme.) In this case I think the parity/binary explanations are going to be the simplest, though I'm a math noob and I don't see an immediately obvious way of approaching this, if the question even makes sense in the way I seem to be implying. However with <a href="http://mathematica.stackexchange.com/a/22058/950">some inspiration</a> we can find an iterative angle that seems to me like a kind of multiplication:
        </p>

<br />
        <div style="font-size: 12px">
$$
\begin{array}{l}
 \left(
\begin{array}{c}
 1 \\
\end{array}
\right)\to \alpha  \\
 \alpha  \left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right)=\left(
\begin{array}{cc}
 \alpha  & 0 \\
 \alpha  & \alpha  \\
\end{array}
\right)=\left(
\begin{array}{cc}
 \left(
\begin{array}{c}
 1 \\
\end{array}
\right) & \left(
\begin{array}{c}
 0 \\
\end{array}
\right) \\
 \left(
\begin{array}{c}
 1 \\
\end{array}
\right) & \left(
\begin{array}{c}
 1 \\
\end{array}
\right) \\
\end{array}
\right)=\left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right)\to \alpha  \\
 \alpha  \left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right)=\left(
\begin{array}{cc}
 \alpha  & 0 \\
 \alpha  & \alpha  \\
\end{array}
\right)=\left(
\begin{array}{cc}
 \left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right) & \left(
\begin{array}{cc}
 0 & 0 \\
 0 & 0 \\
\end{array}
\right) \\
 \left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right) & \left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right) \\
\end{array}
\right)=\left(
\begin{array}{cccc}
 1 & 0 & 0 & 0 \\
 1 & 1 & 0 & 0 \\
 1 & 0 & 1 & 0 \\
 1 & 1 & 1 & 1 \\
\end{array}
\right)\to \alpha  \\
\end{array}

$$
        </div>

<br />

        <p>
        So the Sierpinski triangle is the infinith power of
        <span style="font-size: 10px">${
\left(
\begin{array}{cc}
 1 & 0 \\
 1 & 1 \\
\end{array}
\right)}
$</span> under this 'multiplication.' Someone who knows enough group theory might recognize what's going on here. Unfortunately I don't, but one thing we can do is investigate this 'multiplication' in general. I was going to make a simple program to do that, but I got carried away and made this:
</p>

        <ol class="flipbook static" name="matrix replacement">
            <li>
            <img src="img/siermatrixrepl1.png" width="600" height="693" />
            </li>
            <li>
            <img src="img/sierscream1.png" width="600" height="798" />
            </li>
            <li>
            <img src="img/siermatrixrepl2.png" width="600" height="663" />
            </li>
            <li>
            <img src="img/siermatrixuparrow1.png" width="600" height="785" />
            </li>
            <li>
            <img src="img/siermatrixrepl4.png" width="600" height="693" />
            </li>
            <li>
            <img src="img/sierpinkinfinity1.png" width="600" height="535" />
            </li>
            <li>
            <img src="img/sierchronobracket.png" width="600" height="545" />
            </li>
            <li>
            <img src="img/siermatrixrepl5.png" width="600" height="662" />
            </li>
            <li>
            <img src="img/siermatrixrepl3.png" width="600" height="510" />
            </li>
            <li name="source">

            <ol class="flipbook static" name="matrix replacement source" default="2">
                <li name="[minimal]">
<pre style="font-size: 14px">
<span class="Comment">(* minimal *)</span>

<span class="Identifier">iterate</span>[<span class="Type">matrix_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span> <span class="Identifier">Nest</span>[<span class="Identifier">ArrayFlatten</span>[
     <span class="Identifier">ConstantArray</span>[<span class="Statement">#</span>, <span class="Identifier">Dimensions</span>[matrix]] matrix] <span class="Statement">&amp;</span>, <span class="Type">1</span>, power];

<span class="Identifier">draw</span>[<span class="Type">matrix_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span>
  <span class="Identifier">ArrayPlot</span>[<span class="Identifier">iterate</span>[matrix, power],
   Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, PixelConstrained <span class="Statement">-&gt;</span> <span class="Type">1</span>];

<span class="Identifier">draw</span>[{{<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}, <span class="Type">10</span>]
</pre>
                </li>
                <li name="definitions">
<pre style="font-size: 12px">
<span class="Identifier">matrixInput</span>[<span class="Identifier">Dynamic</span>[<span class="Type">m_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">rot_</span>]] <span class="Statement">:=</span>
  <span class="Identifier">Dynamic</span>[<span class="Identifier">Rotate</span>[<span class="Identifier">Deploy</span>[<span class="Identifier">MatrixForm</span>[<span class="Statement">#</span>, TableSpacing <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>}]], rot] <span class="Statement">&amp;</span><span class="Statement">@</span>
    <span class="Identifier">Array</span>[<span class="Comment">(*(*better performance*)Rotate[#,-rot]&amp;@*)</span>
     <span class="Identifier">Checkbox</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">m</span>[[<span class="Statement">##</span>]]], {<span class="Type">0</span>, <span class="Type">1</span>}] <span class="Statement">&amp;</span>, <span class="Identifier">Dimensions</span>[m]]];

bg <span class="Statement">=</span> <span class="Identifier">White</span>;
dims <span class="Statement">=</span> <span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">If</span>[<span class="Statement">#</span> <span class="Statement">&gt;</span> <span class="Type">4</span>, <span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Red</span>], <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">7</span>];

<span class="Identifier">iterate</span>[<span class="Type">matrix_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span> <span class="Identifier">Nest</span>[<span class="Identifier">ArrayFlatten</span>[
     <span class="Identifier">ConstantArray</span>[<span class="Statement">#</span>, <span class="Identifier">Dimensions</span>[matrix]] matrix] <span class="Statement">&amp;</span>, <span class="Type">1</span>, power];

controls <span class="Statement">=</span> <span class="Identifier">With</span>[{
    mC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{m, <span class="Type">2</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
    nC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{n, <span class="Type">2</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
    matrixInputC <span class="Statement">=</span> <span class="Identifier">matrixInput</span>[<span class="Identifier">Dynamic</span>[matrix], <span class="Identifier">Dynamic</span>[rot]],
    colorC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{color, <span class="Identifier">Black</span>}, ColorSlider}],
    rotC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{rot, <span class="Type">0</span>, <span class="String">&quot;\[Theta]&quot;</span>}, <span class="Identifier">Pi</span>, <span class="Statement">-</span><span class="Identifier">Pi</span>, <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">16</span>}],
    powerC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{power, <span class="Type">3</span>}, <span class="Type">1</span>, <span class="Type">4</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>}],
    opacityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{opacity, <span class="Type">1</span>}, <span class="Type">0</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
    primitiveC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{primitive, <span class="Identifier">Rectangle</span>[]},
       (<span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">Graphics</span>[{color, <span class="Statement">#</span>}, ImageSize <span class="Statement">-&gt;</span> <span class="Type">20</span>] <span class="Statement">&amp;</span>) <span class="Statement">/@</span> {
         {<span class="Identifier">PointSize</span>[Tiny], <span class="Identifier">Point</span>[<span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}]},
         {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Disk</span>[<span class="Identifier">N</span><span class="Statement">@</span>{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">5</span>]},
         <span class="Identifier">Rotate</span>[<span class="Identifier">Scale</span>[<span class="Identifier">Rectangle</span>[], <span class="Type">1</span><span class="Statement">./</span><span class="Identifier">Sqrt</span>[<span class="Type">2</span>]], <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>],
         <span class="Identifier">Rectangle</span>[]}, SetterBar}],
    backgroundC <span class="Statement">=</span> <span class="Identifier">Row</span>[{<span class="String">&quot;background   &quot;</span>,
       <span class="Identifier">Framed</span>[<span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
         AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Swatch&quot;</span>], FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>]],
        <span class="String">&quot; &quot;</span>,
       <span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
        AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Spectrum&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small]}]},

   <span class="Identifier">Row</span>[{
     <span class="Identifier">Column</span>[{
       <span class="Identifier">Row</span>[{mC, <span class="String">&quot;   \[Times]&quot;</span>, nC}],
       <span class="Identifier">Row</span>[{<span class="String">&quot;    &quot;</span>, matrixInputC}]}],
     <span class="Identifier">Spacer</span>[<span class="Type">40</span>],
     <span class="Identifier">Column</span>[{colorC, rotC, powerC}],
     <span class="Identifier">Column</span>[{backgroundC, opacityC, primitiveC}]}]];
</pre>
                </li>
                <li name="Manipulate">
<pre style="font-size: 12px">
<span class="Identifier">Panel</span>[<span class="Statement">#</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[bg]] <span class="Statement">&amp;</span><span class="Statement">@</span>
 <span class="Identifier">Manipulate</span>[
  <span class="Identifier">If</span>[{m, n} <span class="Statement">=!=</span> <span class="Identifier">Dimensions</span>[matrix], matrix <span class="Statement">=</span> <span class="Identifier">PadRight</span>[matrix, {m, n}]];

  <span class="Identifier">With</span>[{primitives <span class="Statement">=</span> <span class="Identifier">Rotate</span>[<span class="Statement">#</span>, rot <span class="Statement">-</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
      <span class="Identifier">Translate</span>[primitive, <span class="Identifier">Position</span>[
        <span class="Identifier">iterate</span>[matrix <span class="Statement">/.</span> <span class="Type">0</span> matrix <span class="Statement">-&gt;</span> {{<span class="Type">1</span>}}, power], <span class="Type">1</span>]]},

   <span class="Identifier">Graphics</span>[{<span class="Identifier">Dynamic</span>[<span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opacity], color}]],
     <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Dynamic</span>[<span class="Identifier">Opacity</span>[opacity]], primitives},
    ImageSize <span class="Statement">-&gt;</span> {{<span class="Type">400</span>, Large}, {<span class="Type">400</span>, Large}},
    Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background]]],

  <span class="Identifier">Evaluate</span>[controls],

  <span class="Comment">(*declare variables here for persistence*)</span>
  {{background, bg <span class="Statement">=</span> <span class="Identifier">White</span>}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
  {{matrix, {{<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},

  Bookmarks <span class="Statement">:&gt;</span> {
    <span class="String">&quot;Random&quot;</span> <span class="Statement">:&gt;</span> (matrix <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{<span class="Statement">.</span><span class="Type">4</span>, <span class="Statement">.</span><span class="Type">6</span>} <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Identifier">Dimensions</span>[matrix]]),
    <span class="String">&quot;Invert&quot;</span> <span class="Statement">:&gt;</span> (matrix <span class="Statement">=</span> <span class="Identifier">BitXor</span>[matrix, <span class="Type">1</span>]),
    <span class="String">&quot;Array Print&quot;</span> <span class="Statement">:&gt;</span> (<span class="Identifier">With</span>[{p <span class="Statement">=</span> power, m <span class="Statement">=</span> matrix, c <span class="Statement">=</span> color, o <span class="Statement">=</span> opacity, bg <span class="Statement">=</span> background},
      <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[<span class="Identifier">Defer</span>[
         <span class="Identifier">ArrayPlot</span>[<span class="Identifier">iterate</span>[m, p], Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, PixelConstrained <span class="Statement">-&gt;</span> <span class="Type">1</span>,
          ColorRules <span class="Statement">-&gt;</span> {<span class="Type">0</span> <span class="Statement">-&gt;</span> bg, <span class="Type">1</span> <span class="Statement">-&gt;</span> c <span class="Statement">/.</span> <span class="Identifier">RGBColor</span>[<span class="Type">r_</span>, <span class="Type">g_</span>, <span class="Type">b_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">RGBColor</span>[r, g, b, o]}]],
        <span class="String">&quot;Input&quot;</span>]]]),
    <span class="String">&quot;Clear&quot;</span> <span class="Statement">:&gt;</span> (matrix <span class="Statement">=</span> <span class="Type">0</span> matrix)},

  Paneled <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
  SaveDefinitions <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, LabelStyle <span class="Statement">-&gt;</span> <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>], Alignment <span class="Statement">-&gt;</span> Center]
</pre>
                </li>
            </ol>

            </li>
        </ol>

        <p>
        I know what <span class="flipbookLink" name="matrix replacement" index="1">this image</span> reminds you of. Those little candle chandoliers that you hit in Castlevania to make hearts and morning stars come out. I also found <span class="flipbookLink" name="matrix replacement" index="2"><i>The Sierpinski Scream</i></span>, <span class="flipbookLink" name="matrix replacement" index="3">a letter H that would definitely beat you up if it was human</span>, <span class="flipbookLink" name="matrix replacement" index="4"><i>the</i> up arrow</span> and its <span class="flipbookLink" name="matrix replacement" index="5">Hot Topic-donning offspring</span>, <span class="flipbookLink" name="matrix replacement" index="6">pink infinities made of pink infinities</span>, even the vaunted <span class="flipbookLink" name="matrix replacement" index="7">Sierpinski Chronobracket</span>.
        </p>

        <p>
        Essentially what we have here in these little matrices is a notation for specifying translations. It's yet another algorithm with different tradeoffs for doing more or less the same thing that our chaos game and geometric algorithms are doing. We can bring this characteristic out by allowing arbitrary rules:
        </p>
        
        <ol class="flipbook static" name="matrix replacement 2">
            <li>
            <img src="img/sierchaching1.png" width="600" height="766" />
            </li>
            <li>
            <img src="img/siermatrixrepl9.png" width="600" height="771" />
            </li>
            <li>
            <img src="img/siermatrixrepl7.png" width="600" height="489" />
            </li>
            <li>
            <img src="img/siermatrixrepl6.png" width="600" height="627" />
            </li>
            <li>
            <img src="img/siermatrixrepl8.png" width="600" height="643" />
            </li>
            <li>
            <img src="img/siermatrixrepl10.png" width="600" height="638" />
            </li>
            <li>
            <img src="img/siermatrixreplchalklightning.png" width="600" height="752" />
            </li>
            <li>
            <img src="img/siermatrixrepl11.png" width="512" height="512" />
            </li>
            <li name="source">
                <ol class="flipbook static" name="matrix replacement 2 source" default="2">
                <li name="[minimal]">
<pre style="font-size: 12px">
<span class="Comment">(* minimal *)</span>

<span class="Identifier">iterate</span>[<span class="Type">matrix_</span>, <span class="Type">power_</span>, <span class="Type">matrix1_</span><span class="Statement">:</span> {{<span class="Type">1</span>}}] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{rules <span class="Statement">=</span>
     {<span class="Type">0</span> <span class="Statement">-&gt;</span> (<span class="Type">0</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>), <span class="Type">1</span> <span class="Statement">-&gt;</span> (<span class="Statement">#</span> <span class="Statement">&amp;</span>), T <span class="Statement">-&gt;</span> Transpose,
      R <span class="Statement">-&gt;</span> (<span class="Identifier">Transpose</span>[<span class="Identifier">Reverse</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), L <span class="Statement">-&gt;</span> (<span class="Identifier">Reverse</span>[<span class="Identifier">Transpose</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>)}},

   <span class="Identifier">Nest</span>[<span class="Identifier">Function</span>[prev,
     <span class="Identifier">ArrayFlatten</span>[<span class="Identifier">Map</span>[<span class="Statement">#</span>[prev] <span class="Statement">&amp;</span>, matrix <span class="Statement">/.</span> rules, {<span class="Type">2</span>}]]],
    matrix1, power]];

<span class="Identifier">draw</span>[<span class="Type">matrix_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span>
  <span class="Identifier">ArrayPlot</span>[<span class="Identifier">iterate</span>[matrix, power],
   Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, PixelConstrained <span class="Statement">-&gt;</span> <span class="Type">1</span>];

<span class="Identifier">draw</span>[{{<span class="Type">1</span>, <span class="Type">0</span>}, {T, R}}, <span class="Type">10</span>]
</pre>
                </li>
                <li name="definitions">
<pre style="font-size: 10px">
<span class="Identifier">matrixInput1</span>[<span class="Identifier">Dynamic</span>[<span class="Type">m_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">rot_</span>]] <span class="Statement">:=</span>
  <span class="Identifier">Dynamic</span>[<span class="Identifier">Rotate</span>[<span class="Identifier">Deploy</span>[<span class="Identifier">MatrixForm</span>[<span class="Statement">#</span>, TableSpacing <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>}]], rot] <span class="Statement">&amp;</span><span class="Statement">@</span>
    <span class="Identifier">Array</span>[<span class="Comment">(*(*better performance*)Rotate[#,-rot]&amp;@*)</span>
     <span class="Identifier">EventHandler</span>[<span class="Identifier">Checkbox</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">m</span>[[<span class="Statement">##</span>]]], {<span class="Type">0</span>, <span class="Type">1</span>}],
       {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> (<span class="Identifier">m</span>[[<span class="Statement">##</span>]] <span class="Statement">=</span> <span class="Type">0</span>)] <span class="Statement">&amp;</span>,
     <span class="Identifier">Dimensions</span>[m]], <span class="Type">0</span>];

<span class="Identifier">matrixInput2</span>[<span class="Identifier">Dynamic</span>[<span class="Type">m_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">rules_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">color_</span>],
   <span class="Identifier">Dynamic</span>[<span class="Type">rot_</span>]] <span class="Statement">:=</span>
  <span class="Identifier">With</span>[{
    tooltip <span class="Statement">=</span> <span class="Identifier">Tooltip</span>[<span class="Statement">#</span>, <span class="String">&quot;Click to cycle\nRight-click to zero&quot;</span>, TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">8</span>] <span class="Statement">&amp;</span>,
    eatRightClick <span class="Statement">=</span> <span class="Identifier">EventHandler</span>[<span class="Statement">#</span>, {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> {}] <span class="Statement">&amp;</span>,
    matrixForm <span class="Statement">=</span> <span class="Identifier">MatrixForm</span>[<span class="Statement">#</span>, TableSpacing <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>}] <span class="Statement">&amp;</span>},

   <span class="Identifier">Dynamic</span>[
    <span class="Identifier">eatRightClick</span><span class="Statement">@</span><span class="Identifier">Style</span>[<span class="Statement">#</span>, color] <span class="Statement">&amp;</span><span class="Statement">@</span>
       <span class="Identifier">Rotate</span>[<span class="Statement">#</span>, rot] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">tooltip</span><span class="Statement">@</span><span class="Identifier">Deploy</span><span class="Statement">@</span><span class="Identifier">matrixForm</span><span class="Statement">@</span>
        <span class="Identifier">Array</span>[
         <span class="Identifier">EventHandler</span>[<span class="Identifier">Toggler</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">m</span>[[<span class="Statement">##</span>]]], <span class="Identifier">First </span><span class="Statement">/@</span> rules],
           {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> (<span class="Identifier">m</span>[[<span class="Statement">##</span>]] <span class="Statement">=</span> <span class="Type">0</span>)] <span class="Statement">&amp;</span>,
         <span class="Identifier">Dimensions</span>[m]]]];

bg <span class="Statement">=</span> <span class="Identifier">White</span>;
dims <span class="Statement">=</span> <span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">If</span>[<span class="Statement">#</span> <span class="Statement">&gt;</span> <span class="Type">4</span>, <span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Red</span>], <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">4</span>];
defaultRules <span class="Statement">=</span> {<span class="Type">0</span> <span class="Statement">-&gt;</span> (<span class="Type">0</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>), <span class="Type">1</span> <span class="Statement">-&gt;</span> (<span class="Statement">#</span> <span class="Statement">&amp;</span>), T <span class="Statement">-&gt;</span> Transpose,
   R <span class="Statement">-&gt;</span> (<span class="Identifier">Transpose</span>[<span class="Identifier">Reverse</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), L <span class="Statement">-&gt;</span> (<span class="Identifier">Reverse</span>[<span class="Identifier">Transpose</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>)};

<span class="Identifier">iterate</span>[<span class="Type">matrix_</span>, <span class="Type">matrix1_</span>, <span class="Type">rules_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Nest</span>[
   <span class="Identifier">Function</span>[prev, <span class="Identifier">ArrayFlatten</span>[<span class="Identifier">Map</span>[<span class="Statement">#</span>[prev] <span class="Statement">&amp;</span>, matrix <span class="Statement">/.</span> rules, {<span class="Type">2</span>}]]],
   matrix1, power];
</pre>
                    </li>
                    <li name="controls">
<pre style="font-size: 10px">
controls <span class="Statement">=</span> <span class="Identifier">With</span>[{
    m1C <span class="Statement">=</span> <span class="Identifier">Control</span>[{{m1, <span class="Type">2</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
    m2C <span class="Statement">=</span> <span class="Identifier">Control</span>[{{m2, <span class="Type">2</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
    matrixInput1C <span class="Statement">=</span> <span class="Identifier">matrixInput1</span>[<span class="Identifier">Dynamic</span>[matrix1], <span class="Identifier">Dynamic</span>[rot]],
    matrixInput2C <span class="Statement">=</span> <span class="Identifier">matrixInput2</span>[<span class="Identifier">Dynamic</span>[matrix], <span class="Identifier">Dynamic</span>[rules], <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Dynamic</span>[rot]],
    rulesC <span class="Statement">=</span> <span class="Identifier">OpenerView</span>[{<span class="String">&quot;Rules&quot;</span>, <span class="Identifier">Control</span>[{{rules, defaultRules, <span class="String">&quot;&quot;</span>}, InputField,
         Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">Lighter</span>[background, <span class="Statement">.</span><span class="Type">65</span>]], FieldSize <span class="Statement">-&gt;</span> {<span class="Type">45</span>, <span class="Type">5</span>}}]}],
    colorC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{color, <span class="Identifier">Black</span>}, ColorSlider}],
    rotC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{rot, <span class="Type">0</span>, <span class="String">&quot;\[Theta]&quot;</span>}, <span class="Identifier">Pi</span>, <span class="Statement">-</span><span class="Identifier">Pi</span>, <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">16</span>}],
    powerC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{power, <span class="Type">3</span>}, <span class="Type">1</span>, <span class="Type">4</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>}],
    backgroundC <span class="Statement">=</span> <span class="Identifier">Row</span>[{<span class="String">&quot;background   &quot;</span>,
       <span class="Identifier">Framed</span>[<span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
         AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Swatch&quot;</span>], FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>]], <span class="String">&quot; &quot;</span>,
       <span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
        AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Spectrum&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small]}],
    opacityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{opacity, <span class="Type">1</span>}, <span class="Type">0</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
    primitiveC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{primitive, <span class="Identifier">Rectangle</span>[]},
       (<span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">Graphics</span>[{color, <span class="Statement">#</span>}, ImageSize <span class="Statement">-&gt;</span> <span class="Type">20</span>] <span class="Statement">&amp;</span>) <span class="Statement">/@</span> {
         {<span class="Identifier">PointSize</span>[Tiny], <span class="Identifier">Point</span>[{<span class="Type">0</span>, <span class="Type">0</span>}]},
         {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">5</span>]},
         <span class="Identifier">Rotate</span>[<span class="Identifier">Scale</span>[<span class="Identifier">Rectangle</span>[], <span class="Type">1</span><span class="Statement">/</span><span class="Identifier">Sqrt</span>[<span class="Type">2</span>]], <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>],
         <span class="Identifier">Rectangle</span>[]}, SetterBar}]},

   <span class="Identifier">Row</span>[{
     <span class="Identifier">Column</span>[{
       <span class="Identifier">Row</span>[{m1C, <span class="String">&quot;   |&quot;</span>, m2C}],
       <span class="Identifier">Row</span>[{<span class="String">&quot;    &quot;</span>, matrixInput1C, <span class="String">&quot;  &quot;</span>, matrixInput2C}]}],
     <span class="Identifier">Spacer</span>[<span class="Type">40</span>],
     <span class="Identifier">Column</span>[{rulesC, <span class="Identifier">OpenerView</span>[<span class="Statement">#</span>, <span class="Identifier">True</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
        {<span class="String">&quot;Style&quot;</span>, <span class="Identifier">Row</span>[{<span class="Identifier">Column</span>[{colorC, rotC, powerC}],
           <span class="Identifier">Column</span>[{backgroundC, opacityC, primitiveC}]}]}}]}]];

bookmarks <span class="Statement">=</span> {
   <span class="String">&quot;Random&quot;</span> <span class="Statement">:&gt;</span> (
     matrix1 <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Identifier">Dimensions</span>[matrix1]];
     matrix <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[<span class="Identifier">First </span><span class="Statement">/@</span> rules, <span class="Identifier">Dimensions</span>[matrix]]),

   <span class="String">&quot;Array Print&quot;</span> <span class="Statement">:&gt;</span> <span class="Identifier">With</span>[
     {m1 <span class="Statement">=</span> matrix1, m <span class="Statement">=</span> matrix, r <span class="Statement">=</span> rules, p <span class="Statement">=</span> power, c <span class="Statement">=</span> color, o <span class="Statement">=</span> opacity, bg <span class="Statement">=</span> background},
     <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[<span class="Identifier">Defer</span>[
        <span class="Identifier">ArrayPlot</span>[
         <span class="Identifier">iterate</span>[m <span class="Statement">/.</span> <span class="Type">0</span> m <span class="Statement">-&gt;</span> {{<span class="Type">1</span>}}, m1 <span class="Statement">/.</span> <span class="Type">0</span> m1 <span class="Statement">-&gt;</span> {{<span class="Type">1</span>}}, r, p], PixelConstrained <span class="Statement">-&gt;</span> <span class="Type">1</span>, Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
         ColorRules <span class="Statement">-&gt;</span> {<span class="Type">0</span> <span class="Statement">-&gt;</span> bg, <span class="Type">1</span> <span class="Statement">-&gt;</span> c <span class="Statement">/.</span> <span class="Identifier">RGBColor</span>[<span class="Type">r_</span>, <span class="Type">g_</span>, <span class="Type">b_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">RGBColor</span>[r, g, b, o]}]],
       <span class="String">&quot;Input&quot;</span>]]],

   <span class="String">&quot;Clear&quot;</span> <span class="Statement">:&gt;</span> (matrix <span class="Statement">=</span> <span class="Type">0</span> matrix)};
</pre>
                    </li>
                    <li name="Manipulate">
<pre style="font-size: 10px">
<span class="Identifier">Panel</span>[<span class="Statement">#</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[bg]] <span class="Statement">&amp;</span><span class="Statement">@</span>
 <span class="Identifier">Manipulate</span>[
  <span class="Identifier">If</span>[{m1, m1} <span class="Statement">=!=</span> <span class="Identifier">Dimensions</span>[matrix1], matrix1 <span class="Statement">=</span> <span class="Identifier">PadRight</span>[matrix1, {m1, m1}]];
  <span class="Identifier">If</span>[{m2, m2} <span class="Statement">=!=</span> <span class="Identifier">Dimensions</span>[matrix], matrix <span class="Statement">=</span> <span class="Identifier">PadRight</span>[matrix, {m2, m2}]];

  <span class="Comment">(*remove rules from matrix that no longer exist*)</span>
  <span class="Identifier">Module</span>[{matrixP, default <span class="Statement">=</span> <span class="Identifier">rules</span>[[<span class="Type">1</span>, <span class="Type">1</span>]]},
   matrixP <span class="Statement">=</span> <span class="Identifier">Replace</span>[matrix, <span class="Type">a_</span> <span class="Statement">/;</span> <span class="Statement">!</span> <span class="Identifier">MemberQ</span>[<span class="Identifier">First </span><span class="Statement">/@</span> rules, a] <span class="Statement">-&gt;</span> default, {<span class="Type">2</span>}];
   <span class="Identifier">If</span>[matrix <span class="Statement">=!=</span> matrixP, matrix <span class="Statement">=</span> matrixP]];

  <span class="Identifier">With</span>[{primitives <span class="Statement">=</span>
     <span class="Identifier">Rotate</span>[<span class="Identifier">Translate</span>[primitive, <span class="Identifier">Position</span>[<span class="Statement">#</span>, <span class="Type">1</span>]], rot <span class="Statement">-</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
      <span class="Identifier">iterate</span>[
       matrix <span class="Statement">/.</span> <span class="Type">0</span> matrix <span class="Statement">-&gt;</span> {{<span class="Type">1</span>}},
       matrix1 <span class="Statement">/.</span> <span class="Type">0</span> matrix <span class="Statement">-&gt;</span> {{<span class="Type">1</span>}}, rules,
       <span class="Identifier">ControlActive</span>[<span class="Identifier">Max</span>[power <span class="Statement">-</span> <span class="Type">2</span>, <span class="Type">2</span>], power]]},

   <span class="Identifier">Graphics</span>[{<span class="Identifier">Dynamic</span>[<span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opacity], color}]],
     <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Dynamic</span>[<span class="Identifier">Opacity</span>[opacity]], primitives},
    ImageSize <span class="Statement">-&gt;</span> {{<span class="Type">400</span>, Large}, {<span class="Type">400</span>, Large}},
    Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background]]],

  <span class="Comment">(*declare variables here for persistence*)</span>
  {{background, bg <span class="Statement">=</span> <span class="Identifier">White</span>}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
  {{matrix1, {{<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
  {{matrix, {{<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},

  <span class="Identifier">Evaluate</span>[controls],
  Bookmarks <span class="Statement">:&gt;</span> <span class="Identifier">Evaluate</span>[bookmarks],

  LabelStyle <span class="Statement">-&gt;</span> <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>], SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
  Paneled <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SaveDefinitions <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, Alignment <span class="Statement">-&gt;</span> Center]
</pre>
                    </li>
                </ol>
            </li>
        </ol>

        <p>
        <span class="flipbookLink" name="matrix replacement 2" index="1">Cha-ching baby</span>. If Snoop Dogg ever used Mathematica, that's what square brackets in his custom font would look like. And I know what <span class="flipbookLink" name="matrix replacement 2" index="2">this one</span> reminds you of. The folds of the brain. And check out the <span class="flipbookLink" name="matrix replacement 2" index="5">Black Riddler's Question Mark</span>.
        </p>

        <br />
    </div>

    <div class="section">
        <div class="header"> <h2> Inversion </h2> </div>

        <p>
        What happens if we turn the Sierpinski triangle "inside out"? This is easy to answer because all we have to do is invert. You may be familiar with this plot of $\sin \small{\frac 1 x}$:
        </p>

            <br/>
        <center>
            <img src="img/sineinverse12.png" width="400" height="241" />
        </center>
            <br/>

        <p>
        It's typically given as an example of a function that isn't differentiable at a point (at 0 in this case). It can be seen as a composition of two functions:
        </p>

        $$\frac 1 x \longrightarrow \sin x$$

        <p>
        The important function is the first one. It inverts the entire number line around 1, mapping $[1,\infty)$ to $[1,0)$ and vice versa. The reason the plot of $\sin \small{\frac 1 x}$ looks like that is because it's essentially the regular sine function with its values from 1 to infinity all crammed between 0 and 1. In this sense, $\small{\frac 1 x \rightarrow f}$ is like a logarithmic plot on hypercrack for $\small f$.
        </p>

        <p>
        So to turn our Sierpinski triangle inside out, we can do the same thing. For each point, we invert its distance but keep it at the same angle, using $\small{\frac z {|z|}}$ to normalize the point:
        </p>

        $$z_\text{inv} = \frac 1 {|z|}\frac z {|z|} = \frac z {|z|^2}$$

        <ol class="flipbook static" name="sierpinski crest">
            <li name="image">
            <img src="img/sierpinskicrest.png" width="600" height="522" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}];

g <span class="Statement">=</span> <span class="Identifier">draw</span>[<span class="Type">2</span>];
<span class="Identifier">Show</span>[g, g <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]]
</pre>
            </li>
        </ol>

        <p>
        The radius of inversion is right at the corners of the triangle, and I've left the univerted triangle in the center. Here's what the first few construction steps of the triangle look like if we invert them:
        </p>
        
        <ol class="flipbook static" name="minisauce">
            <li name="table">
            <img src="img/sierepicminisauce1.png" width="556" height="516" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps <span class="Statement">=</span> <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]},
   <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], Transparent,
     ps, ps <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]}]];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Identifier">draw </span><span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">8</span>], <span class="Type">3</span>]]
</pre>
            </li>
        </ol>

        <p>
        Notice that we're just inverting the endpoints of the lines, not the lines-as-curves. Visually this doesn't make a difference at higher iterations:
        </p>

        <ol class="flipbook static" name="wizard saucery">
            <li name="image">
            <img src="img/sierepicsauce9.png" width="750" height="704" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], Transparent,
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}];

<span class="Identifier">Show</span>[<span class="Identifier">draw</span>[<span class="Type">10</span>], <span class="Identifier">draw</span>[<span class="Type">12</span>] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts],
   Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>}, ImageSize <span class="Statement">-&gt;</span> <span class="Type">4</span> <span class="Type">750</span>] <span class="Statement">//</span>
  Rasterize <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span>
</pre>
            </li>
        </ol>

        <p>
        What about varying the radius of inversion? You first perform the same inversion as before, but with respect to the radius:
        </p>

        $$\frac r {|z|}$$

        <p>
        Normally this would be enough to get the inverted distance, but division is performed through the lens of the unit $1$. When we perform that $\small{\frac r {|z|}}$, we "lose" the information about what the radius may have been. (This innocent-sounding thing strikes me as much more involved than it appears). If you work out what an inversion should look like on the number line you'll find that you have to scale the result back by multiplying by the radius:
        </p>

        $$\frac r {|z|} r = \frac {r^2} {|z|}$$

        <p>
        It took me a while, but eventually I realized that the edges of the triangle were being mapped to curves, and that if you continued those curves they would form circles that intersected the origin, like this:
        </p>


        <ol class="flipbook static" name="epic sauce 99">
            <li>
            <img src="img/sierepicsauce7.png" width="600" height="557" />
            </li>
            <li>
            <img src="img/sierepicsauce4.png" width="600" height="557" />
            </li>
            <li>
            <img src="img/sierepicsauce6.png" width="600" height="557" />
            </li>
        </ol>

        <p>
        What this means is that by this inversion, <i>infinite lines and circles that cross the origin are inverses of eachother</i>. This realization almost punched my brain in its face, but apparently this is well-known. In fact it's called inversive geometry. I found myself quite disappoint, however, that online descriptions presented our $r^2$ factor as part of the definition, rather than as the arithmetic consequence of the inversion operation. Son.
        </p>

        <p>
        Let's not forget we have a bountiful cornucopia from which to invert:
        </p>

        <ol class="flipbook static" name="geometric inverses">
            <li>
            <img src="img/sierinv5.png" width="509" height="474" />
            </li>
            <li>
            <img src="img/sierinv7.png" width="509" height="474" />
            </li>
            <li>
            <img src="img/sierinv8.png" width="509" height="474" />
            </li>
            <li name="source">
                <ol class="flipbook static" name="geometric inverses sources">
                <li>
                <pre style="font-size: 14px">
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{Transparent,
     <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
     <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];

<span class="Identifier">Clear</span>[invert];
<span class="Comment">(*invert[p_/;Norm[p]&lt;.0001]:={0,0};*)</span>
<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">Column</span>[<span class="Identifier">Panel</span>[<span class="Identifier">Row</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span> <span class="Statement">/@</span>
  <span class="Identifier">Table</span>[
   <span class="Identifier">draw</span>[v, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts],
   {v, <span class="Type">3</span>, <span class="Type">6</span>}, {n, <span class="Type">0</span>, <span class="Type">4</span>}]]
            </pre>
            </li>
            <li>
            <pre style="font-size: 14px">
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[<span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]]];

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">Column</span>[<span class="Identifier">Panel</span>[<span class="Identifier">Row</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span> <span class="Statement">/@</span>
  <span class="Identifier">Table</span>[
   <span class="Identifier">draw</span>[v, n]
     <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">Partition</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>]
    <span class="Statement">/.</span> <span class="Type">l_Line</span> <span class="Statement">/;</span> <span class="Identifier">MemberQ</span>[l, <span class="Identifier">Indeterminate</span>, <span class="Identifier">Infinity</span>] <span class="Statement">:&gt;</span> {},
   {v, <span class="Type">3</span>, <span class="Type">6</span>}, {n, <span class="Type">0</span>, <span class="Type">4</span>}]]
            </pre>
            </li>
            </ol>
            </li>
        </ol>

        <p>
        Those <span class="flipbookLink" name="geometric inverses" index="1">light red shades</span> are Mathematica QQing about plotting points at infinity. I thought Mathematica can do anything??? The problem is that the inverse of the origin under this scheme is essentially "everything at infinity" (from division by 0) and algebraically this inverse doesn't even have any specific 'direction' like $\pm\space\infty$ do. The easiest solution is to just <span class="flipbookLink" name="geometric inverses" index="2">leave points at (0, 0) alone</span> or <span class="flipbookLink" name="geometric inverses" index="3">remove the incident lines</span>.
        </p>

        <p>
        <b>Sidenote.</b> Notice that in <span class="flipbookLink" name="geometric inverses" index="4">this program</span> we aren't even touching our original uninverted geometric renderer, because we don't need to. Our original renderer returns a <span style="font-family: monospace">Graphics</span> structure. This structure (which you might call an M-expression) is to us a set of straightforward vector graphics directives, but is to Mathematica <i>meaningless</i> until the frontend gets ahold of it. Until then (and even afterwards) we can perform the same kinds of structural slicing and dicing that we can perform on any other structure. In this case, replacing points by their inverses.
        </p>

        <p>
        A more complete solution to our point at infinity/division by 0 problem is to put the inverse of (0, 0) not at infinity, but really far. This doesn't come out of the algebra, but we can do it in a well-behaved way because we know from which direction our lines are coming from since we're defining things as polygons:
        </p>

        <ol class="flipbook static" name="geometric inverses 2">
            <li name="table">
            <img src="img/sierinv9.png" width="509" height="462" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Comment">(*you ever see that show Long Ago and Far Away? that show was awesome*)</span>
<span class="Identifier">invertPoly</span>[<span class="Identifier">Polygon</span>[<span class="Type">pts_</span>], <span class="Type">farAway_</span><span class="Statement">:</span> <span class="Type">20000</span>] <span class="Statement">:=</span>
  <span class="Identifier">With</span>[{indQ <span class="Statement">=</span> <span class="Identifier">MemberQ</span>[<span class="Statement">#</span>, <span class="Identifier">Indeterminate</span>] <span class="Statement">&amp;</span>},
   <span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">Partition</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>] <span class="Statement">/.</span>
    {<span class="Type">_</span><span class="Statement">?</span><span class="Type">indQ</span>, <span class="Type">p_</span>} <span class="Statement">|</span> {<span class="Type">p_</span>, <span class="Type">_</span><span class="Statement">?</span><span class="Type">indQ</span>} <span class="Statement">:&gt;</span> {p, farAway <span class="Identifier">Normalize</span>[p]}];

<span class="Identifier">plotRangeInv</span>[<span class="Type">g_Graphics</span>] <span class="Statement">:=</span> PlotRange <span class="Statement">/.</span>
   <span class="Identifier">AbsoluteOptions</span>[g <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]];

<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[<span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]]];

<span class="Comment">(*if it ever came out on DVD i'd buy it like 100 times*)</span>
<span class="Identifier">drawInv</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{g <span class="Statement">=</span> <span class="Identifier">draw</span>[v, n]},
   <span class="Identifier">Show</span>[g <span class="Statement">/.</span> <span class="Type">poly_Polygon</span> <span class="Statement">:&gt;</span> <span class="Identifier">invertPoly</span>[poly],
    PlotRange <span class="Statement">-&gt;</span> <span class="Type">1.1</span> <span class="Identifier">plotRangeInv</span>[g]]];

<span class="Comment">(*lines=Cases[drawInv[6,4],Line[ps_]/;</span>
<span class="Comment">EuclideanDistance@@ps&lt;10000:&gt;Line[Sort[ps]],Infinity];</span>
<span class="Comment">Graphics[DeleteDuplicates@lines]*)</span>
</pre>
            </li>
        </ol>

        <p>
        What if, for no particular reason, we vary the exponents of the inversion formula?
        </p>

        
        $$\frac {z^{\lt {\text{insert number here}} \gt} \leftarrow {\small\text{(elementwise exponent)}}}
          {|z|^{\lt {\text{insert some other, not necessarily distinct, number here} \gt}}}$$

      <p>
      Most of the results of this were boring, but the one for $\small z^3 / {|z|^2}$ was cool:
      </p>


        <ol class="flipbook static" name="sierpinski cobra">
            <li>
            <img src="img/siercobra4.png" width="548" height="621" />
            </li>
            <li>
            <img src="img/siercobra5.png" width="600" height="273" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">^</span><span class="Type">3</span><span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}];

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Identifier">draw </span><span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">8</span>], <span class="Type">3</span>]] <span class="Statement">/.</span>
 <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]
</pre>
            </li>
        </ol>

        <p>
        See <span class="flipbookLink" name="sierpinski cobra" index="2">this one</span>. One day you're going to be driving home from work. It's going to be dark. Pitch black. All a sudden out the corner your eye you're gonna see a flash in your rear view mirror. And when you look, you're gonna see that same Black Cobra Grill on my car speeding towards you at some unspeakable number of kilometers per hour. And then I'll disappear into the night. Like an episode off an MJ's Thriller$\small\times$Knight Rider mashup.
        </p>

        <p>
        If we mangle the formula every which way we can find a lot of interesting effects:
        </p>


        <ol class="flipbook static" name="mangle 1">
            <li>
            <img src="img/sierfishie3.png" width="600" height="356" />
            </li>
            <li>
            <img src="img/sierfishie1.png" width="600" height="371" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">transform</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> (<span class="Identifier">Reverse</span>[p]<span class="Statement">.</span>p) p<span class="Statement">^</span><span class="Type">2</span><span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">drawFishie1</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">Red</span>,
    <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Thickness</span>[<span class="Statement">.</span><span class="Type">01</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">3</span>],
      <span class="Identifier">JoinForm</span>[<span class="String">&quot;Round&quot;</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>, <span class="Statement">.</span><span class="Type">6</span>]}],
    <span class="Identifier">Rotate</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span>
      <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">transform </span><span class="Statement">/@</span> pts], <span class="Type">3</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>]},
   PlotRange <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">8</span> {{<span class="Statement">-.</span><span class="Type">85</span>, <span class="Type">1.51</span>}, <span class="Statement">.</span><span class="Type">4</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1.1</span>}}];

<span class="Identifier">drawFishie2</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    Transparent, <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
    <span class="Identifier">Rotate</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span>
      <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">transform </span><span class="Statement">/@</span> pts], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>]}];
</pre>
            </li>
        </ol>

        <p>
        The self-crossings form hexagonal figures. And <span class="flipbookLink" name="mangle 1" index="2">American iconography</span>? Here's another nifty one:
        </p>

        <ol class="flipbook static" name="mangle 2">
            <li name="dagger">
            <img src="img/sierstilettooftriangulardestruction2.png" width="640" height="796" />
            </li>
            <li name="butterfly">
            <img src="img/sierbutterflyofpoisonousdeath2.png" width="640" height="728" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">transform</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> (<span class="Identifier">Reverse</span>[p]<span class="Statement">.</span>p) p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">notFishieAwwwSadFace</span>[<span class="Type">n_</span>, <span class="Type">a1_</span><span class="Statement">:</span> <span class="Type">0</span>, <span class="Type">a2_</span><span class="Statement">:</span> <span class="Type">0</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{axiom},
   axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (a1 <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

   <span class="Identifier">Graphics</span>[{Transparent, <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
     <span class="Identifier">Rotate</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span>
       <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">transform </span><span class="Statement">/@</span> pts], a2]},
    options]];

<span class="Identifier">notFishieAwwwSadFace</span>[<span class="Type">6</span>, <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>]
</pre>
            </li>
        </ol>

        <p>
        I call it the Sierpinski Stiletto of Triangular Destruction. Hell yea. Also pay heed to the <span class="flipbookLink" name="mangle 2" index="2">Sierpinski Butterfly of Poisonous Death</span>, lest yee regret it. We can also move the circle of inversion around. I was going to write a program to do only that, but before I realized it I had accidentally built this:
        </p>

        <ol class="flipbook static" name="oops 1">
            <li>
            <img src="img/sieroops2.png" width="606" height="736" />
            </li>
            <li>
            <img src="img/sieroops3.png" width="606" height="736" />
            </li>
            <li>
            <img src="img/sieroops4.png" width="606" height="736" />
            </li>
            <li>
            <img src="img/sieroops5.png" width="553" height="736" />
            </li>
            <li>
            <img src="img/sieroops7.png" width="640" height="578" />
            </li>
            <li>
            <img src="img/sieroops9.png" width="710" height="600" />
            </li>
            <li name="source">
                <ol class="flipbook static" name="oops 1 source">
                    <li name="definitions">
<pre style="font-size: 12px">
<span class="Identifier">polys</span>[<span class="Type">v_</span>, <span class="Type">n_</span>, <span class="Type">offset_</span><span class="Statement">:</span> {<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">size_</span><span class="Statement">:</span> <span class="Type">1</span>, <span class="Type">rot_</span><span class="Statement">:</span> <span class="Type">0</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (rot <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[(offset <span class="Statement">+</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>) <span class="Statement">/@</span> ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, size, n]];

<span class="Comment">(*Polygon in, Lines out /statictyping*)</span>
<span class="Identifier">invertPoly</span>[<span class="Identifier">Polygon</span>[<span class="Type">pts_</span>], <span class="Type">tf_</span>, <span class="Type">farAway_</span><span class="Statement">:</span> <span class="Type">20000</span>] <span class="Statement">:=</span>
  <span class="Identifier">With</span>[{indQ <span class="Statement">=</span> <span class="Identifier">MemberQ</span>[<span class="Statement">#</span>, <span class="Identifier">Indeterminate</span>] <span class="Statement">&amp;</span>},
   <span class="Identifier">Line </span><span class="Statement">/@</span> <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">Partition</span>[<span class="Identifier">tf </span><span class="Statement">/@</span> pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>] <span class="Statement">/.</span>
    {<span class="Type">_</span><span class="Statement">?</span><span class="Type">indQ</span>, <span class="Type">p_</span>} <span class="Statement">|</span> {<span class="Type">p_</span>, <span class="Type">_</span><span class="Statement">?</span><span class="Type">indQ</span>} <span class="Statement">:&gt;</span> {p, farAway <span class="Identifier">Normalize</span>[p]}];

d <span class="Statement">=</span> Norm;
<span class="Comment">(*d=ChessboardDistance[{0, 0},#]&amp;;*)</span>
transformationFunctions <span class="Statement">=</span> {
   <span class="Statement">#</span><span class="Statement">/</span><span class="Identifier">d</span>[<span class="Statement">#</span>]<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">&amp;</span>,
   <span class="Statement">#</span><span class="Statement">^</span><span class="Type">3</span><span class="Statement">/</span><span class="Identifier">d</span>[<span class="Statement">#</span>]<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">&amp;</span>,
   (<span class="Identifier">Reverse</span>[<span class="Statement">#</span>]<span class="Statement">.</span><span class="Statement">#</span>) <span class="Statement">#</span><span class="Statement">/</span><span class="Identifier">d</span>[<span class="Statement">#</span>] <span class="Statement">&amp;</span>,
   (<span class="Statement">#</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">^</span><span class="Type">3</span><span class="Statement">/</span><span class="Identifier">d</span>[<span class="Statement">#</span>]<span class="Statement">^</span><span class="Type">2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>,
   (<span class="Statement">#</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">/</span><span class="Identifier">d</span>[<span class="Statement">#</span>]<span class="Statement">^</span><span class="Type">2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>,
   <span class="Identifier">Round</span>[<span class="Statement">#</span>, <span class="Statement">.</span><span class="Type">05</span>] <span class="Statement">&amp;</span>};
</pre>
                    </li>
                    <li name="Manipulate">
<pre style="font-size: 12px">
<span class="Identifier">With</span>[{
  verticesC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{vertices, <span class="Type">3</span>}, <span class="Type">3</span>, <span class="Type">8</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  iterationsC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{iterations, <span class="Type">5</span>}, <span class="Type">0</span>, <span class="Type">10</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  rangeC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{range, <span class="Type">4</span>}, <span class="Type">1</span>, <span class="Type">12</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>}],
  rotC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{rot, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>}, <span class="Statement">-</span><span class="Identifier">Pi</span>, <span class="Identifier">Pi</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}],
  functionC <span class="Statement">=</span> {{tf, <span class="Identifier">transformationFunctions</span>[[<span class="Type">1</span>]], <span class="String">&quot;function&quot;</span>},
    (<span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">TraditionalForm</span><span class="Statement">@</span><span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">Trace</span>[<span class="Statement">#</span>[z]][[<span class="Type">2</span>]] <span class="Statement">&amp;</span>) <span class="Statement">/@</span> transformationFunctions,
       ControlType <span class="Statement">-&gt;</span> SetterBar},
  originalC <span class="Statement">=</span> <span class="Identifier">Control</span>[{original, {<span class="Identifier">True</span>, <span class="Identifier">False</span>}}],
  circleC <span class="Statement">=</span> <span class="Identifier">Control</span>[{circle, {<span class="Identifier">True</span>, <span class="Identifier">False</span>}}],
  opacityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{opacity, <span class="Type">1</span>}, <span class="Type">0</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  sizeC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{size, <span class="Type">1</span>}, <span class="Statement">.</span><span class="Type">001</span>, <span class="Type">4</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  offsetC <span class="Statement">=</span> {{offset, {<span class="Type">0</span>, <span class="Type">0</span>}}, Locator}},

 <span class="Identifier">Manipulate</span>[<span class="Identifier">Module</span>[{polygons},
   polygons <span class="Statement">=</span> <span class="Identifier">polys</span>[vertices,
     <span class="Identifier">ControlActive</span>[<span class="Identifier">Min</span>[<span class="Type">3</span>, iterations <span class="Statement">-</span> <span class="Type">2</span>], iterations],
     offset, size, rot];

   <span class="Identifier">Graphics</span>[{
     <span class="Identifier">If</span>[circle, {LightGray, <span class="Identifier">Circle</span>[]}],
     <span class="Identifier">If</span>[original, {<span class="Identifier">EdgeForm</span>[LightGray], {Transparent, polygons}}],
     {<span class="Identifier">Black</span>, polygons <span class="Statement">/.</span> <span class="Type">p_Polygon</span> <span class="Statement">:&gt;</span> <span class="Identifier">invertPoly</span>[p, tf]}},
    PlotRange <span class="Statement">-&gt;</span> range]],

  <span class="Identifier">Row</span>[{verticesC, iterationsC}],
  <span class="Identifier">Row</span>[{rangeC, rotC}], functionC,
  <span class="Identifier">Row</span>[{originalC, circleC, sizeC, opacityC}, <span class="String">&quot;  &quot;</span>], offsetC,
  SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]]
</pre>
                    </li>
                </ol>
            </li>
        </ol>

        <p>
        Oops. <span class="flipbookLink" name="oops 1" index="2">This hilarious function</span> doesn't allow anything inside the unit disk. It's just waiting for someone to make a Yakety Sax movie about shapes crashing into the circle and crawling around it.
        </p>
        
        <p>
        <a href="http://math.stackexchange.com/questions/204885/">Someone on the internet</a> asked an interesting question: Are there "zoom out" fractals? We know that if we zoom in on the Sierpinski triangle, we'll continue seeing detail endlessly. But are there fractals that no matter how far you zoom out, you can't get out of them?
        </p>

        <p>
        Of course there are. We can just take a quote-unquote "zoom in" fractal and place one of its points of detail <span class="flipbookLink" name="oops 1" index="3">right at the origin</span>, and then invert the fractal. Because the inverse of the origin is some kind of crazy infinity, we know that no matter how far we zoom out, we won't reach the end of the fractal. This example is really a formality though. You have a lot of liberty to make things up in math.
        </p>

        <p>
        Cornucopia.
        </p>

<ol class="flipbook static" name="geometric inverses 3">
            <li>
            <ol class="flipbook static" name="geometric inverses 3 1">
                <li>
                <img src="img/siercandy8.png" width="652" height="651" />
                </li>
                <!--li>
    <div style="width: 1890px; height: 651px; left: 50%; margin-left: -945px; position: relative;">
        <img src="img/siercandy13.png" width="1890" height="651" />
    </div>
                </li-->
                <li>
    <div style="width: 1470px; height: 651px; left: 50%; margin-left: -745px; position: relative;">
        <img src="img/siercandy9.png" width="1470" height="651" />
    </div>
                </li>
                <!--li>
                <img src="img/siercandy7.png" width="600" height="651" />
                </li-->
                <!--li>
    <div style="width: 1254px; height: 1280px; left: 50%; top: 50%; margin-top: -640px; margin-left: -627px; position: relative;">
        <img src="img/siercandy6.png" width="1254" height="1280" />
    </div>
                </li-->
                <li>
    <div style="width: 1254px; height: 1280px; left: 50%; top: 50%; margin-top: -640px; margin-left: -627px; position: relative;">
        <img src="img/siercandy12.png" width="1254" height="1280" />
    </div>
                </li>
                <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">invert</span>[<span class="Type">p_</span> <span class="Statement">/;</span> <span class="Identifier">Norm</span>[p] <span class="Statement">&lt;</span> <span class="Statement">.</span><span class="Type">0001</span>] <span class="Statement">:=</span> {<span class="Type">0</span>, <span class="Type">0</span>};
<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">df_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, <span class="Identifier">df</span>[<span class="Type">0</span>, r], depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">White</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">4</span>],
     <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">4</span>, <span class="Type">1</span><span class="Comment">(*;.6*)</span>, <span class="Type">1</span>], <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n]}]];

<span class="Identifier">candy</span>[<span class="Type">g_</span>, <span class="Type">res_</span><span class="Statement">:</span> <span class="Type">600</span>, <span class="Type">upsc_</span><span class="Statement">:</span> <span class="Type">1</span>, <span class="Type">style_</span><span class="Statement">:</span> <span class="Identifier">EdgeForm</span>[Thick]] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{a <span class="Statement">=</span> <span class="Identifier">Show</span>[g, ImageSize <span class="Statement">-&gt;</span> upsc res, Background <span class="Statement">-&gt;</span> <span class="Identifier">White</span>]},

   a <span class="Statement">=</span> a <span class="Statement">/.</span> <span class="Type">p_Polygon</span> <span class="Statement">:&gt;</span>
      {<span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">6</span>, <span class="Identifier">RandomReal</span>[], <span class="Identifier">RandomReal</span>[]], style, p};
   a <span class="Statement">=</span> <span class="Identifier">Rasterize</span>[a];

   <span class="Comment">(*move this downscale to end for different quality*)</span>
   a <span class="Statement">=</span> <span class="Identifier">ImageResize</span>[a, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span>upsc]];
   <span class="Identifier">ImageDifference</span>[a, <span class="Identifier">ImageReflect</span>[a, <span class="Identifier">Left</span>]] <span class="Statement">//</span><span class="Identifier"> ColorNegate</span>];

g <span class="Statement">=</span> <span class="Identifier">With</span>[{f <span class="Statement">=</span> (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">4</span>]]] <span class="Statement">&amp;</span>},
  <span class="Identifier">Show</span>[
   <span class="Identifier">Table</span>[<span class="Identifier">draw</span>[<span class="Comment">(*repeatedly draw to cover more possibilities*)</span>
      <span class="Identifier">RandomChoice</span>[{<span class="Type">1</span>, <span class="Type">1</span>, <span class="Statement">.</span><span class="Type">25</span>} <span class="Statement">-&gt;</span> {<span class="Type">3</span>, <span class="Type">4</span>, <span class="Type">5</span>}], f,
      <span class="Identifier">RandomChoice</span>[{<span class="Statement">.</span><span class="Type">1</span>, <span class="Type">1.5</span>} <span class="Statement">-&gt;</span> {<span class="Type">2</span>, <span class="Type">3</span>}]]
     <span class="Statement">/.</span> <span class="Type">p_Polygon</span> <span class="Statement">:&gt;</span> <span class="Identifier">Rotate</span>[p, <span class="Type">0</span><span class="Comment">(*;Pi/4*)</span>, {<span class="Type">0</span>, <span class="Type">0</span>}],
    {<span class="Type">12</span>}], Background <span class="Statement">-&gt;</span> <span class="Identifier">Black</span>, ImageSize <span class="Statement">-&gt;</span> Medium]];

<span class="Comment">(*note you can edit g in-place*)</span>
<span class="Identifier">Defer</span>[candy][g, <span class="Type">1280</span>, <span class="Type">4</span>]
</pre>
                </li>
            </ol>
            </li>
            <li>
            <ol class="flipbook static" name="geometric inverses 3 2">
                <li>
                <img src="img/siercandy11.png" width="640" height="624" />
                </li>
                <li>
                <img src="img/siercandy10.png" width="640" height="640" />
                </li>
                <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
   ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">10</span> <span class="Statement">+</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">5</span>]<span class="Statement">/</span><span class="Type">5</span>);

   <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
    <span class="Identifier">ring</span>[<span class="Statement">#</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

<span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">15</span>], <span class="Identifier">Black</span>,
   <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">5</span><span class="Comment">(*;8*)</span>]}] <span class="Statement">/.</span>
 <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts, VertexColors <span class="Statement">-&gt;</span>
   (<span class="Identifier">ColorData</span>[<span class="String">&quot;AvocadoColors&quot;</span>] <span class="Statement">/@</span> (<span class="Statement">#</span><span class="Statement">^</span><span class="Type">1.7</span> <span class="Statement">&amp;</span>) <span class="Statement">/@</span> <span class="Identifier">Norm </span><span class="Statement">/@</span> pts)]
</pre>
                </li>
            </ol>
            </li>
        </ol>

        <p>
        From what I can tell, one of the settings used to deal with division by 0 is the so-called Riemann sphere, which is where we take a space shuttle and use it to fly over and drop a cow on top of a biodome, and then have the cow indiscriminately fire laser beams at the grass inside and around the biodome. That's my intuitive understanding of it anyway.
        </p>


        <ol class="flipbook static" name="understanding the riemann sphere">
            <li name="animation">
            <img src="img/understandingtheriemannsphere.gif" width="600" height="670" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
shuttle <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
cow <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
grass <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Texture&quot;</span>, <span class="String">&quot;Grass4&quot;</span>}];
drop <span class="Statement">=</span> <span class="Identifier">Sound</span>[<span class="Identifier">Play</span>[<span class="Identifier">Sin</span>[<span class="Type">1000</span> (<span class="Type">2</span> <span class="Statement">-</span> t)<span class="Statement">^</span><span class="Type">2.3</span>], {t, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">9</span>}]];
<span class="Identifier">lazer</span>[] <span class="Statement">:=</span> <span class="Identifier">EmitSound</span>[<span class="Identifier">Sound</span>[<span class="Identifier">Play</span>[{<span class="Identifier">TriangleWave</span>[<span class="Type">10</span> (<span class="Type">2</span> <span class="Statement">-</span> t)<span class="Statement">^</span><span class="Type">5</span>],
      <span class="Identifier">Sin</span>[<span class="Type">500</span> (<span class="Type">2</span> <span class="Statement">-</span> t)<span class="Statement">^</span><span class="Type">5</span>] <span class="Statement">+</span> <span class="Identifier">SawtoothWave</span>[<span class="Type">20</span> (<span class="Type">2</span> <span class="Statement">-</span> t)<span class="Statement">^</span><span class="Type">4.99</span>]},
     {t, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">2</span>}, SampleRate <span class="Statement">-&gt;</span> <span class="Type">4000</span>]]];

<span class="Identifier">Animate</span>[<span class="Identifier">Module</span>[{dir, angle},
  <span class="Comment">(*xs animates from +30 to -60*)</span>
  <span class="Identifier">If</span>[xs <span class="Statement">&gt;</span> <span class="Type">25</span>, dropTrigger <span class="Statement">=</span> <span class="Identifier">False</span>];
  <span class="Identifier">If</span>[dropTrigger <span class="Statement">==</span> <span class="Identifier">False</span> <span class="Statement">&amp;&amp;</span> xs <span class="Statement">&lt;</span> <span class="Type">10</span>, dropTrigger <span class="Statement">=</span> <span class="Identifier">True</span>; <span class="Identifier">EmitSound</span>[drop]];
  <span class="Identifier">If</span>[xs <span class="Statement">&lt;</span> <span class="Statement">-</span><span class="Type">10</span>,
   <span class="Identifier">lazer</span>[];
   dir <span class="Statement">=</span> <span class="Identifier">RandomReal</span>[{<span class="Statement">-</span><span class="Type">15</span>, <span class="Type">15</span>}, <span class="Type">2</span>]<span class="Statement">~</span><span class="Identifier">Join</span><span class="Statement">~</span>{<span class="Statement">-</span><span class="Type">20</span>};
   angle <span class="Statement">=</span> <span class="Identifier">ArcTan </span><span class="Statement">@@</span> <span class="Identifier">Take</span>[dir, <span class="Type">2</span>], angle <span class="Statement">=</span> <span class="Type">0</span>];

  <span class="Identifier">Labeled</span>[<span class="Statement">#</span>, <span class="Identifier">Style</span>[<span class="String">&quot;Understanding the Riemann Sphere&quot;</span>, FontFamily <span class="Statement">-&gt;</span> <span class="String">&quot;Verdana&quot;</span>], Top] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">With</span>[{
     cowLoc <span class="Statement">=</span> {<span class="Identifier">Clip</span>[xs, {<span class="Type">1.3</span>, <span class="Type">50</span>}], <span class="Type">0</span>, <span class="Identifier">Clip</span>[<span class="Type">8</span> <span class="Statement">+</span> (<span class="Statement">-</span>(<span class="Statement">.</span><span class="Type">25</span> xs <span class="Statement">-</span> <span class="Type">5</span>)<span class="Statement">^</span><span class="Type">2</span>), {<span class="Statement">-</span><span class="Type">13</span>, <span class="Statement">-.</span><span class="Type">25</span>}]},
     greenLight <span class="Statement">=</span> Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Directional&quot;</span>, <span class="Identifier">Green</span>, {{<span class="Type">5</span>, <span class="Type">5</span>, <span class="Type">5</span>}, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}}}}},

    <span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
      <span class="Comment">(*shuttle*)</span>{<span class="Identifier">Specularity</span>[<span class="Identifier">White</span>, <span class="Type">7</span>], <span class="Identifier">Translate</span>[shuttle, {xs, <span class="Type">0</span>, <span class="Type">0</span>}]},
      <span class="Comment">(*cow*)</span> <span class="Identifier">Rotate</span>[<span class="Identifier">Translate</span>[<span class="Identifier">Scale</span>[cow, <span class="Type">5</span>], cowLoc], angle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}],

      <span class="Comment">(*grass*)</span> <span class="Identifier">Translate</span>[{<span class="Identifier">If</span>[<span class="Identifier">False</span>, <span class="Identifier">Sequence </span><span class="Statement">@@</span> {greenLight, <span class="Identifier">Texture</span>[grass]}, <span class="Identifier">Green</span>],
        <span class="Identifier">Polygon</span>[<span class="Type">50</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}},
         VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1.1</span> {{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">0</span>}}]},
        {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span><span class="Type">19</span>}],

      <span class="Comment">(*biodome*)</span>{<span class="Identifier">Specularity</span>[<span class="Identifier">White</span>, <span class="Type">3</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">Sphere</span>[<span class="Statement">.</span><span class="Type">95</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span><span class="Type">20</span>}, <span class="Type">5</span>]},
      <span class="Comment">(*sun*)</span>{<span class="Identifier">Glow</span>[<span class="Identifier">White</span>], <span class="Identifier">Sphere</span>[{<span class="Type">18</span>, <span class="Type">18</span>, <span class="Type">18</span>}, <span class="Type">2</span>]},
      <span class="Comment">(*laser*)</span> <span class="Identifier">If</span>[xs <span class="Statement">&lt;</span> <span class="Statement">-</span><span class="Type">10</span>, {<span class="Identifier">Red</span>, <span class="Identifier">Glow</span>[<span class="Identifier">Red</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">Tube</span>[{{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span><span class="Type">12.4</span>}, dir}]}]},
     <span class="Comment">(*sky*)</span>Background <span class="Statement">-&gt;</span> LightBlue, PlotRange <span class="Statement">-&gt;</span> <span class="Type">20</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]]],
 {xs, <span class="Type">30</span>, <span class="Statement">-</span><span class="Type">60</span>, <span class="Type">3.2</span>}, AnimationRate <span class="Statement">-&gt;</span> <span class="Type">10</span>, DisplayAllSteps <span class="Statement">-&gt;</span> <span class="Identifier">True</span>]
</pre>
            </li>
        </ol>

        <p>
        (Note the cow cannot be spherical or it will roll off). Personally I don't have any beef with Riemann or any of his manifolds, but for our purposes the Riemann sphere is inadequate since it maps our inverses vertically.  One interesting consequence of this is that in the 2D cross section where the imaginary component is zero (essentially the 'Weierstrass circle'), it maps multiplicative inverses vertically and additive inverses horizontally. This all seems mathematically expedient, but it's otherwise boring.
        </p>

        <p>
        The Riemann sphere does give one explanation though about 'why' our circles and lines are inverses. In the Riemann sphere, the inverse of a circle that crosses the origin is a circle that crosses the North Pole, and since the lasers are being shot from the North Pole, they're limited to tracing out a line as they follow the circle. I was going to make a simple 3D diagram demonstrating this, but I accidentally made this:
        </p>

        <ol class="flipbook static" name="oops 2">
            <li name="animation">
            <iframe width="656" height="369" src="http://www.youtube-nocookie.com/embed/aV8cs7324FY" frameborder="0" allowfullscreen></iframe>
            </li>
            <li name="source">

        <ol class="flipbook static" name="oops 2 source">
            <li name="definitions">
<pre style="font-size: 10px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>);
       {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

<span class="Identifier">fromRiemann</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> (<span class="Statement">-</span><span class="Type">1</span><span class="Statement">/</span>(<span class="Statement">#3</span> <span class="Statement">-</span> <span class="Type">1</span>)) {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts;

shuttle <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
cow <span class="Statement">=</span> <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
   VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]];
sphere <span class="Statement">=</span> <span class="Identifier">SphericalPlot3D</span>[<span class="Type">1</span>, {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {<span class="String">\[Phi]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="Identifier">Pi</span>},
   MeshStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">05</span>], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>]];
plane <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], LightGray, <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
   <span class="Identifier">Line</span>[{{<span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}}], <span class="Identifier">Line</span>[{{<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">50</span>, <span class="Type">0</span>}}],
   <span class="Identifier">Polygon</span>[<span class="Type">15</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}}]};

numPoints <span class="Statement">=</span> <span class="Type">160</span><span class="Statement">/</span><span class="Type">4</span>;
circle <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">25</span> {<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>], <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Statement">-</span><span class="Identifier">Pi</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[numPoints]<span class="Statement">/</span>numPoints);
rCircle <span class="Statement">=</span> <span class="Identifier">toRiemann</span>[circle];
invRCircle <span class="Statement">=</span> {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Statement">-</span><span class="Statement">#3</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> rCircle;
invCircle <span class="Statement">=</span> <span class="Identifier">Quiet</span>[<span class="Identifier">fromRiemann</span>[invRCircle]];

ind <span class="Statement">=</span> <span class="Identifier">Indeterminate</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>};
<span class="Identifier">transform</span>[<span class="String">\[Theta]</span><span class="Type">_</span>] <span class="Statement">:=</span> <span class="Identifier">Composition</span>[
   <span class="Identifier">RotationTransform</span>[<span class="String">\[Theta]</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}],
   <span class="Identifier">TranslationTransform</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}]];
{l, r} <span class="Statement">=</span> {{<span class="Statement">.</span><span class="Type">335</span>, <span class="Statement">-.</span><span class="Type">044</span>, <span class="Statement">.</span><span class="Type">1894</span>}, {<span class="Statement">.</span><span class="Type">335</span>, <span class="Statement">.</span><span class="Type">044</span>, <span class="Statement">.</span><span class="Type">1894</span>}};
</pre>
            </li>
            <li name="Graphics">
<pre style="font-size: 10px">
slides <span class="Statement">=</span> <span class="Identifier">ParallelTable</span>[<span class="Identifier">Module</span>[{angle},
    angle <span class="Statement">=</span> <span class="Identifier">Quiet</span>[<span class="Identifier">ArcTan </span><span class="Statement">@@</span> (invCircle <span class="Statement">/.</span> ind <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>})[[pti, <span class="Type">1</span> ;; <span class="Type">2</span>]] <span class="Statement">/.</span>  <span class="Identifier">ArcTan</span>[<span class="Type">0</span>, <span class="Type">0</span>] <span class="Statement">-&gt;</span> <span class="Type">0</span>];
    <span class="Identifier">Show</span>[sphere,
     <span class="Identifier">Graphics3D</span>[{
       plane, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">7</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, <span class="Statement">.</span><span class="Type">01</span>],
       <span class="Comment">(*cow*)</span> <span class="Identifier">Rotate</span>[<span class="Statement">#</span>, angle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
        {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],<span class="Comment">(*Opacity[.999],*)</span><span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]],
         Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, <span class="Identifier">Darker</span>[<span class="Identifier">Red</span>], l}},
         cow, <span class="Identifier">Red</span>, <span class="Identifier">Glow</span>[<span class="Identifier">Red</span>], <span class="Identifier">Sphere</span>[{l, r}, <span class="Statement">.</span><span class="Type">01</span>]},
       <span class="Comment">(* keep shuttle in orbit in case need more cows *)</span>
       {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Translate</span>[shuttle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">100</span>}]},
       <span class="Comment">(*lazerz*)</span> <span class="Identifier">If</span>[<span class="Identifier">invCircle</span>[[pti]] <span class="Statement">=!=</span> ind, {<span class="Identifier">Red</span>,
         <span class="Identifier">Line</span>[{<span class="Identifier">transform</span>[angle][l], <span class="Identifier">invCircle</span>[[pti]]}],
         <span class="Identifier">Line</span>[{<span class="Identifier">transform</span>[angle][r], <span class="Identifier">invCircle</span>[[pti]]}],
         {<span class="Identifier">Red</span>, <span class="Identifier">Glow</span>[<span class="Identifier">Red</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Sphere</span>[<span class="Identifier">invCircle</span>[[pti]], <span class="Statement">.</span><span class="Type">02</span> <span class="Identifier">RandomReal</span>[]]}}],
       <span class="Comment">(*etc*)</span> {<span class="Identifier">Lighter</span>[<span class="Identifier">Gray</span>], Dashed, <span class="Identifier">Line</span>[{<span class="Identifier">rCircle</span>[[pti]], <span class="Identifier">invRCircle</span>[[pti]]}]},
       {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Line</span>[circle]},
       {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Line</span>[<span class="Identifier">Take</span>[circle, pti]]},
       {<span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Line</span>[{{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, <span class="Type">50</span> (<span class="Statement">-</span>{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>} <span class="Statement">+</span> <span class="Identifier">circle</span>[[pti]])}]},
       {<span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Line</span>[<span class="Identifier">Take</span>[rCircle, pti]]},
       {<span class="Identifier">Red</span>, <span class="Identifier">Line</span>[<span class="Identifier">Take</span>[invRCircle, pti]]},
       <span class="Comment">(*Purple,Line[{{0,0,1},50(-{0,0,1}+invCircle[[pti]])}/.tride-&gt;{0,0,1}],*)</span>
       <span class="Comment">(*burn mark*)</span> Thick, <span class="Identifier">Red</span>, <span class="Identifier">Line</span>[<span class="Identifier">DeleteCases</span>[<span class="Identifier">Take</span>[invCircle, pti], ind]]}],
     ImageSize <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span> {<span class="Type">16</span>, <span class="Type">9</span>} (<span class="Type">1080</span><span class="Statement">/</span><span class="Type">9</span>),
     ViewAngle <span class="Statement">-&gt;</span> <span class="Type">4</span> <span class="Identifier">Degree</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">10</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]],
   {pti, <span class="Type">1</span>, <span class="Identifier">Length</span>[circle]}];
<span class="Identifier">ListAnimate</span>[slides]
</pre>
            </li>
        </ol>

            </li>
        </ol>

        <p>
        Oops. But since we now have this tool, let's see what other plots look like:
        </p>

        <ol class="flipbook static" name="oops 3">
            <li>
            <img src="img/siercowsine3.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siercowsine1.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siercowtangent1.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siercowajous2.png" width="640" height="640" />
            </li>
            <!--li>
            <img src="img/riemanncowsine.png" width="600" height="600" />
            </li>
            <li>
            <img src="img/riemanninvsine.png" width="600" height="600" />
            </li>
            <li>
            <img src="img/riemanncowtan.png" width="600" height="600" />
            </li>
            <li>
            <h4> Lissajous figure </h4>
            <img src="img/riemanncowajous3.png" width="600" height="600" />
            </li-->
            <li name="source">
<pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>);
       {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

shuttle <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
cow <span class="Statement">=</span> <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
   VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]];
sphere <span class="Statement">=</span> <span class="Identifier">SphericalPlot3D</span>[<span class="Type">1</span>, {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {<span class="String">\[Phi]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="Identifier">Pi</span>},
   MeshStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">05</span>], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>]];
plane <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], LightGray, <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
   <span class="Identifier">Line</span>[{{<span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}}], <span class="Identifier">Line</span>[{{<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">50</span>, <span class="Type">0</span>}}],
   <span class="Identifier">Polygon</span>[<span class="Type">15</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}}]};

<span class="Identifier">listRiemannPlot</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{rPts <span class="Statement">=</span> <span class="Identifier">toRiemann</span>[pts]},
   <span class="Identifier">Show</span>[
    sphere,
    <span class="Identifier">Graphics3D</span>[{
      plane, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">7</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, <span class="Statement">.</span><span class="Type">01</span>],

      <span class="Comment">(*cow*)</span><span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
       {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],<span class="Comment">(*Opacity[.999],*)</span>
        <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, cow},

      <span class="Comment">(*shuttle*)</span>{<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Translate</span>[shuttle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">100</span>}]},
      <span class="Comment">(*original*)</span>{<span class="Identifier">Opacity</span>[<span class="Type">2</span> <span class="Statement">.</span><span class="Type">2</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Line</span>[pts]},
      <span class="Comment">(*riemannized*)</span>{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">8</span>], <span class="Identifier">Blue</span>, <span class="Identifier">Line</span>[rPts]}}],

    ViewAngle <span class="Statement">-&gt;</span> <span class="Type">4</span> <span class="Identifier">Degree</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">10</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Identifier">listRiemannPlot</span>[<span class="Identifier">Table</span>[{x, <span class="Identifier">Sin</span>[<span class="Type">2</span> x], <span class="Type">0</span>}, {x, <span class="Statement">-</span><span class="Type">40</span> <span class="Identifier">Pi</span>, <span class="Type">40</span> <span class="Identifier">Pi</span>, <span class="Statement">.</span><span class="Type">01</span>}]]
</pre>
            </li>
        </ol>

        <p>
        I call <span class="flipbookLink" name="oops 3" index="1">this one</span> the Riemann cowsine, sort of like cosine but with "cow" instead of "co". <span class="flipbookLink" name="oops 3" index="2">This one</span> is $\small{\frac 1 {2 \sin(2x)}}$. If you've seen the tangent function, you know it has a lot of infinities, which means the cowtangent is going to have <span class="flipbookLink" name="oops 3" index="3">a lot of circles</span>. I suppose the fact that the circles enter and exit the north pole without being deflected is a result of the asymptotic behavior of the function being the same going up as going down. Come to think of it, those circles are more like a continous infinity symbol that goes in infinitely on itself. And look:
        </p>

        <!--ol class="flipbook static" name="oops 5">
            <li>
            <img src="img/riemanncycowtron1.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/riemanncycowtron2.png"
            title="color inversion; the instant noodle of the art world" width="700" height="394" />
            </li>
            <li>
            <img src="img/riemanncycowtron3.png" width="677" height="677" />
            </li>
            <li name="source">
            <ol class="flipbook static" name="oops 5 source">
                <li>
<pre>
<span class="Comment">(* extract data from pasted snapshot. definitely lazy *)</span>
<span class="Identifier">DynamicModule</span>[{color <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">438</span>, <span class="Statement">.</span><span class="Type">308</span>, <span class="Type">1</span>],
   effect <span class="Statement">=</span> <span class="Type">0</span><span class="Statement">.</span>, inflection <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, spirality <span class="Statement">=</span> <span class="Type">0.852</span>,
   thickness <span class="Statement">=</span> <span class="Type">0</span><span class="Statement">.</span>, x <span class="Statement">=</span> <span class="Type">4.5</span>, y <span class="Statement">=</span> <span class="Type">1.426</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Type">2</span>},
  <span class="Identifier">Module</span>[{<span class="String">\[Psi]</span>$ <span class="Statement">=</span> <span class="Identifier">Round</span>[<span class="Identifier">Abs</span>[<span class="Identifier">FractionalPart</span>[<span class="String">\[Zeta]</span>]] <span class="Type">1</span>, <span class="Statement">.</span><span class="Type">25</span>] <span class="Statement">/.</span>
    {<span class="Type">0</span><span class="Statement">.</span> <span class="Statement">-&gt;</span> y, <span class="Statement">.</span><span class="Type">5</span> <span class="Statement">-&gt;</span> y<span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">.</span><span class="Type">25</span> <span class="Statement">|</span> <span class="Statement">.</span><span class="Type">75</span> <span class="Statement">-&gt;</span> y<span class="Statement">/</span><span class="Type">4</span>}},
   spiral <span class="Statement">=</span> <span class="Identifier">ParametricPlot</span>[(<span class="Type">1</span> <span class="Statement">+</span> spirality (<span class="Identifier">Log</span>[<span class="String">\[Theta]</span> <span class="Statement">+</span> <span class="Type">1</span>] <span class="Statement">-</span>
           <span class="Type">1</span>)) {<span class="String">\[Psi]</span>$ <span class="Identifier">Cos</span>[<span class="String">\[Theta]</span>] <span class="Statement">+</span> x <span class="Identifier">Cos</span>[<span class="Type">64</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> ((<span class="Type">1</span> <span class="Statement">-</span>
             effect <span class="Identifier">RandomReal</span>[]) <span class="String">\[Zeta]</span>) (<span class="Identifier">Cos</span>[<span class="Type">512</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span>
           <span class="Identifier">Cos</span>[(<span class="Type">64</span> <span class="String">\[Zeta]</span>) <span class="String">\[Theta]</span>]), <span class="String">\[Psi]</span>$ <span class="Identifier">Sin</span>[<span class="String">\[Theta]</span>] <span class="Statement">-</span>
        x <span class="Identifier">Sin</span>[<span class="Type">64</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> (((<span class="Type">1</span> <span class="Statement">-</span> effect <span class="Identifier">RandomReal</span>[]) inflection)
               <span class="String">\[Zeta]</span>) (<span class="Identifier">Sin</span>[ <span class="Type">512</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span>
           <span class="Identifier">Sin</span>[(<span class="Type">64</span> <span class="String">\[Zeta]</span>) <span class="String">\[Theta]</span>])}, {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="String">\[Pi]</span>},
     PlotStyle <span class="Statement">-&gt;</span> {color, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">43</span>]}, PlotRange <span class="Statement">-&gt;</span> Full,
     <span class="Comment">(*adjust for finer detail*)</span> PlotPoints <span class="Statement">-&gt;</span> <span class="Type">570</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>]]];
<span class="Comment">(* extract points *)</span> spiral <span class="Statement">/.</span> <span class="Identifier">Line</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> (spiralPts <span class="Statement">=</span> pts);
</pre>
                </li>
                <li>
<pre>
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span>[[<span class="Type">1</span>]]<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Statement">#</span>[[<span class="Type">2</span>]]<span class="Statement">^</span><span class="Type">2</span>);
       {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];
cow <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>] <span class="Statement">/.</span> {
    <span class="Identifier">GraphicsComplex</span>[<span class="Type">h___</span>] <span class="Statement">:&gt;</span> <span class="Identifier">GraphicsComplex</span>[h,
      VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span>
        <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};
<span class="Identifier">listRiemannPlot</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{rPts <span class="Statement">=</span> <span class="Identifier">toRiemann</span>[pts]},
   <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Translate</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]],
       Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
       Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, LightGreen, {<span class="Statement">.</span><span class="Type">335</span>, <span class="Statement">-.</span><span class="Type">044</span>, <span class="Statement">.</span><span class="Type">1894</span>}}},
       cow}, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}],
     {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">3</span>], <span class="Identifier">Lighter</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Green</span>, <span class="Identifier">Line</span>[pts]},
     {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">2</span>], <span class="Identifier">Blend</span>[{<span class="Identifier">Green</span>, <span class="Identifier">Yellow</span>}], <span class="Identifier">Line</span>[rPts]}},
    ViewAngle <span class="Statement">-&gt;</span> <span class="Type">6</span> <span class="Identifier">Degree</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">10</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];
<span class="Identifier">listRiemannPlot</span>[<span class="Statement">.</span><span class="Type">4</span> {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> spiralPts]
</pre>
                </li>
            </ol>
            </li>
        </ol-->

        <ol class="flipbook static" name="oops 4">
            <li name="image">
            <img src="img/sierellipticcowve3.png" width="640" height="570" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>);
       {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

shuttle <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
cow <span class="Statement">=</span> <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
   VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]];
sphere <span class="Statement">=</span> <span class="Identifier">SphericalPlot3D</span>[<span class="Type">1</span>, {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {<span class="String">\[Phi]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="Identifier">Pi</span>},
   MeshStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">05</span>], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>]];
plane <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], LightGray, <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
   <span class="Identifier">Line</span>[{{<span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}}], <span class="Identifier">Line</span>[{{<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">50</span>, <span class="Type">0</span>}}],
   <span class="Identifier">Polygon</span>[<span class="Type">15</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}}]};

<span class="Identifier">riemannize</span>[<span class="Identifier">Graphics</span>[<span class="Type">g_</span>, <span class="Type">rest___</span>], <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Show</span>[sphere,
   <span class="Identifier">Graphics3D</span>[{plane,
     <span class="Comment">(*cow*)</span><span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
      {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
       <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, cow},
     <span class="Comment">(*shuttle*)</span><span class="Identifier">Translate</span>[shuttle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">100</span>}],
     <span class="Comment">(*curves*)</span>g <span class="Statement">/.</span> <span class="Identifier">Line</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> {<span class="Identifier">Line</span>[<span class="Identifier">toRiemann</span>[pts]],
        <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">25</span>], <span class="Identifier">Line</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts]}}],
   Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">5</span>, options];

plot <span class="Statement">=</span> <span class="Identifier">Plot</span>[
   <span class="Identifier">Evaluate</span>[y <span class="Statement">/.</span> <span class="Identifier">Solve</span>[y<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">==</span> x<span class="Statement">^</span><span class="Type">3</span> <span class="Statement">-</span> <span class="Type">3</span> x <span class="Statement">+</span> <span class="Type">1</span>, y]],
   {x, <span class="Statement">-</span><span class="Type">100</span>, <span class="Type">100</span>}, PlotPoints <span class="Statement">-&gt;</span> <span class="Type">10000</span>];

<span class="Identifier">riemannize</span>[plot, ViewAngle <span class="Statement">-&gt;</span> <span class="Type">15</span> <span class="Identifier">Degree</span>]
</pre>
            </li>
        </ol>

        <p>
        This is one of those fangled elliptic curves. Apparently they do form pairs of circle things on the Riemann sphere. I thought that was just an old wive's tale. The nice thing about <span class="flipbookLink" name="oops 4" index="2">this program</span> is that it works on <span style="font-family: monospace">Graphics</span> structures, such as those returned by <span style="font-family: monospace">Plot</span>. That means you can plug arbitrary 2D plots and graphics into this function and have them automatically Riemannized. Like say you're trying to educe from without your incorrigible students' crania some particular factoid:
        </p>

        <ol class="flipbook static" name="oops 6">
            <li>
            <img src="img/sierellipticcowve1.png" width="525" height="325" />
            </li>
            <li>
            <img src="img/sierellipticcowve4.png" width="640" height="440" />
            </li>
            <li>
            <img src="img/riemannellipticcowve4.png" width="442" height="469" />
            </li>
            <li name="source">
            <pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>); {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

shuttle <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>];
cow <span class="Statement">=</span> <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
   VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]];
sphere <span class="Statement">=</span> <span class="Identifier">SphericalPlot3D</span>[<span class="Type">1</span>, {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {<span class="String">\[Phi]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="Identifier">Pi</span>},
   MeshStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">05</span>], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>]];
plane <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], LightGray, <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
   <span class="Identifier">Line</span>[{{<span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">50</span>, <span class="Type">0</span>, <span class="Type">0</span>}}], <span class="Identifier">Line</span>[{{<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">50</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">50</span>, <span class="Type">0</span>}}],
   <span class="Identifier">Polygon</span>[<span class="Type">15</span> {{<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">0</span>}}]};

<span class="Identifier">riemannize</span>[<span class="Identifier">Graphics</span>[<span class="Type">g_</span>, <span class="Type">___</span>], <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Show</span>[sphere,
   <span class="Identifier">Graphics3D</span>[{plane,
     <span class="Comment">(*cow*)</span><span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
      {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],<span class="Comment">(*Opacity[.999],*)</span>
       <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, cow},
     <span class="Comment">(*shuttle*)</span><span class="Identifier">Translate</span>[shuttle, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">100</span>}],
     <span class="Comment">(*curves*)</span>g <span class="Statement">/.</span> <span class="Identifier">Line</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> {<span class="Identifier">Line</span>[<span class="Identifier">toRiemann</span>[pts]],
        <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">25</span>], <span class="Identifier">Line</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts]}}],
   Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">5</span>, options];

vint <span class="Statement">=</span> <span class="Identifier">Sqrt</span>[<span class="Type">1</span> <span class="Statement">-</span> <span class="Type">3</span><span class="Statement">/</span><span class="Type">2</span> (<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Sqrt</span>[<span class="Type">21</span>]) <span class="Statement">+</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">8</span> (<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Sqrt</span>[<span class="Type">21</span>])<span class="Statement">^</span><span class="Type">3</span>];
plot <span class="Statement">=</span> <span class="Identifier">Show</span>[<span class="Identifier">Plot</span>[y <span class="Statement">/.</span> <span class="Identifier">Solve</span>[y<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">==</span> x<span class="Statement">^</span><span class="Type">3</span> <span class="Statement">-</span> <span class="Type">3</span> x <span class="Statement">+</span> <span class="Type">1</span>, y], {x, <span class="Statement">-</span><span class="Type">100</span>, <span class="Type">100</span>}, PlotPoints <span class="Statement">-&gt;</span> <span class="Type">10000</span>],
   <span class="Identifier">Graphics</span>[{<span class="Identifier">Orange</span>, <span class="Identifier">Line</span>[<span class="Identifier">Table</span>[{x, x <span class="Statement">+</span> <span class="Type">1</span>}, {x, <span class="Statement">-</span><span class="Type">500</span>, <span class="Type">500</span>, <span class="Statement">.</span><span class="Type">1</span>}]],
     <span class="Identifier">Black</span>, <span class="Identifier">Dashing</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">10</span> {<span class="Type">0.08</span>, <span class="Type">0.02</span>}],
     <span class="Identifier">Line</span>[<span class="Identifier">Table</span>[{<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span> (<span class="Type">1</span> <span class="Statement">+</span> <span class="Identifier">Sqrt</span>[<span class="Type">21</span>]), y}, {y, <span class="Statement">-</span>vint, vint, <span class="Statement">.</span><span class="Type">1</span>}]]}]];

<span class="Identifier">riemannize</span>[plot, ViewAngle <span class="Statement">-&gt;</span> <span class="Type">8</span> <span class="Identifier">Degree</span>]
</pre>
            </li>
        </ol>

        <p>
        You've set this up with 2D graphics. But you can just plug the output of this into our Riemannizer to get <span class="flipbookLink" name="oops 6" index="2">this</span>. In fact in Mathematica you can even copy/paste the 2D plot (itself an interactwithable vector object) <span class="flipbookLink" name="oops 6" index="3">like this</span>. And you can vector-edit that plot in-place and when you re-evaluate the expression, the differences will appear in the Riemannization. Not bad for what essentially amounts to one line of code:
        </p>

        <center>
<pre>
g <span class="Statement">/.</span> <span class="Identifier">Line</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Line</span>[<span class="Identifier">toRiemann</span>[pts]]
</pre>
        </center>

        <p>
        This is the power of Mathematica's macro-at-will symbolic semantics and well-curated architecture. Specifically in this case, it's the fact that the built-in plotting functions return the same laid-bare <span style="font-family: monospace">Graphics</span> vector structures that your own versions of those functions would return. This Riemannizer only does a direct endpoint conversion of lines, but you can easily have it 3Dify whatever you want in a more thorough fashion.
        </p>

        <p>
        After I made my <a href="page2.htm#cyclotron4000">Cyclotron 4000</a> masterpiece, I considered what a version 2 might be. Now I know. With some adjustments to the contraption, we now have the Cycowtron 4800 Deluxe (pronounced psy-cow-tron forty-eight-hundred de-lux):
        </p>


        <ol class="flipbook static" name="cycowtron 4800 deluxe">
            <li>
            <img src="img/cycow2.png" width="689" height="669" />
            </li>
            <li>
            <img src="img/cycow8.png" width="689" height="669" />
            </li>
            <li>
            <img src="img/cycow7.png" width="689" height="669" />
            </li>
            <li>
            <img src="img/cycow6.png" width="689" height="669" />
            </li>
            <li>
            <img src="img/cycow5.png" width="670" height="670" />
            </li>
            <li>
            <img src="img/cycow4.png" width="669" height="669" />
            </li>
            <li name="source">

        <ol class="flipbook static" name="cycowtron 4800 deluxe source">
            <li name="definitions">
<pre style="font-size: 5px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>); {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

<span class="Identifier">invertRiemann</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Statement">-</span><span class="Statement">#3</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts;
<span class="Comment">(*fromRiemann[pts_]:=(-1/(#3-1)) {#1,#2,0}&amp;@@@pts;*)</span>

shuttle <span class="Statement">=</span> <span class="Identifier">With</span>[{shuttleGC <span class="Statement">=</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;SpaceShuttle&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>]},
   <span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">100</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
    {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
     <span class="Identifier">Append</span>[shuttleGC, VertexColors <span class="Statement">-&gt;</span> <span class="Identifier">RandomReal</span>[<span class="Statement">.</span><span class="Type">65</span> <span class="Statement">+</span> {<span class="Type">0</span>, <span class="Type">1</span>}, <span class="Identifier">Length</span>[<span class="Identifier">shuttleGC</span>[[<span class="Type">1</span>]]]]<span class="Statement">^</span><span class="Type">2</span>]}];

cow <span class="Statement">=</span> <span class="Identifier">Translate</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
   {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],<span class="Comment">(*Opacity[.999],*)</span><span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
    <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
     VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

allSettings <span class="Statement">=</span> {<span class="String">&quot;sphere&quot;</span>, <span class="String">&quot;cow&quot;</span>, <span class="String">&quot;original&quot;</span>, <span class="String">&quot;riemann&quot;</span>, <span class="String">&quot;inverse&quot;</span>, <span class="String">&quot;shuttle&quot;</span>};

bookmarks <span class="Statement">=</span> {
   <span class="String">&quot;Random&quot;</span> <span class="Statement">:&gt;</span> (
     <span class="Identifier">With</span>[{R <span class="Statement">:=</span> <span class="Identifier">RandomReal</span>[]},
      color <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[R, R, R];
      inflection <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{<span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>}];
      effect <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">25</span><span class="Statement">*</span>R<span class="Statement">^</span><span class="Type">8</span>; thickness <span class="Statement">=</span> <span class="Type">10</span><span class="Statement">*</span>R<span class="Statement">^</span><span class="Type">8</span>;
      spirality <span class="Statement">=</span> R<span class="Statement">^</span><span class="Type">3</span>;
      <span class="Identifier">If</span>[spirality <span class="Statement">&lt;</span> <span class="Statement">.</span><span class="Type">035</span>, spirality <span class="Statement">=</span> <span class="Type">0</span>];
      x <span class="Statement">=</span> <span class="Type">12</span> R; y <span class="Statement">=</span> <span class="Type">2</span> R];

     <span class="Identifier">Module</span>[{weights <span class="Statement">=</span> <span class="Identifier">If</span>[x <span class="Statement">&gt;</span> <span class="Type">3</span>, {<span class="Statement">.</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">03</span>, <span class="Statement">.</span><span class="Type">87</span>}, {<span class="Statement">.</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">07</span>, <span class="Statement">.</span><span class="Type">83</span>}]},
      <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}]<span class="Statement">*</span>
        <span class="Identifier">RandomChoice</span>[weights <span class="Statement">-&gt;</span> {
           <span class="Identifier">RandomReal</span>[{<span class="Type">0</span>, <span class="Type">7.5</span>}],
           <span class="Identifier">RandomChoice</span>[{<span class="Type">0</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">5</span>}],
           <span class="Identifier">Round</span>[<span class="Identifier">RandomReal</span>[{<span class="Type">1</span>, <span class="Type">7.5</span>}], <span class="Statement">.</span><span class="Type">5</span>]}]]),

   <span class="String">&quot;Rose&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">Red</span>, effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">0</span>, y <span class="Statement">=</span> <span class="Type">1.1343</span>, spirality <span class="Statement">=</span> <span class="Type">0</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Type">3</span>},
   <span class="String">&quot;Glyph&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">Black</span>, effect <span class="Statement">=</span> <span class="Type">0.198</span>, inflection <span class="Statement">=</span> <span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">5.2</span>, y <span class="Statement">=</span> <span class="Type">0</span>, spirality <span class="Statement">=</span> <span class="Type">0</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Type">2</span>},
   <span class="String">&quot;Mass Atomic&quot;</span> <span class="Statement">:&gt;</span> { effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">5.84</span>, y <span class="Statement">=</span> <span class="Type">0.412</span>, spirality <span class="Statement">=</span> <span class="Type">0</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">4.2504</span>},
   <span class="String">&quot;Jello&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">Red</span>, effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">12</span>, y <span class="Statement">=</span> <span class="Type">0.846</span>, spirality <span class="Statement">=</span> <span class="Type">1</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>},
   <span class="String">&quot;Grim&quot;</span> <span class="Statement">:&gt;</span> {thickness <span class="Statement">=</span> <span class="Type">3.35</span>, color <span class="Statement">=</span> <span class="Identifier">Black</span>, effect <span class="Statement">=</span> <span class="Type">0.0675</span>, inflection <span class="Statement">=</span> <span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">8</span>, y <span class="Statement">=</span> <span class="Type">0.296</span>, spirality <span class="Statement">=</span> <span class="Type">1</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>},
   <span class="String">&quot;Angelwings&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">07694</span>, <span class="Statement">.</span><span class="Type">39046</span>, <span class="Type">1</span>], effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Type">1</span>, spirality <span class="Statement">=</span> <span class="Type">1</span>, x <span class="Statement">=</span> <span class="Type">12</span>, y <span class="Statement">=</span> <span class="Type">0</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">5.4947</span>},
   <span class="String">&quot;Rollers&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">Black</span>, effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">1</span>, spiral3ity <span class="Statement">=</span> <span class="Type">0</span>, x <span class="Statement">=</span> <span class="Type">5.5</span>, y <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">1</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">0.984032039033508</span>},
   <span class="String">&quot;Lifespark&quot;</span> <span class="Statement">:&gt;</span> {color <span class="Statement">=</span> <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">1026</span>, <span class="Statement">.</span><span class="Type">9878</span>, <span class="Statement">.</span><span class="Type">0201</span>], effect <span class="Statement">=</span> <span class="Type">0</span>, inflection <span class="Statement">=</span> <span class="Type">1</span>, spirality <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">0995</span>, x <span class="Statement">=</span> <span class="Type">3.2757</span>, y <span class="Statement">=</span> <span class="Statement">.</span><span class="Type">2002</span>, <span class="String">\[Zeta]</span> <span class="Statement">=</span> <span class="Statement">-</span><span class="Type">5.5</span>}};       
</pre>
            </li>
            <li name="Manipulate">
<pre style="font-size: 5px">
<span class="Identifier">With</span>[{
  colorC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{color, <span class="Identifier">Black</span>, <span class="String">&quot;line color&quot;</span>}, ColorSlider}],
  backgroundC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{background, <span class="Identifier">White</span>}, ColorSlider}],
  thicknessC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{thickness, <span class="Statement">.</span><span class="Type">001</span>, <span class="String">&quot;line thickness&quot;</span>}, <span class="Statement">.</span><span class="Type">001</span>, <span class="Type">10</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  effectC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{effect, <span class="Type">0</span><span class="Statement">.</span>, <span class="String">&quot;charcoal effect&quot;</span>}, <span class="Type">0</span>, <span class="Statement">.</span><span class="Type">25</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  inflectionC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{inflection, <span class="Type">1</span>}, {<span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="String">&quot; concave &quot;</span>, <span class="Statement">-</span><span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="String">&quot; convex &quot;</span>}, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Vertical&quot;</span>}],
  angularityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{<span class="String">\[Zeta]</span>, <span class="Type">2</span><span class="Statement">.</span>, <span class="String">&quot;angularity&quot;</span>}, <span class="Statement">-</span><span class="Type">7.5</span>, <span class="Type">7.5</span>, <span class="Statement">.</span><span class="Type">5</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  tensionC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{x, <span class="Type">8</span><span class="Statement">.</span>, <span class="String">&quot;tension&quot;</span>}, <span class="Type">0</span>, <span class="Type">12</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  yC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{y, <span class="Type">2</span><span class="Statement">.</span>, <span class="String">&quot;cycle width&quot;</span>}, <span class="Type">0</span>, <span class="Type">2</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}],
  spiralityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{spirality, <span class="Type">0</span><span class="Statement">.</span>}, <span class="Type">0</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Tiny}],
  scaleC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{scale, <span class="Type">3.157</span>, <span class="String">&quot;sphere size&quot;</span>}, <span class="Statement">.</span><span class="Type">00001</span>, <span class="Type">15</span>, ImageSize <span class="Statement">-&gt;</span> Medium}],
  settingsC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{settings, <span class="Identifier">Take</span>[allSettings, <span class="Type">4</span>], <span class="String">&quot;view&quot;</span>}, allSettings, ControlType <span class="Statement">-&gt;</span> TogglerBar}],
  opacityC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{opacity, <span class="Statement">.</span><span class="Type">43</span>}, <span class="Type">0</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small}],
  resetC <span class="Statement">=</span> <span class="Identifier">DynamicWrapper</span>[
    <span class="Identifier">Tooltip</span>[<span class="Identifier">Setter</span>[<span class="Identifier">Dynamic</span>[reset], <span class="String">&quot;reset&quot;</span>], <span class="String">&quot;reset perspective&quot;</span>, TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>],
    <span class="Identifier">If</span>[reset <span class="Statement">===</span> <span class="String">&quot;reset&quot;</span>, (reset <span class="Statement">=</span> <span class="Identifier">False</span>; vp <span class="Statement">=</span> {<span class="Type">1.3</span>, <span class="Statement">-</span><span class="Type">2.4</span>, <span class="Type">2</span>}; vv <span class="Statement">=</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}; {va, vc} <span class="Statement">=</span> <span class="Identifier">Automatic</span> {<span class="Type">1</span>, <span class="Type">1</span>})]]},

 <span class="Identifier">With</span>[{
   controls <span class="Statement">=</span> <span class="Identifier">Sequence</span>[
     <span class="Identifier">OpenerView</span>[{<span class="String">&quot;Style&quot;</span>,
       <span class="Identifier">Column</span>[{
         <span class="Identifier">Row</span>[{
           <span class="Identifier">Column</span>[{backgroundC, colorC}, Alignment <span class="Statement">-&gt;</span> <span class="Identifier">Right</span>],
           <span class="Identifier">Column</span>[{effectC, thicknessC, opacityC}, Alignment <span class="Statement">-&gt;</span> <span class="Identifier">Right</span>]},
          <span class="Identifier">Spacer</span>[<span class="Type">30</span>]],
         <span class="Identifier">Style</span>[<span class="String">\[HorizontalLine]</span>, <span class="Identifier">Lighter</span>[LightGray]]}, Spacings <span class="Statement">-&gt;</span> <span class="Type">0</span>]}],
     <span class="Identifier">Row</span>[{scaleC, <span class="Identifier">Spacer</span>[<span class="Type">30</span>], settingsC}],
     <span class="Identifier">Row</span>[{inflectionC, <span class="Identifier">Spacer</span>[<span class="Type">30</span>],
       <span class="Identifier">Column</span>[{angularityC, tensionC}],
       <span class="Identifier">Column</span>[{yC, spiralityC}], <span class="Identifier">Spacer</span>[<span class="Type">30</span>], resetC}]],

   storedVars <span class="Statement">=</span> <span class="Identifier">Sequence </span><span class="Statement">@@</span> ({{<span class="Statement">#</span>, <span class="Identifier">Automatic</span>}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>} <span class="Statement">&amp;</span> <span class="Statement">/@</span> {vp, vv, va, vc}),
   dynamicView <span class="Statement">=</span> <span class="Identifier">Sequence</span>[
     ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv],
     ViewAngle <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[va], ViewCenter <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vc]]},

  (<span class="Statement">#</span> <span class="Statement">/.</span> <span class="Identifier">switch</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:&gt;</span> <span class="Comment">(*macro*)</span>
       <span class="Identifier">Unevaluated</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">If</span>[<span class="Identifier">MemberQ</span>[settings, a], b, {}]]] <span class="Statement">&amp;</span>)<span class="Statement">@</span>
   <span class="Identifier">Manipulate</span>[
    <span class="Identifier">DynamicModule</span>[{g, lines, riemannLines, invertedLines,
      <span class="String">\[Psi]</span> <span class="Statement">=</span> <span class="Identifier">Round</span>[<span class="Identifier">Abs</span>[<span class="Identifier">FractionalPart</span>[<span class="String">\[Zeta]</span>]]<span class="Statement">*</span><span class="Type">1</span><span class="Statement">.</span>, <span class="Statement">.</span><span class="Type">25</span>] <span class="Statement">/.</span> {
         <span class="Type">0</span><span class="Statement">.</span> <span class="Statement">-&gt;</span> y, <span class="Statement">.</span><span class="Type">5</span> <span class="Statement">-&gt;</span> y<span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">.</span><span class="Type">25</span> <span class="Statement">|</span> <span class="Statement">.</span><span class="Type">75</span> <span class="Statement">-&gt;</span> y<span class="Statement">/</span><span class="Type">4</span>}},

     g <span class="Statement">=</span> <span class="Identifier">ParametricPlot</span>[
       <span class="Type">1</span><span class="Statement">/</span>(scale<span class="Statement">^</span><span class="Type">1.4</span>) (<span class="Type">1</span><span class="Statement">.</span> <span class="Statement">+</span> spirality<span class="Statement">*</span>(<span class="Identifier">Log</span>[<span class="String">\[Theta]</span> <span class="Statement">+</span> <span class="Type">1</span><span class="Statement">.</span>] <span class="Statement">-</span> <span class="Type">1</span><span class="Statement">.</span>))<span class="Statement">*</span>
        {<span class="String">\[Psi]</span> <span class="Identifier">Cos</span>[<span class="String">\[Theta]</span>] <span class="Statement">+</span> x  <span class="Identifier">Cos</span>[<span class="Type">64</span><span class="Statement">.</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> (<span class="Type">1</span> <span class="Statement">-</span> effect<span class="Statement">*</span><span class="Identifier">RandomReal</span>[])<span class="Statement">*</span><span class="String">\[Zeta]</span><span class="Statement">*</span> (<span class="Identifier">Cos</span>[<span class="Type">512</span><span class="Statement">.</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> <span class="Identifier">Cos</span>[<span class="Type">64</span><span class="Statement">.</span> <span class="String">\[Zeta]</span> <span class="String">\[Theta]</span>]),
         <span class="String">\[Psi]</span> <span class="Identifier">Sin</span>[<span class="String">\[Theta]</span>] <span class="Statement">-</span> x <span class="Identifier">Sin</span>[<span class="Type">64</span><span class="Statement">.</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> (<span class="Type">1</span> <span class="Statement">-</span> effect<span class="Statement">*</span><span class="Identifier">RandomReal</span>[])<span class="Statement">*</span> inflection<span class="Statement">*</span><span class="String">\[Zeta]</span><span class="Statement">*</span> (<span class="Identifier">Sin</span>[<span class="Type">512</span><span class="Statement">.</span> <span class="String">\[Theta]</span>] <span class="Statement">+</span> <span class="Identifier">Sin</span>[<span class="Type">64</span><span class="Statement">.</span> <span class="String">\[Zeta]</span> <span class="String">\[Theta]</span>])}

       , {<span class="String">\[Theta]</span>, <span class="Type">0</span>, <span class="Type">2</span> <span class="String">\[Pi]</span>}, ImageSize <span class="Statement">-&gt;</span> {<span class="Type">640</span>, <span class="Type">480</span>}, PerformanceGoal <span class="Statement">-&gt;</span> <span class="String">&quot;Quality&quot;</span>,
       Epilog <span class="Statement">-&gt;</span> {<span class="Identifier">Gray</span>, Thick, <span class="Identifier">Circle</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">1</span>]},
       PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[{{color, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">43</span>]}}], PlotRange <span class="Statement">-&gt;</span> Full,
       Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background], PlotPoints <span class="Statement">-&gt;</span> <span class="Type">270</span>, Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>];

     lines <span class="Statement">=</span> <span class="Identifier">Cases</span>[g, <span class="Identifier">Line</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> pts, <span class="Identifier">Infinity</span>];
     riemannLines <span class="Statement">=</span> <span class="Identifier">toRiemann </span><span class="Statement">/@</span> lines;
     invertedLines <span class="Statement">=</span> <span class="Identifier">invertRiemann </span><span class="Statement">/@</span> riemannLines;
     lines <span class="Statement">=</span> <span class="Identifier">Map</span>[{<span class="Statement">##</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>, lines];

     <span class="Identifier">ControlActive</span>[g,
      <span class="Identifier">Graphics3D</span>[{
        <span class="Identifier">switch</span>[ <span class="String">&quot;sphere&quot;</span>, {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Sphere</span>[]}],
        <span class="Identifier">switch</span>[<span class="String">&quot;shuttle&quot;</span>, shuttle], <span class="Identifier">switch</span>[<span class="String">&quot;cow&quot;</span>, cow],
        <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Dynamic</span>[<span class="Identifier">Opacity</span>[opacity]],
        <span class="Identifier">Dynamic</span>[<span class="Identifier">AbsoluteThickness</span>[thickness]],
        <span class="Identifier">switch</span>[<span class="String">&quot;original&quot;</span>, <span class="Identifier">Line </span><span class="Statement">/@</span> lines],
        <span class="Identifier">switch</span>[<span class="String">&quot;riemann&quot;</span>, <span class="Identifier">Line </span><span class="Statement">/@</span> riemannLines],
        <span class="Identifier">switch</span>[<span class="String">&quot;inverse&quot;</span>, <span class="Identifier">Line </span><span class="Statement">/@</span> invertedLines]}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
       dynamicView, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background],
       ImageSize <span class="Statement">-&gt;</span> {<span class="Type">640</span>, <span class="Type">480</span>}]]]

    , controls,
    storedVars,
    {{reset, <span class="String">&quot;reset&quot;</span>}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},

    Bookmarks <span class="Statement">-&gt;</span> bookmarks, Alignment <span class="Statement">-&gt;</span> Center]]]
</pre>
            </li>
        </ol>

            </li>
        </ol>

        <p>
        <span class="flipbookLink" name="cycowtron 4800 deluxe" index="1">This thing</span>'s almost as curly as my hair. Note that in Mathematica these aren't static renderings. They're regular <span style="font-family: monospace">Graphics3D</span> panes that you can spin and move around <span class="flipbookLink" name="cycowtron 4800 deluxe" index="4">every which way</span>. But let's not forget why we're here:
        </p>

        <ol class="flipbook static" name="cowpinski 1">
            <li>
            <img src="img/cowpinski4.png" width="640" height="500" />
            </li>
            <li>
            <img src="img/cowpinski3.png" width="640" height="500" />
            </li>
            <li>
            <img src="img/cowpinski2.png" width="640" height="500" />
            </li>
            <li>
            <img src="img/cowpinski1.png" width="623" height="730" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>); {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

cow <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
   <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
    VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

<span class="Identifier">riemannize</span>[<span class="Identifier">Graphics</span>[<span class="Type">g_</span>, <span class="Type">___</span>], <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[{
    <span class="Comment">(*sphere*)</span>{Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">07</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">1</span>]},
    <span class="Comment">(*cow*)</span><span class="Identifier">Rotate</span>[<span class="Identifier">Rotate</span>[<span class="Identifier">Translate</span>[cow, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span> <span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}],
    <span class="Comment">(*curves*)</span>g <span class="Statement">/.</span> (<span class="Type">h </span><span class="Statement">:</span> Line <span class="Statement">|</span> Polygon)[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> {<span class="Identifier">h</span>[{<span class="Statement">##</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts], <span class="Identifier">h</span>[<span class="Identifier">toRiemann</span>[pts]]}},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[<span class="Type">2</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">-</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{Transparent, <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}];

<span class="Identifier">riemannize</span>[<span class="Identifier">draw</span>[<span class="Type">5</span>], ViewPoint <span class="Statement">-&gt;</span> Top]
</pre>
            </li>
        </ol>

        <p>
        <center>.</center>
        </p>

        <br />

        <p>
        Look at the symmetry of this inversion:
        </p>

        <ol class="flipbook static" name="cowpinski 2">
            <li>
            <img src="img/cowpinskiinv1.png" width="650" height="482" />
            </li>
            <li>
            <img src="img/cowpinskiinv6.png" width="640" height="481" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>); {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

fromRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(<span class="Statement">-</span><span class="Type">1</span><span class="Statement">/</span>(<span class="Statement">#</span>[[<span class="Type">3</span>]] <span class="Statement">-</span> <span class="Type">1</span>)) {<span class="Statement">#</span>[[<span class="Type">1</span>]], <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">0</span>} <span class="Statement">&amp;</span>, pts]]];

cow <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
   <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
    VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

<span class="Identifier">riemannTableau</span>[<span class="Identifier">Graphics</span>[<span class="Type">g_</span>, <span class="Type">___</span>], <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{tmp},
   <span class="Identifier">Graphics3D</span>[{
     <span class="Identifier">Translate</span>[cow, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}],
     {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">07</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">1</span>]},
     g <span class="Statement">/.</span> (<span class="Type">h </span><span class="Statement">:</span> Line <span class="Statement">|</span> Polygon)[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> {
        <span class="Identifier">EdgeForm</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">3</span>]],
        <span class="Comment">(*original*)</span><span class="Identifier">EdgeForm</span>[<span class="Identifier">Purple</span>], <span class="Identifier">Purple</span>, <span class="Identifier">h</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts],
        <span class="Comment">(*riemann*)</span><span class="Identifier">EdgeForm</span>[<span class="Identifier">Blue</span>], <span class="Identifier">Blue</span>, <span class="Identifier">h</span>[tmp <span class="Statement">=</span> <span class="Identifier">toRiemann</span>[pts]],
        <span class="Comment">(*riemann inverse*)</span><span class="Identifier">EdgeForm</span>[<span class="Identifier">Red</span>], <span class="Identifier">Red</span>, <span class="Identifier">h</span>[tmp <span class="Statement">=</span> {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Statement">-</span><span class="Statement">#3</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> tmp],
        <span class="Comment">(*inverse*)</span><span class="Identifier">h</span>[<span class="Identifier">fromRiemann</span>[tmp]]}},
    options, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
    Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Identifier">All</span>]];

axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">-</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]];

<span class="Identifier">riemannTableau</span>[<span class="Identifier">draw</span>[<span class="Type">5</span>], ViewPoint <span class="Statement">-&gt;</span> {Top, <span class="Identifier">Left</span>}]
</pre>
            </li>
        </ol>

        <p>
        We have the original in the middle in purple, its Riemann mapping in blue, their inverses in red, and the cow in black and white. And except for the cow they all meet at the same three points. How gangster is that. (My friend's six-month old informs me that it's "substantially gangster" (paraphrasing)). But witness the scene of a zoom-out fractal:
        </p>

        <ol class="flipbook static consumable" name="cowpinski 3">
            <li name="image">
            <img src="img/cowpinskiinv7.png" width="750" height="617" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
toRiemann <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{pts, <span class="Type">_Real</span>, <span class="Type">2</span>}}, <span class="Identifier">Module</span>[{k},
    <span class="Identifier">Map</span>[(k <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">/</span>(<span class="Type">1</span> <span class="Statement">+</span> <span class="Statement">#</span><span class="Statement">.</span><span class="Statement">#</span>); {k <span class="Statement">#</span>[[<span class="Type">1</span>]], k <span class="Statement">#</span>[[<span class="Type">2</span>]], <span class="Type">1</span> <span class="Statement">-</span> k}) <span class="Statement">&amp;</span>, pts]]];

<span class="Identifier">fromRiemann</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">DeleteCases</span>[(<span class="Statement">-</span><span class="Type">1</span><span class="Statement">/</span>(<span class="Statement">#3</span> <span class="Statement">-</span> <span class="Type">1</span>)) {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts,
    <span class="Type">x_</span> <span class="Statement">/;</span> <span class="Identifier">MemberQ</span>[x, <span class="Identifier">Indeterminate</span>]];

cow <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]],
   <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
    VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

<span class="Identifier">riemannTableau</span>[<span class="Identifier">Graphics</span>[<span class="Type">g_</span>, <span class="Type">___</span>], <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{tmp},
   <span class="Identifier">Graphics3D</span>[{
         <span class="Comment">(*transparency on sphere causes weird graphical</span>
<span class="Comment">          issue on my machine when n is high*)</span>
     {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">07</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">1</span>]},
     <span class="Identifier">Translate</span>[cow, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1.2</span>}],
     g <span class="Statement">/.</span> (<span class="Type">h </span><span class="Statement">:</span> Line <span class="Statement">|</span> Polygon)[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> {
        <span class="Comment">(*original*)</span><span class="Identifier">h</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts],
        <span class="Comment">(*riemann*)</span><span class="Identifier">h</span>[tmp <span class="Statement">=</span> <span class="Identifier">toRiemann</span>[pts]],
        <span class="Comment">(*riemann inverse*)</span><span class="Identifier">h</span>[tmp <span class="Statement">=</span> {<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Statement">-</span><span class="Statement">#3</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> tmp],
        <span class="Comment">(*inverted*)</span><span class="Identifier">h</span>[<span class="Identifier">fromRiemann</span>[tmp]]}},
    options, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
    Axes <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Identifier">All</span>]];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

{n, c} <span class="Statement">=</span> {<span class="Type">5</span>, {<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">5</span><span class="Statement">/</span><span class="Type">8</span>; <span class="Statement">-</span><span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>}};
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[c <span class="Statement">+</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">-</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">riemannTableau</span>[
 <span class="Identifier">Graphics</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>], <span class="Identifier">Black</span>, <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}],
 ViewVector <span class="Statement">-&gt;</span> {<span class="Type">5</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}}]
</pre>
            </li>
        </ol>

        <p>
        <i>At the chasm of infinity, our cow glances past its precipice, stares down its abyss.</i> You know that machine in the Hitchhiker's Guide that explodes your mind or whatever by showing you how pathetically insignificant you are compared to the universe? Well this is like a Windows 3.1 version of that. Our poor cow friend's soul is being wrung on the very clothesline of endlessness itself. I think this is the first time I'm happy I'm not a cow.
        </p>

        <p>
        ...is what I would have said if this was any cow but this one.
        </p>

        <br />

        <ol class="flipbook static" name="jh n brahm">
            <li>
            <img src="img/brahm2.png" width="730" height="624" />
            </li>
            <li>
    <div style="width: 793; height: 668px; left: 50%; margin-left: -396px; position: relative;">
            <img
            onmouseover="document.body.style.background = '#000000'; $('.consumable, .tab').css('visibility', 'hidden')"
            onmouseout="document.body.style.background = 'inherit'; $('.consumable, .tab').css('visibility', 'visible')"
            src="img/brahm9.png" width="793" height="668" />
    </div>
            </li>
            <li name="source">
        <ol class="flipbook static" name="jh n brahm sources">
            <li>
<pre style="font-size: 12px">
pat <span class="Statement">=</span> <span class="Identifier">Graphics</span>[{<span class="Identifier">Black</span>, <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">5</span>], <span class="Identifier">White</span>,
    <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Black</span>, <span class="Identifier">Thickness</span>[<span class="Statement">.</span><span class="Type">03</span>]}],
    <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">#</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">07</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">4</span>, <span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>],
    <span class="Identifier">Black</span>, <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">15</span>], <span class="Identifier">Rectangle</span>[{<span class="Statement">-</span><span class="Type">4</span>, <span class="Type">1.8</span>}, {<span class="Type">4</span>, <span class="Type">2.1</span>}],
    <span class="Identifier">Rotate</span>[<span class="Identifier">Rectangle</span>[{<span class="Statement">-</span><span class="Type">4</span>, <span class="Type">1.8</span>}, {<span class="Type">4</span>, <span class="Type">2.1</span>}], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>, {<span class="Type">0</span>, <span class="Type">0</span>}],
    <span class="Identifier">Rectangle</span>[{<span class="Statement">-.</span><span class="Type">2</span>, <span class="Statement">-</span><span class="Type">1.3</span>}, {<span class="Statement">.</span><span class="Type">2</span>, <span class="Statement">-</span><span class="Type">4</span>}]}];

(jhgn <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Statement">#1</span>}) <span class="Statement">&amp;</span> <span class="Statement">@@</span>
  <span class="Identifier">SphericalPlot3D</span>[u <span class="Statement">+</span> v, {u, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {v, <span class="Type">0</span>, <span class="Identifier">Pi</span>},
   Mesh <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, TextureCoordinateFunction <span class="Statement">-&gt;</span> ({<span class="Statement">#5</span>, <span class="Statement">#4</span>} <span class="Statement">&amp;</span>),
   PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Texture</span>[pat]];


xf1 <span class="Statement">=</span> {
   {{<span class="Type">0.0017206308062546146</span>`, <span class="Type">0.0012959917814960697</span>`, <span class="Type">0.0025851614902868744</span>`},
    {<span class="Type">0.0010674250900446086</span>`, <span class="Statement">-</span><span class="Type">0.0030803612062593683</span>`, <span class="Type">0.0008337886519470046</span>`},
    {<span class="Type">0.0026876120080307113</span>`, <span class="Type">0.0003937069230620502</span>`, <span class="Statement">-</span><span class="Type">0.0019861927280659755</span>`}},
   {<span class="Type">0.3257382788099915</span>`, <span class="Statement">-</span><span class="Type">0.03759999999999997</span>`, <span class="Type">0.1862691804107692</span>`}};

xf2 <span class="Statement">=</span> {
   {{<span class="Type">0.0017206308062546146</span>`, <span class="Type">0.0012959917814960697</span>`, <span class="Type">0.0025851614902868744</span>`},
    {<span class="Statement">-</span><span class="Type">0.0010674250900446086</span>`, <span class="Type">0.0030803612062593683</span>`, <span class="Statement">-</span><span class="Type">0.0008337886519470046</span>`},
    {<span class="Type">0.0026876120080307113</span>`, <span class="Type">0.0003937069230620502</span>`, <span class="Statement">-</span><span class="Type">0.0019861927280659755</span>`}},
   {<span class="Type">0.3257382788099915</span>`, <span class="Type">0.03759999999999997</span>`, <span class="Type">0.1862691804107692</span>`}};

cow <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,<span class="Comment">(*Opacity[.999],*)</span> <span class="Identifier">Texture</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]],            
   <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
    VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

<span class="Identifier">Graphics3D</span>[{cow,
  <span class="Identifier">GeometricTransformation</span>[jhgn, xf1],
  <span class="Identifier">GeometricTransformation</span>[jhgn, xf2]},
 Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]
</pre>
            </li>
            <li>
<pre style="font-size: 12px">
pat <span class="Statement">=</span><span class="Comment">(*ColorNegate@*)</span><span class="Identifier">Graphics</span>[{<span class="Identifier">Black</span>, <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Type">5</span>], <span class="Identifier">White</span>,
    <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Black</span>, <span class="Identifier">Thickness</span>[<span class="Statement">.</span><span class="Type">03</span>]}],
    <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">#</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">07</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">4</span>, <span class="Type">1</span>, <span class="Statement">-</span><span class="Type">1</span>],
    <span class="Identifier">Black</span>, <span class="Identifier">Disk</span>[{<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">15</span>], <span class="Identifier">Rectangle</span>[{<span class="Statement">-</span><span class="Type">4</span>, <span class="Type">1.8</span>}, {<span class="Type">4</span>, <span class="Type">2.1</span>}],
    <span class="Identifier">Rotate</span>[<span class="Identifier">Rectangle</span>[{<span class="Statement">-</span><span class="Type">4</span>, <span class="Type">1.8</span>}, {<span class="Type">4</span>, <span class="Type">2.1</span>}], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">4</span>, {<span class="Type">0</span>, <span class="Type">0</span>}],
    <span class="Identifier">Rectangle</span>[{<span class="Statement">-.</span><span class="Type">2</span>, <span class="Statement">-</span><span class="Type">1.3</span>}, {<span class="Statement">.</span><span class="Type">2</span>, <span class="Statement">-</span><span class="Type">4</span>}]}];

(jhgn <span class="Statement">=</span> {Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, <span class="Statement">#1</span>}) <span class="Statement">&amp;</span> <span class="Statement">@@</span>
  <span class="Identifier">SphericalPlot3D</span>[u <span class="Statement">+</span> v, {u, <span class="Type">0</span>, <span class="Identifier">Pi</span>}, {v, <span class="Type">0</span>, <span class="Identifier">Pi</span>},
   Mesh <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, TextureCoordinateFunction <span class="Statement">-&gt;</span> ({<span class="Statement">#5</span>, <span class="Statement">#4</span>} <span class="Statement">&amp;</span>),
   PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Texture</span>[pat], PlotPoints <span class="Statement">-&gt;</span> <span class="Type">80</span><span class="Comment">(*0*)</span>];

sc <span class="Statement">=</span> <span class="Type">1.5</span>;
xf1 <span class="Statement">=</span> {
   sc {{<span class="Type">0.010433915075096155</span>`, <span class="Type">0.02050184708176941</span>`, <span class="Statement">-</span><span class="Type">0.0014526467022039392</span>`},
     {<span class="Type">0.014609900826184952</span>`, <span class="Statement">-</span><span class="Type">0.006252356712311273</span>`, <span class="Type">0.01669614726190017</span>`},
     {<span class="Type">0.014456372783472383</span>`, <span class="Statement">-</span><span class="Type">0.008478490536514085</span>`, <span class="Statement">-</span><span class="Type">0.01582501134810082</span>`}},
   {<span class="Type">0.5447560973768777</span>`, <span class="Statement">-</span><span class="Type">0.5</span>`, <span class="Type">0.5534681561478464</span>`}};

xf2 <span class="Statement">=</span> {
   sc {{<span class="Type">0.010433915075096155</span>`, <span class="Type">0.02050184708176941</span>`, <span class="Statement">-</span><span class="Type">0.0014526467022039392</span>`},
     {<span class="Statement">-</span><span class="Type">0.014609900826184952</span>`, <span class="Type">0.006252356712311273</span>`, <span class="Statement">-</span><span class="Type">0.01669614726190017</span>`},
     {<span class="Type">0.014456372783472383</span>`, <span class="Statement">-</span><span class="Type">0.008478490536514085</span>`, <span class="Statement">-</span><span class="Type">0.01582501134810082</span>`}},
   {<span class="Type">0.5447560973768777</span>`, <span class="Type">0.5</span>`, <span class="Type">0.5534681561478464</span>`}};

cow <span class="Statement">=</span> {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,<span class="Comment">(*Opacity[.999],*)</span> <span class="Identifier">Texture</span>[<span class="Identifier">ColorNegate</span><span class="Statement">@</span><span class="Identifier">Graphics</span>[<span class="Identifier">Disk</span>[]]],
   <span class="Identifier">Append</span>[<span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;GraphicsComplex&quot;</span>],
    VertexTextureCoordinates <span class="Statement">-&gt;</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">500</span> <span class="Identifier">ExampleData</span>[{<span class="String">&quot;Geometry3D&quot;</span>, <span class="String">&quot;Cow&quot;</span>}, <span class="String">&quot;PolygonData&quot;</span>]]};

<span class="Identifier">Graphics3D</span>[{cow,
  <span class="Identifier">GeometricTransformation</span>[jhgn, xf1],
  <span class="Identifier">GeometricTransformation</span>[jhgn, xf2]},
 ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Right</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>] <span class="Statement">//</span><span class="Identifier"> ColorNegate</span></pre>
            </li>
            </ol>
            </li>
        </ol>

        <p>
        <i>This</i> cow does not cower. Infinity cannot bully this bull, cannot bloviate this bovine. By all appearances this cow is wearing infinity on its <i>mane</i>. Its horns are probably made of $\small{\aleph _{\aleph_{\tiny{\ddots}}}}$ down 4 or 5 levels, an immutability surpassed only by that of the tusks of the Alephant. Our cow isn't staring into infinity. It's looking down at infinity, observing infinity with detached understanding. If our cow were not so enlightened, and also had the facial muscles, it might betray the subtlest of smiles at infinity's infinity face, for infinity's turbid fractal whirlpools and vast lethargic swamps are but swathes of data like any other to this cow.
        </p>

        <p>
        Long ago, having mastered the magesterial tetrafecta of science, mathematics, spirituality, and politics, our cow stepped hoof outside Farmer Joe's farm and set out on an adventure of like, just so much awesome. One of its side gigs these days is being the <span class="flipbookLink consumable" name="jh n brahm" index="2">final observer of our domain</span>, preventing our section of the Great Algorithm from backtracking by stellating through the cosmos our most entwined entwinements. I think this is the first time I'm jealous of a cow.
        </p>

        <p>
        In any case, as you can see the Riemann sphere is pretty useless. But while we're on the subject of 3D let's see how our various approaches do here. Chaos game:
        </p>
        
        <ol class="flipbook static consumable" name="3D chaos 1">
            <li>
            <img src="img/sier3Dchaos15.png" width="640" height="555" />
            </li>
            <li>
            <img src="img/sier3Dchaos23.png" width="640" height="554" />
            </li>
            <li>
            <img src="img/siergenetics21.png" width="505" height="519" />
            </li>
            <li>
            <img src="img/sier3Dchaos16.png" width="640" height="660" />
            </li>
            <li>
            <img src="img/sier3Dchaos18.png" width="546" height="660" />
            </li>
            <li>
            <img src="img/sier3Dchaos20.png" width="640" height="482" />
            </li>
            <li>
            <img src="img/sier3Dchaos21.png" width="640" height="638" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Lighter</span>[<span class="Identifier">Green</span>],
    <span class="Identifier">Sphere</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">First</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]], <span class="Statement">.</span><span class="Type">001</span>]},
   Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, LightYellow, <span class="Identifier">Scaled</span>[{<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}], <span class="Type">5</span>}},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];
<span class="Identifier">draw</span>[vertices, <span class="Type">100000</span>,
 ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>},
 ViewVertical <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}]
</pre>
            </li>
            <li name="?">
        <pre style="font-size: 14px">
<span class="Identifier">draw1</span>[<span class="Type">vertices_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Lighter</span>[<span class="Identifier">Green</span>], <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],
    <span class="Identifier">Cuboid</span>[<span class="Statement">#</span>, <span class="Statement">#</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">01</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">First</span>[vertices],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]},
   Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, LightYellow, <span class="Identifier">Scaled</span>[{<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}], <span class="Type">5</span>}},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Lighter</span>[<span class="Identifier">Green</span>],
    <span class="Identifier">Sphere</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Identifier">First</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]], <span class="Statement">.</span><span class="Type">001</span>]},
   Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, LightYellow, <span class="Identifier">Scaled</span>[{<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}], <span class="Type">5</span>}},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];

<span class="Comment">(*1*)</span>
<span class="Identifier">Defer</span>[AbsoluteOptions][<span class="Identifier">draw1</span>[vertices, <span class="Type">20000</span>, ImageSize <span class="Statement">-&gt;</span> Medium]]

<span class="Comment">(*2*)</span>
<span class="Identifier">draw</span>[vertices, <span class="Type">2000000</span>,
   <span class="Comment">(* ViewPoint, ViewVertical from (*1*) *)</span>
   Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>] <span class="Statement">//</span><span class="Identifier"> Rasterize</span> <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span>
</pre>
            </li>
        </ol>

        <p>
        This is using little spheres as the points. You could use pyramids or anything else instead. Even go back to nature and use <span class="flipbookLink" name="3D chaos 1" index="2">actual points</span>. It's a bit tricky to get decent images since the chaos game doesn't place points in a regular arrangement, so you need a large number of points. Each of these images uses 2 million spheres and takes about 10 minutes to render on my little laptop.
        </p>

        <p>
This <span class="flipbookLink" name="3D chaos 1" index="1">top view</span> shows one of the symmetries that appear in the 3D triangle. This <span class="flipbookLink" name="3D chaos 1" index="5">side view</span> shows another. And a top view of the <span class="flipbookLink" name="3D chaos 1" index="7">4-corner pyramid</span>. These symmetries are interesting because they appear absolutely no different than 2D renditions (<span class="flipbookLink" name="3D chaos 1" index="3">for</span> <span class="flipbookLink" name="3D chaos 1" index="6">example</span>). At first this seems mysterious, since the symmetries appear from every which angle. But the reason it happens is because our distance function works on each coordinate independently:
        </p>

        $$p_{i+1}=\frac 1 2 (p_i+v)$$

        <p>
        This formula is applied to the $x$ $y$ $z$ coordinates separately. So we could chop off any one of the coordinates from all the points in the 3D Sierpinski triangle to get a regular 2D Sierpinski triangle. And more to the point, what we're really doing is geometric: finding the point halfway between two given points. This $\small{\frac 1 2 (p_i+v)}$ formula is just a particular algebraic statement of that.
        </p>

        <p>
        In other words, the geometry of the algorithm doesn't care about our coordinate system, so we're going to get the projected equivalent of a 2D rendering from <i>any</i> angle we pick, not just from the $x$ $y$ $z$ cross sections of our computation (certainly there is a linear algebra term for this).
        </p>

        <ol class="flipbook static" name="chaos prism 3D">
            <li>
            <img src="img/sier3Dchaos27.png" width="400" height="459" />
            </li>
            <li>
            <img src="img/sier3Dchaos28.png" width="400" height="462" />
            </li>
        </ol>

        <p>
        To make clear what we're talking about, this is the <span class="flipbookLink" name="chaos prism 3D" index="1">chaos game on a prism</span>, and <span class="flipbookLink" name="chaos prism 3D" index="2">the same thing from the same viewpoint</span>, except with the 3D projection effect removed. As you can see, the 'hidden dimension' has no offect on what is seen. Au contraire messieur. If it did have an effect, <i>that</i> would be interesting.
        </p>

        <p>
        Something I noticed though is that while we can remove a coordinate, we can't add a coordinate, in the sense that, for example, there's no way to combine independent $x$ $y$ streams to create a Sierpinski triangle. For our 2D Sierpinski triangle, there's something to the fact that a single point is specified by two coordinates instead of just one.
        </p>

        <p>
        I think there may be an interesting statistical or information-theoretic interpretation to this. I'm not really familiar with either of these subjects though. Geometric approach:
        </p>

        <!--p>
        So I think these chaos games are making some kind of statement about conditional probability, though there may be a more interesting information-theoretic interpretation. I'm not really familiar with either of these subjects though. Geometric approach:
        </p-->

        <ol class="flipbook static" name="geometric 3D 1">
            <li>
            <img src="img/sier3Dgeom17.png" width="622" height="494" />
            </li>
            <li>
            <img src="img/sier3Dgeom14.png" width="612" height="442" />
            </li>
            <li>
            <img src="img/sier3Dgeom4.png" width="640" height="388" />
            </li>
            <li>
            <img src="img/sierlemonlime1.png" width="599" height="547" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">shapeName_</span>, <span class="Type">n_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{shape, next},
   shape <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[shapeName, <span class="String">&quot;Faces&quot;</span>];

   <span class="Comment">(*scale by 1/2 toward each vertex,in turn*)</span>
   <span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[prev, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

   <span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">15</span>]], <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>shape, n]},
    options, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Identifier">Grid</span>[<span class="Identifier">Table</span>[
  <span class="Identifier">draw</span>[{<span class="String">&quot;Pyramid&quot;</span>, k}, n, ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>}],
  {k, <span class="Type">3</span>, <span class="Type">5</span>}, {n, <span class="Type">0</span>, <span class="Type">3</span>}]]
</pre>
            </li>
        </ol>

        <p>
        Behold the <span class="flipbookLink" name="geometric 3D 1" index="4">Lemon Lime Fortress</span>. Throw in a few salt blocks, pour some Corona at the top, join the party at the base. To make our lives one notch easier, <span class="flipbookLink" name="geometric 3D 1" index="5">our code</span> takes advantage of Mathematica's built-in transformation infrastructure, in this case the symbol <span style="font-family: monospace">Scale</span>. It also pulls the geometry of things from our good friend Mr. <span style="font-family: monospace">PolyhedronData</span>. The nice thing about having such a general setup is that we can readily apply this geometric fractalization on arbitrary shapes:
        </p>


        <ol class="flipbook static" name="geometric 3D 2">
            <li>
            <img src="img/sier3Dgeom18.png" width="694" height="514" />
            </li>
            <li>
            <img src="img/sier3Dgeom6.png" width="320" height="579" />
            </li>
            <li>
            <img src="img/sier3Dgeom7.png" width="624" height="493" />
            </li>
            <li>
            <img src="img/sier3Dgeom8.png" width="624" height="493" />
            </li>
            <li>
            <img src="img/sier3Dgeom20.png" width="575" height="580" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">shapeName_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{shape, next},
   shape <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[shapeName, <span class="String">&quot;Faces&quot;</span>];
   <span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[prev, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

   <span class="Identifier">Graphics3D</span>[<span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>shape, n],
    Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
    Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

shapes <span class="Statement">=</span> {<span class="String">&quot;TruncatedIcosahedron&quot;</span>, <span class="String">&quot;TriakisIcosahedron&quot;</span>, <span class="String">&quot;TetrakisHexahedron&quot;</span>,
   <span class="String">&quot;SmallStellatedDodecahedron&quot;</span>, <span class="String">&quot;ElongatedPentagonalCupola&quot;</span>, <span class="String">&quot;Icosahedron&quot;</span>,
   <span class="String">&quot;ElongatedSquareDipyramid&quot;</span>, <span class="String">&quot;DuerersSolid&quot;</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">2</span>]] <span class="Statement">&amp;</span>[
 <span class="Identifier">Table</span>[<span class="Identifier">Tooltip</span>[<span class="Identifier">Panel</span>[<span class="Statement">#</span>], shape] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">Row</span>[<span class="Identifier">Table</span>[<span class="Identifier">draw</span>[shape, n], {n, <span class="Type">0</span>, <span class="Type">1</span>}], <span class="Identifier">Spacer</span>[<span class="Type">30</span>]],
  {shape, shapes}]]
</pre>
            </li>
        </ol>

        <p>
        Don't ask me what the hell that <span class="flipbookLink" name="geometric 3D 2" index="1">last shape</span> is. I figure it just managed to stow away into <span style="font-family: monospace">PolyhedronData</span> somehow, like the semiconscious pre-sentient kernel of a future Skynet. The faces of these shapes show very clearly that we get 2D slices for free, like in <span class="flipbookLink" name="geometric 3D 2" index="3">these perspectives from below</span> (we <span class="flipbookLink" name="geometric 3D 2" index="4">aren't cheating</span> here). The edges by themselves make pretty patterns:
        </p>

        <ol class="flipbook static" name="geometric 3D 3">
            <li>
            <img src="img/sier3Dgeom11.png" width="640" height="554" />
            </li>
            <li>
            <img src="img/sier3Dgeom15.png" width="640" height="554" />
            </li>
            <li>
            <img src="img/sier3Dgeom12.png" width="640" height="554" />
            </li>
            <li>
            <img src="img/sier3Dgeom9.png" width="640" height="554" />
            </li>
            <li>
            <img src="img/sier3Dgeom16.png" width="511" height="533" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">shapeName_</span>, <span class="Type">n_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{shape, next, axiom},
   shape <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[shapeName, <span class="String">&quot;Faces&quot;</span>];
   <span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[prev, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

   axiom <span class="Statement">=</span> {shape, <span class="Identifier">If</span>[showLittleBalls,
      {<span class="Identifier">FaceForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">85</span>], <span class="Identifier">White</span>}],
       <span class="Identifier">Glow</span>[<span class="Identifier">Green</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">09</span>]}]};

   <span class="Identifier">Graphics3D</span>[{Transparent, <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opacity], color}],
     <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n]}, options, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>,
    Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

shapes <span class="Statement">=</span> {<span class="String">&quot;TruncatedIcosahedron&quot;</span>, <span class="String">&quot;TriakisIcosahedron&quot;</span>, <span class="String">&quot;TetrakisHexahedron&quot;</span>,
   <span class="String">&quot;SmallStellatedDodecahedron&quot;</span>, <span class="String">&quot;ElongatedPentagonalCupola&quot;</span>, <span class="String">&quot;Icosahedron&quot;</span>,
   <span class="String">&quot;ElongatedSquareDipyramid&quot;</span>, <span class="String">&quot;DuerersSolid&quot;</span>};

{color, opacity, showLittleBalls} <span class="Statement">=</span> {<span class="Identifier">Black</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Identifier">False</span>};
<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">2</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
 <span class="Identifier">Table</span>[<span class="Identifier">Tooltip</span>[<span class="Statement">#</span>, shape] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">Row</span>[<span class="Identifier">Table</span>[<span class="Identifier">draw</span>[shape, n, ViewPoint <span class="Statement">-&gt;</span> Top], {n, <span class="Type">0</span>, <span class="Type">1</span>}], <span class="Identifier">Spacer</span>[<span class="Type">30</span>]],
  {shape, shapes}]
</pre>
            </li>
        </ol>

        <p>
        To make sure that after all this scrolling we're still on the same web page, this is our chaos game algorithm:
        </p>

<pre>
<span class="lnr">1 </span>start at any point. call it p
<span class="lnr">2 </span>pick a vertex at random
<span class="lnr">3 </span>find the point halfway between p and that vertex
<span class="lnr">4 </span>call that point p and draw it
<span class="lnr">5 </span>goto 2
</pre>

        <p>
        The only difference between 2D and 3D versions of this algorithm is having 3 coordinates instead of 2. Just as in 2D, we can alter step 3 in various ways. The simplest is to move not halfway towards the chosen vertex, but .25 or .7 of the way, etc:
        </p>
        
        <ol class="flipbook static" name="chaos distance functions 1">
            <li>
            <img src="img/sier3Dchaosdf1.png" width="632" height="387" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf2.png" width="640" height="516" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf3.png" width="624" height="462" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">df_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[{
    <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">PointSize</span>[<span class="Type">0</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[df, <span class="Identifier">First</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]},
   <span class="Comment">(*Method-&gt;{</span><span class="String">&quot;ShrinkWrap&quot;</span><span class="Comment">-&gt;True},*)</span>
   options, PlotRange <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

functions <span class="Statement">=</span> <span class="Identifier">Function</span>[r, r (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Statement">&amp;</span>] <span class="Statement">/@</span> {<span class="Type">1</span>, <span class="Statement">.</span><span class="Type">96</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">2</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
  {<span class="Identifier">TraditionalForm</span>[<span class="Identifier">Trace</span>[<span class="Statement">#</span>[a, b]][[<span class="Type">2</span>]]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
  <span class="Identifier">ParallelTable</span>[
   <span class="Identifier">draw</span>[<span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, v}, <span class="String">&quot;VertexCoordinates&quot;</span>],
    df, <span class="Type">50000</span>, ViewPoint <span class="Statement">-&gt;</span> {Front, Top}],
   {v, <span class="Type">3</span>, <span class="Type">5</span>}, {df, functions}]]]
</pre>
            </li>
        </ol>

        <p>
        Those odd random walks are because the 4- and 5-pyramids have <span style="font-family: monospace">Mean[vertices] != {0, 0, 0}</span>. One thing I noticed is that <span class="flipbookLink" name="chaos distance functions 1" index="3">random walks</span> resemble the outlines of continents. How curious. I wonder if it boils down to the self-similarity of the Brownian motion of water molecules, or something of the like. I.e. the idea that if our continents were surrounded by materials which did not move Brownianly, our coastlines would have different kinds of shapes. Remember that we can get creative with our distance function:
        </p>

        <ol class="flipbook static" name="chaos distance functions 2">
            <li>
            <img src="img/sier3Dchaosdf5.png" width="622" height="402" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf9.png" width="516" height="544" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf13.png" width="502" height="600" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf11.png" width="610" height="610" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf12.png" width="600" height="600" />
            </li>
            <li>
            <img src="img/sier3Dchaosdf15.png" width="520" height="600" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">df_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">3</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[df, <span class="Identifier">RandomReal</span>[{<span class="Type">0</span>, <span class="Statement">.</span><span class="Type">0001</span>}, <span class="Type">3</span>],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]},
   <span class="Comment">(*Method-&gt;{</span><span class="String">&quot;ShrinkWrap&quot;</span><span class="Comment">-&gt;True},*)</span>
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

rotate <span class="Statement">=</span> RotationTransform;
functions <span class="Statement">=</span> {
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">3</span>]]<span class="Statement">!</span>] <span class="Statement">&amp;</span>,
   (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Identifier">RandomChoice</span>[<span class="Identifier">Prime</span>[<span class="Identifier">Range</span>[<span class="Type">10</span>]]] <span class="Statement">&amp;</span>,
   <span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">5</span> <span class="Identifier">rotate</span>[<span class="Type">10</span><span class="Statement">.</span> <span class="Identifier">Degree</span>, {<span class="Statement">#1</span>, <span class="Statement">#2</span>}][<span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>] <span class="Statement">&amp;</span>};

<span class="Identifier">Grid</span>[<span class="Identifier">Join</span>[
  {<span class="Identifier">TraditionalForm</span>[<span class="Identifier">Trace</span>[<span class="Statement">#</span>[a, b]][[<span class="Type">2</span>]]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> functions},
  <span class="Identifier">ParallelTable</span>[
   <span class="Identifier">draw</span>[<span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, v}, <span class="String">&quot;VertexCoordinates&quot;</span>], df, <span class="Type">5000</span>],
   {v, <span class="Type">3</span>, <span class="Type">5</span>}, {df, functions}]]]
</pre>
            </li>
        </ol>

        <p>
        Keep in mind that in Mathematica these are all interactive <span class="flipbookLink" name="chaos distance functions 2" index="3">3D</span> panes. Since I associate these kinds of sparse fractal distributions with the distribution of matter through the scales of the cosmos, flying through these point structures engages my Bj&ouml;rkian semi-spiritual naturalistic side. :) Your mileage may vary. Our old logarithmic distance function can be applied in 3D as well. For two points $a$ and $b$, with $d$ the Euclidean distance and $w$ a specific number between 0 and 1 (though not necessarily), the distance function is:
        </p>

        <br />
        <div style="font-size: large">
            $$(a+b) \log (d(a,b)+w)$$
        </div>

        <ol class="flipbook static" name="fadeleaf 3D 1">
            <li>
            <img src="img/sier3Drander8.png" width="640" height="646" />
            </li>
            <li>
            <img src="img/sier3Drander1.png" width="659" height="687" />
            </li>
            <li>
            <img src="img/sier3Drander2.png" width="484" height="800" />
            </li>
            <li>
    <div style="width: 1280px; height: 393px; left: 50%; margin-left: -640px; position: relative;">
        <img src="img/sier3Drander4.png" width="1280" height="393" />
    </div>
            </li>
            <li>
    <div style="width: 1417px; height: 640px; left: 50%; margin-left: -710px; position: relative;">
        <img title="Boar" src="img/sier3Drander5.png" width="1417" height="640" />
    </div>
            </li>
            <li>
            <img src="img/sier3Drander38.png" width="640" height="357" />
            </li>
            <li name="source">
<pre>
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {w, <span class="Type">_Real</span>}, {numpoints, <span class="Type">_Integer</span>}},
   <span class="Identifier">Module</span>[{diff},
    <span class="Identifier">FoldList</span>[(diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> w]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numpoints]]]];

<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">w_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Type">7</span> <span class="Statement">.</span><span class="Type">05</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">game</span>[vertices, w, numPoints]]},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">Needs</span>[<span class="String">&quot;PolyhedronOperations`&quot;</span>];
vertices <span class="Statement">=</span> <span class="Identifier">Stellate</span>[<span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">5</span>}, <span class="String">&quot;Faces&quot;</span>]][[<span class="Type">1</span>]];

<span class="Identifier">draw</span>[vertices, <span class="Statement">.</span><span class="Type">2</span>, <span class="Type">600000</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Identifier">All</span><span class="Comment">(*,</span>
<span class="Comment"> Method-&gt;{</span><span class="String">&quot;ShrinkWrap&quot;</span><span class="Comment">-&gt;True}*)(*,ViewPoint-&gt;{Infinity,0,0}*)</span>]
</pre>
            </li>
        </ol>

        <p>
        These pictures differ by $w$ factor, viewpoint, or the set of vertices on which the game is being played. For most of these I'm using the vertices of regular polyhedra from <span style="font-family: monospace">PolyhedronData</span>. Note that the vertices of the game are <span class="flipbookLink" name="fadeleaf 3D 1" index="6">not necessarily in proportion</span> to the figure itself.
        </p>

        <p>
        At this point I should remention that all of the code snippets on this page are self-contained. If you have Mathematica you can copy-paste <span class="flipbookLink" name="fadeleaf 3D 1" index="7">this</span> and start producing these figures, which, I should also remention, are interactive 3D models. I'm a big fan of black ink on white paper, and these are like being able to change the perspective of a pure ink painting in real time. Teknikara no jutsu.
        </p>

        <ol class="flipbook static" name="fadeleaf 3D 2">
            <li>
            <img src="img/sier3Drander12.png" width="640" height="627" />
            </li>
            <li>
            <img src="img/sier3Drander9.png" width="640" height="655" />
            </li>
            <li>
            <img src="img/sier3Drander7.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Drander14.png" width="644" height="608" />
            </li>
            <li>
    <div style="width: 1280px; height: 393px; left: 50%; margin-left: -640px; position: relative;">
        <img src="img/sier3Drander36.png" width="1280" height="393" />
    </div>
            </li>
    <li>
    <div style="width: 640px; height: 941px; top: 50%; margin-top: -800px; position: relative;">
            <img src="img/sier3Drander22.png" width="640" height="941" />
    </div>
    </li>
            <li>
            <img src="img/sier3Drander30.png" width="640" height="666" />
            </li>
            <li>
            <img src="img/sier3Drander24.png" width="640" height="736" />
            </li>
            <!--li>
            <img src="img/sierteknikara2.png" width="600" height="693" />
            </li-->
            <li>
    <div style="width: 1280px; height: 1207px; top: 50%; margin-top: -657px; left: 50%; margin-left: -640px; position: relative">
        <img src="img/sier3Drander40.png" width="1280" height="1207" />
    </div>
            </li>
            <!--li>
    <div style="width: 998px; height: 941px; top: 50%; margin-top: -725px; left: 50%; margin-left: -499px; position: relative; z-index: -1">
        <img src="img/sier3Drander34.png" width="998" height="941" />
    </div>
            </li-->
            <li name="source">
            <pre style="font-size: 14px">
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {w, <span class="Type">_Real</span>}, {numpoints, <span class="Type">_Integer</span>}},
   <span class="Identifier">Module</span>[{diff},
    <span class="Identifier">FoldList</span>[(diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> w]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numpoints]]]];

<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">w_</span>, <span class="Type">numPoints_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Type">7</span> <span class="Statement">.</span><span class="Type">05</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">game</span>[vertices, w, numPoints]]},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">proc</span>[<span class="Type">img1_</span>, <span class="Type">cf_</span><span class="Statement">:</span> <span class="Identifier">ColorData</span>[<span class="Type">1</span>], <span class="Type">mode_</span><span class="Statement">:</span> <span class="Identifier">None</span>, <span class="Type">blur_</span><span class="Statement">:</span> <span class="Type">8</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{img, components, rank, largest, colored},
   img <span class="Statement">=</span> <span class="Identifier">RemoveAlphaChannel</span>[<span class="Identifier">ColorNegate</span><span class="Statement">@</span><span class="Identifier">ColorConvert</span>[img1, <span class="String">&quot;Grayscale&quot;</span>]];
   components <span class="Statement">=</span> <span class="Identifier">MorphologicalComponents</span>[img];

   <span class="Identifier">Module</span>[{measurements, sorted},
    measurements <span class="Statement">=</span> <span class="Identifier">ComponentMeasurements</span>[components, <span class="String">&quot;Count&quot;</span>];
    sorted <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">SortBy</span>[measurements, Last];
    <span class="Identifier">rank</span>[<span class="Type">label_</span>] <span class="Statement">:=</span> (<span class="Identifier">rank</span>[label] <span class="Statement">=</span> <span class="Identifier">Position</span>[sorted, label][[<span class="Type">1</span>, <span class="Type">1</span>]])];

   colored <span class="Statement">=</span> <span class="Identifier">Colorize</span>[components,
     ColorFunction <span class="Statement">-&gt;</span> (<span class="Identifier">cf</span>[<span class="Identifier">rank</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

   <span class="Identifier">If</span>[mode <span class="Statement">==</span> <span class="String">&quot;Angelic&quot;</span>,
    colored <span class="Statement">=</span> <span class="Identifier">ImageMultiply</span>[img, colored]];

   <span class="Identifier">ColorNegate</span>[<span class="Identifier">ImageMultiply</span>[<span class="Identifier">ColorNegate</span>[img],
       <span class="Identifier">Blur</span>[<span class="Statement">#</span>, blur] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">ColorNegate</span>[colored]]] <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span>];

<span class="Identifier">Needs</span>[<span class="String">&quot;PolyhedronOperations`&quot;</span>];
vertices <span class="Statement">=</span> <span class="Identifier">OpenTruncate</span>[<span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;Faces&quot;</span>]][[<span class="Type">1</span>]];
g <span class="Statement">=</span> <span class="Identifier">draw</span>[vertices, <span class="Statement">.</span><span class="Type">5</span>, <span class="Type">600000</span>, Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>}];

<span class="Identifier">proc</span>[g, <span class="Statement">#</span> <span class="Statement">/.</span> <span class="Identifier">Join</span>[
    <span class="Identifier">Thread</span>[<span class="Identifier">Range</span>[<span class="Type">4</span>] <span class="Statement">-&gt;</span> {<span class="Identifier">Red</span>, <span class="Identifier">Green</span>, <span class="Identifier">Green</span>, <span class="Identifier">Green</span>}],
    {<span class="Type">_</span> <span class="Statement">-&gt;</span> <span class="Identifier">Lighter</span>[<span class="Identifier">Green</span>]}] <span class="Statement">&amp;</span>]
</pre>
            </li>
        </ol>

        <p>
        Some of thes are like alien Rorschach tests. Like what do you see in <span class="flipbookLink" name="fadeleaf 3D 2" index="4">this one</span>? I see a mosquito that can suck the lifeblood out of your soul. <span class="flipbookLink" style="position: relative; z-index: 12000" name="fadeleaf 3D 2" index="5">This one</span>, however, is definitely from an as-yet unreleased Matrix film. And we also have the <span class="flipbookLink" style="position: relative; z-index: 12000" name="fadeleaf 3D 2" index="6">Minotaur's armor</span> and his <span class="flipbookLink" style="position: relative; z-index: 12000" name="fadeleaf 3D 2" index="7">shield of Cancer</span>. I'd recognize my buddy's armor in even the most obtuse alien Rorschachs. See also a stereographic projection of <span class="flipbookLink" name="fadeleaf 3D 2" style="position: relative; z-index: 12000" index="8">one of the rooms of Asterion's maze</span> and an <span class="flipbookLink" style="position: relative; z-index: 12000" name="fadeleaf 3D 2" index="9">aspect</span>, which needs no explanation.
        </p>

        <p>
        The originals are 3D but this coloring is a 2D image process. It highlights components of the image based on their sizes. So if your image has 3 large blobs with dozens of tiny blobs all around, you can use, for example, <span style="font-family: monospace"># /. {1 -&gt; Red, 2 -&gt; Green, 3 -&gt; Yellow, _ -&gt; Pink} &amp;</span> to color the big blobs specific colors and all other blobs pink. Though in most of these images I only use one or two colors.
        </p>

        <ol class="flipbook static" name="fadeleaf animation">
            <li>
            <iframe width="656" height="369" src="http://www.youtube-nocookie.com/embed/ghk6cYhV4MM" frameborder="0" allowfullscreen></iframe>
            </li>
            <li>
            <iframe width="656" height="369" src="http://www.youtube-nocookie.com/embed/qqd8BxEzQRY" frameborder="0" allowfullscreen></iframe>
            </li>
            <li name="source">
<pre style="font-size: 9px">
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {numPoints, <span class="Type">_Integer</span>}, {wowzerz, <span class="Type">_Real</span>}},
   <span class="Identifier">Module</span>[{diff},
    <span class="Identifier">FoldList</span>[(diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> wowzerz]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}, <span class="Identifier">RandomChoice</span>[vertices, numPoints]]]];

{numFrames, imageSize, numPoints} <span class="Statement">=</span> {
    {<span class="Type">5</span><span class="Comment">(*sec*)</span><span class="Type">15</span><span class="Comment">(*fps*)</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span> {<span class="Type">640</span>, <span class="Type">480</span>}, <span class="Type">1</span><span class="Statement">/</span><span class="Type">3</span> <span class="Type">600000</span>},
    {<span class="Type">20</span><span class="Comment">(*sec*)</span><span class="Type">15</span><span class="Comment">(*fps*)</span>, {<span class="Type">640</span>, <span class="Type">480</span>}, <span class="Type">600000</span>}}[[<span class="Type">1</span>]];

<span class="Identifier">Needs</span>[<span class="String">&quot;PolyhedronOperations`&quot;</span>];
vertices <span class="Statement">=</span> <span class="Identifier">Stellate</span>[<span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">5</span>}, <span class="String">&quot;Faces&quot;</span>]][[<span class="Type">1</span>]];

frame <span class="Statement">=</span> <span class="Identifier">Function</span>[w,
   <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Point</span>[<span class="Identifier">game</span>[vertices, numPoints, w]]},
    ImageSize <span class="Statement">-&gt;</span> imageSize, ViewVertical <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, PlotRange <span class="Statement">-&gt;</span> <span class="Type">1</span>,
    ViewVector <span class="Statement">-&gt;</span> {<span class="Identifier">RotationTransform</span>[<span class="Type">2</span> <span class="Identifier">Pi</span> w, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}][{<span class="Type">1</span>, <span class="Type">0</span>, (w <span class="Statement">-</span> <span class="Statement">.</span><span class="Type">25</span>) <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>}], {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}}]];

<span class="Identifier">SetDirectory</span>[<span class="String">&quot;c:/users/zrp/desktop/frames&quot;</span>];

range <span class="Statement">=</span> <span class="Identifier">Range</span>[<span class="Type">0</span>, <span class="Type">3</span><span class="Statement">/</span><span class="Type">4</span>, <span class="Type">3</span><span class="Statement">/</span><span class="Type">4</span><span class="Statement">/</span>(numFrames <span class="Statement">-</span> <span class="Type">1</span>)];
<span class="Identifier">file</span>[<span class="Type">w_</span>] <span class="Statement">:=</span> <span class="Identifier">ToString</span>[<span class="Identifier">N</span><span class="Statement">@</span>w] <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.png&quot;</span>;

<span class="Identifier">ParallelDo</span>[
  <span class="Identifier">If</span>[<span class="Statement">!</span> <span class="Identifier">FileExistsQ</span>[<span class="Identifier">file</span>[w]],
   <span class="Identifier">Export</span>[<span class="Identifier">file</span>[w], <span class="Identifier">frame</span>[w]]],
  {w, range}];

<span class="Identifier">Export</span>[<span class="String">&quot;mov.avi&quot;</span>,
 <span class="Identifier">ColorNegate </span><span class="Statement">/@</span> <span class="Identifier">ImageAdjust </span><span class="Statement">/@</span> <span class="Identifier">Import </span><span class="Statement">/@</span> <span class="Identifier">file </span><span class="Statement">/@</span> range]

<span class="Identifier">Beep</span>[];
<span class="Identifier">Button</span>[open, <span class="Identifier">SystemOpen</span>[<span class="String">&quot;mov.avi&quot;</span>],
 Enabled <span class="Statement">-&gt;</span> <span class="Identifier">FileExistsQ</span>[<span class="String">&quot;mov.avi&quot;</span>]]
</pre>
            </li>
            <li name="[MovieMaker]">
        <ol class="flipbook static" name="MovieMaker source">
            <li name="image">
            <img src="img/siermoviemaker1.png" width="464" height="195" />
            </li>
            <li name="1">
            <pre style="font-size: 5px">
<span class="Identifier">MovieMaker</span>[<span class="Type">frameF_</span>, <span class="Type">range </span><span class="Statement">:</span> {<span class="Type">start_Integer</span>, <span class="Type">stop_Integer</span>}, <span class="Type">rest___</span>] <span class="Statement">:=</span>
  <span class="Identifier">MovieMaker</span>[frameF, {start, stop, stop <span class="Statement">-</span> start}, rest];

<span class="Comment">(*arithmetic for eg doubling movie length is easier by 'intervals' than by 'frame count'*)</span>
<span class="Identifier">MovieMaker</span>[<span class="Type">frameF_</span>, <span class="Type">range </span><span class="Statement">:</span> {<span class="Type">start_</span>, <span class="Type">stop_</span>, <span class="Type">numIntervals_</span>}, <span class="Type">rest___</span>] <span class="Statement">:=</span>
  <span class="Identifier">MovieMaker</span>[frameF, <span class="Identifier">List</span>[<span class="Identifier">Range</span>[<span class="Statement">#1</span>, <span class="Statement">#2</span>, (<span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>)<span class="Statement">/</span><span class="Statement">#3</span><span class="Comment">(*(#3-1)*)</span>] <span class="Statement">&amp;</span> <span class="Statement">@@</span> range], rest];

<span class="Type">MovieMaker::</span><span class="Special">expqq</span> <span class="Statement">=</span> <span class="String">&quot;Export is complaining about something. &quot;</span> <span class="Statement">&lt;&gt;</span>
   <span class="String">&quot;Most likely you're feeding it items with different image sizes.&quot;</span>;

<span class="Type">MovieMaker::</span><span class="Special">usage</span> <span class="Statement">=</span>
  <span class="String">&quot;NOTE: copies of this notebook are automatically stored along</span>
<span class="String">  with the generated files. To prevent this, set AutoArchive -&gt; False.</span>
<span class="String">  </span>
<span class="String">  MovieMaker[frameFunction, rangeSpec, options___]</span>
<span class="String">  </span>
<span class="String">  rangeSpec:</span>
<span class="String">  {start, stop, number of intervals}:  {0, 1, 5(*sec*)15(*fps*)}</span>
<span class="String">  {start, stop} integer range:  {1, 20}</span>
<span class="String">  {explicit list}:  {AstronomicalData[\&quot;Earth\&quot;,\&quot;OrbitPath\&quot;][[1]]}</span>
<span class="String">  </span>
<span class="String">  The Label option determines the folder name under which the animation</span>
<span class="String">  is created. For example, if changing a variable X makes a different</span>
<span class="String">  animation, then place that variable in the Label spec so that when you</span>
<span class="String">  change that variable, the animation will be generated in a different folder.</span>
<span class="String">  </span>
<span class="String">  Likewise, the first element of the Process spec determines the folder</span>
<span class="String">  and uniqueness of the process function. Processes work in subfolders of</span>
<span class="String">  the main project folder, meaning you can experiment with multiple processes</span>
<span class="String">  in a single project.</span>
<span class="String">  </span>
<span class="String">  MovieMaker[</span>
<span class="String">   {ToLowerCase[#], ToUpperCase[#]} &amp;, {CharacterRange[\&quot; \&quot;, \&quot;~\&quot;]},</span>
<span class="String">   Serialization -&gt; Hash, Label -&gt; \&quot;UpperLower\&quot;, FileTypes -&gt; {\&quot;.mx\&quot;, \&quot;.png\&quot;, \&quot;.gif\&quot;},</span>
<span class="String">   Process -&gt; {\&quot;times\&quot;, ImageMultiply @@ Map[Rasterize[#, ImageSize -&gt; 400 {1, 1}] &amp;, #] &amp;},</span>
<span class="String">   MovieOptions -&gt; {\&quot;DisplayDurations\&quot; -&gt; 1}, MapFunction -&gt; Map]</span>
<span class="String">  </span>
<span class="String">  Serialization is for converting values to valid file names.</span>
<span class="String">  MapFunction is for when you don't want to use parallelization.</span>
<span class="String">  Directory setting specifies the specific project folder, overriding Label.&quot;</span>;

<span class="Identifier">Options</span>[MovieMaker] <span class="Statement">=</span> {
   Label <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>, Process <span class="Statement">-&gt;</span> {<span class="Identifier">None</span>, <span class="Identifier">None</span>}, MapFunction <span class="Statement">-&gt;</span> ParallelMap, AutoArchive <span class="Statement">-&gt;</span> <span class="Identifier">True</span>,
   FileTypes <span class="Statement">-&gt;</span> {<span class="String">&quot;.png&quot;</span>, <span class="String">&quot;.png&quot;</span>, <span class="String">&quot;.avi&quot;</span>}, MakeMovie <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, MovieOptions <span class="Statement">-&gt;</span> {}, Directory <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
   Ordering <span class="Statement">-&gt;</span> (<span class="Identifier">BlockRandom</span>[<span class="Identifier">RandomSample</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), Serialization <span class="Statement">-&gt;</span> <span class="Identifier">Composition</span>[List, Chop, N]};
</pre>
                </li>
                <li name="2">
                <pre style="font-size: 4px">
<span class="Comment">(* After I wrote this program, a more powerful approach occurred to me. We could have a</span>
<span class="Comment">macro that would be used something like this: *)</span>
<span class="Identifier">FileBackedProcess</span>[<span class="Identifier">Function</span>[val,
   a <span class="Statement">=</span> <span class="Identifier">S</span>[<span class="Type">1</span>][<span class="Identifier">Rasterize</span><span class="Statement">@</span><span class="Identifier">dirp</span>[val]];
   b <span class="Statement">=</span> <span class="Identifier">S</span>[<span class="Type">2</span>][<span class="Identifier">Rasterize</span><span class="Statement">@</span><span class="Identifier">derp</span>[val]];
   <span class="Identifier">S</span>[<span class="Type">3</span>][<span class="Identifier">ImageMultiply</span>[a, b]]]];
<span class="Comment">(* where the S[i_][body_] are the momoization points into the file system. If the S finds</span>
<span class="Comment">the file corresponding to the [i][body], then the file is imported. Otherwise it executes</span>
<span class="Comment">the body and saves the file. The point would be to make the file aspect as</span>
<span class="Comment">easy as annotating things with S[i] *)</span>

<span class="Identifier">MovieMaker</span>[<span class="Type">frameF_</span>, <span class="Identifier">List</span>[<span class="Type">valueList_List</span>], <span class="Identifier">OptionsPattern</span>[]] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{
   tooltip, mainLabel, processLabel, processF, mapF, frameExt, processedExt, movieExt, dir,
   framesDir, processedDir, movieFile, fileMap, numFrames, alive <span class="Statement">=</span> <span class="Identifier">True</span>, folder0exists,
   foldersExistL, folder1exists, folder2exists, progress1, progress2, movieDone, makeFrames,
   processFrames, makeMovie, serialization, archive, makeMovieA, preview, printPreview, printFileMap},

  <span class="Identifier">tooltip</span>[<span class="Type">expr_</span>] <span class="Statement">:=</span> <span class="Identifier">Tooltip</span>[<span class="Statement">#</span>, expr, TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>] <span class="Statement">&amp;</span>;
  {mainLabel, mapF, makeMovieA, serialization} <span class="Statement">=</span>
   <span class="Identifier">OptionValue</span>[{Label, MapFunction, MakeMovie, Serialization}];

  {processLabel, processF} <span class="Statement">=</span>
   <span class="Identifier">Replace</span>[<span class="Identifier">OptionValue</span>[Process], {
     {<span class="Type">pf_</span>} <span class="Statement">:&gt;</span> {<span class="Identifier">ToString</span>[pf], pf},
     <span class="Type">pf </span><span class="Statement">:</span> <span class="Identifier">Except</span>[<span class="Type">_List</span>] <span class="Statement">:&gt;</span> {<span class="Identifier">ToString</span>[pf], pf}}];

  {frameExt, processedExt, movieExt} <span class="Statement">=</span> <span class="Identifier">PadRight</span>[
    <span class="Identifier">Flatten</span>[<span class="Identifier">List</span>[<span class="Identifier">OptionValue</span>[FileTypes]]], <span class="Type">3</span>,
    FileTypes <span class="Statement">/.</span> <span class="Identifier">Options</span>[MovieMaker]];

  mainLabel <span class="Statement">=</span> <span class="Identifier">Replace</span>[mainLabel,
    <span class="Identifier">Automatic</span> <span class="Statement">-&gt;</span> <span class="Identifier">IntegerString</span>[<span class="Identifier">Hash</span>[{frameF, valueList}, <span class="String">&quot;CRC32&quot;</span>], <span class="Type">36</span>]];
  dir <span class="Statement">=</span> <span class="Identifier">Replace</span>[<span class="Identifier">OptionValue</span>[Directory], <span class="Identifier">Automatic</span> <span class="Statement">-&gt;</span>
     <span class="Identifier">FileNameJoin</span>[{<span class="Identifier">NotebookDirectory</span>[], <span class="String">&quot;vids&quot;</span>, <span class="Identifier">ToString</span>[mainLabel]}]];

  framesDir <span class="Statement">=</span> <span class="Identifier">FileNameJoin</span>[{dir, <span class="String">&quot;frames&quot;</span>}];
  processedDir <span class="Statement">=</span> <span class="Identifier">FileNameJoin</span>[{dir, <span class="String">&quot;processed&quot;</span>, <span class="Identifier">ToString</span>[processLabel]}];
  movieFile <span class="Statement">=</span> <span class="Identifier">FileNameJoin</span>[{dir, <span class="Identifier">ToString</span>[{processLabel, mainLabel}] <span class="Statement">&lt;&gt;</span> movieExt}];

  <span class="Comment">(* main iteration construct *)</span>
  <span class="Identifier">fileMap</span>[<span class="Type">f_</span>, <span class="Type">vals_</span><span class="Statement">:</span> valueList, <span class="Type">map_</span><span class="Statement">:</span> mapF] <span class="Statement">:=</span> <span class="Identifier">map</span>[<span class="Identifier">Function</span>[val,
     <span class="Identifier">f</span>[
      <span class="Identifier">FileNameJoin</span>[{framesDir,
        <span class="Identifier">ToString</span>[<span class="Identifier">serialization</span>[val]] <span class="Statement">&lt;&gt;</span> frameExt}],
      <span class="Identifier">FileNameJoin</span>[{processedDir,
        <span class="Identifier">ToString</span>[<span class="Identifier">serialization</span>[val]] <span class="Statement">&lt;&gt;</span> processedExt}],
      val]],
    vals];

  numFrames <span class="Statement">=</span> <span class="Identifier">Length</span>[valueList];
  progress1 <span class="Statement">=</span> <span class="Identifier">Total</span><span class="Statement">@</span><span class="Identifier">Boole</span>[<span class="Identifier">fileMap</span>[<span class="Identifier">FileExistsQ</span>[<span class="Statement">#1</span>] <span class="Statement">&amp;</span>]];
  progress2 <span class="Statement">=</span> <span class="Identifier">Total</span><span class="Statement">@</span><span class="Identifier">Boole</span>[<span class="Identifier">fileMap</span>[<span class="Identifier">FileExistsQ</span>[<span class="Statement">#2</span>] <span class="Statement">&amp;</span>]];
  foldersExistL <span class="Statement">=</span> <span class="Identifier">FileExistsQ </span><span class="Statement">/@</span> {dir, framesDir, processedDir};
  movieDone <span class="Statement">=</span> <span class="Identifier">FileExistsQ</span>[movieFile];
  <span class="Identifier">SetSharedVariable</span>[progress1, progress2];

  <span class="Identifier">If</span>[<span class="Identifier">OptionValue</span>[AutoArchive] <span class="Statement">&amp;&amp;</span> <span class="Identifier">FileExistsQ</span>[dir] <span class="Statement">&amp;&amp;</span>
    <span class="Statement">!</span> <span class="Identifier">FileExistsQ</span>[<span class="Identifier">FileNameJoin</span>[{dir, <span class="Identifier">ToString</span>[mainLabel] <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.nb&quot;</span>}]],
   <span class="Identifier">Export</span>[<span class="Identifier">FileNameJoin</span>[{dir, <span class="Identifier">ToString</span>[mainLabel] <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.nb&quot;</span>}],
    <span class="Identifier">NotebookGet</span>[<span class="Identifier">EvaluationNotebook</span>[]]]];
</pre>
                </li>
                <li name="3">
                <pre style="font-size: 3px">
<span class="Comment">(**)</span>
<span class="Identifier">makeFrames</span>[] <span class="Statement">:=</span> (
   <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">CreateDirectory</span>[framesDir];
   <span class="Identifier">foldersExistL</span>[[<span class="Type">1</span> ;; <span class="Type">2</span>]] <span class="Statement">=</span> {<span class="Identifier">True</span>, <span class="Identifier">True</span>};
   <span class="Identifier">If</span>[<span class="Identifier">OptionValue</span>[AutoArchive],
    <span class="Identifier">Export</span>[<span class="Identifier">FileNameJoin</span>[{dir, <span class="Identifier">ToString</span>[mainLabel] <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.nb&quot;</span>}],
     <span class="Identifier">NotebookGet</span>[<span class="Identifier">EvaluationNotebook</span>[]]]];

   <span class="Identifier">fileMap</span>[<span class="Identifier">If</span>[<span class="Statement">!</span> <span class="Identifier">FileExistsQ</span>[<span class="Statement">#1</span>],
      <span class="Identifier">Export</span>[<span class="Statement">#1</span>, <span class="Identifier">frameF</span>[<span class="Statement">#3</span>]];
      progress1<span class="Statement">++</span>] <span class="Statement">&amp;</span>,
    <span class="Identifier">OptionValue</span>[Ordering][valueList]]);

<span class="Comment">(**)</span>
<span class="Identifier">processFrames</span>[] <span class="Statement">:=</span> <span class="Identifier">If</span>[
   processF <span class="Statement">=!=</span> <span class="Identifier">None</span>,
   <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">CreateDirectory</span>[processedDir];
   <span class="Identifier">foldersExistL</span>[[<span class="Type">3</span>]] <span class="Statement">=</span> <span class="Identifier">True</span>;
   <span class="Identifier">If</span>[<span class="Identifier">OptionValue</span>[AutoArchive],
    <span class="Identifier">Export</span>[<span class="Identifier">FileNameJoin</span>[{processedDir, <span class="Identifier">ToString</span>[{mainLabel, processLabel}] <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.nb&quot;</span>}],
     <span class="Identifier">NotebookGet</span>[<span class="Identifier">EvaluationNotebook</span>[]]]];

   <span class="Identifier">fileMap</span>[<span class="Identifier">If</span>[<span class="Statement">!</span> <span class="Identifier">FileExistsQ</span>[<span class="Statement">#2</span>] <span class="Statement">&amp;&amp;</span> <span class="Identifier">FileExistsQ</span>[<span class="Statement">#1</span>],
      <span class="Identifier">Export</span>[<span class="Statement">#2</span>, <span class="Identifier">processF</span>[<span class="Identifier">Import</span>[<span class="Statement">#1</span>]]];
      progress2<span class="Statement">++</span>] <span class="Statement">&amp;</span>,
    <span class="Identifier">OptionValue</span>[Ordering][valueList]]];

<span class="Comment">(**)</span>
<span class="Identifier">makeMovie</span>[] <span class="Statement">:=</span> <span class="Identifier">If</span>[makeMovieA,
   <span class="Identifier">If</span>[<span class="Identifier">FileExistsQ</span>[movieFile],
    <span class="Identifier">Print</span>[<span class="String">&quot;movie file already exists&quot;</span>],
    <span class="Identifier">With</span>[{ab <span class="Statement">=</span> <span class="Identifier">If</span>[processF <span class="Statement">===</span> <span class="Identifier">None</span>, <span class="Statement">#1</span>, <span class="Statement">#2</span>]},
     <span class="Identifier">If</span>[<span class="Identifier">And </span><span class="Statement">@@</span> <span class="Identifier">fileMap</span>[<span class="Identifier">FileExistsQ</span>[ab] <span class="Statement">&amp;</span>],
      <span class="Identifier">Check</span>[
        <span class="Identifier">Export</span>[movieFile, <span class="Identifier">fileMap</span>[<span class="Identifier">Import</span>[ab] <span class="Statement">&amp;</span>],
         <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">OptionValue</span>[MovieOptions]];
        movieDone <span class="Statement">=</span> <span class="Identifier">True</span>, <span class="Identifier">Message</span>[<span class="Type">MovieMaker::</span><span class="Special">expqq</span>];
        movieDone <span class="Statement">=</span> <span class="Identifier">False</span>, {<span class="Type">Export::</span><span class="Special">errelem</span>}]]]]];

<span class="Comment">(**)</span>
<span class="Identifier">preview</span>[] <span class="Statement">:=</span> <span class="Identifier">preview</span>[<span class="Identifier">RandomChoice</span>[valueList]];
<span class="Identifier">preview</span>[<span class="Type">val_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{frame, fileName, tempFile},
   tempFile <span class="Statement">=</span> <span class="Identifier">FileNameJoin</span>[{<span class="Identifier">$TemporaryDirectory</span>, <span class="Identifier">ToString</span>[<span class="Identifier">Hash</span>[val]] <span class="Statement">&lt;&gt;</span> frameExt}];
   fileName <span class="Statement">=</span> <span class="Identifier">First</span><span class="Statement">@</span><span class="Identifier">fileMap</span>[<span class="Statement">#1</span> <span class="Statement">&amp;</span>, {val}];

   <span class="Identifier">If</span>[<span class="Identifier">FileExistsQ</span>[fileName],
    <span class="Comment">(**)</span>frame <span class="Statement">=</span> <span class="Identifier">Import</span>[fileName],
    <span class="Comment">(**)</span>frame <span class="Statement">=</span> <span class="Identifier">Import</span>[<span class="Identifier">Export</span>[tempFile, <span class="Identifier">frameF</span>[val]]];
    <span class="Identifier">Print</span>[<span class="Identifier">Labeled</span>[frame, <span class="Identifier">N</span><span class="Statement">@</span>val, <span class="Identifier">Right</span>]]; <span class="Identifier">Beep</span>[]];

   <span class="Identifier">If</span>[processF <span class="Statement">=!=</span> <span class="Identifier">None</span>,
    <span class="Identifier">Print</span>[<span class="Identifier">Labeled</span>[<span class="Identifier">processF</span>[frame], <span class="Identifier">N</span><span class="Statement">@</span>val, <span class="Identifier">Right</span>]]; <span class="Identifier">Beep</span>[]]];

<span class="Comment">(**)</span>
<span class="Identifier">printPreview</span>[] <span class="Statement">:=</span> <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[<span class="Identifier">Defer</span>[
     <span class="Identifier">preview</span>[<span class="Identifier">Placeholder</span>[<span class="String">&quot;val&quot;</span>]]], <span class="String">&quot;Input&quot;</span>]];

<span class="Comment">(**)</span>
<span class="Identifier">printFileMap</span>[] <span class="Statement">:=</span> <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[<span class="Identifier">Defer</span>[
     frames2 <span class="Statement">=</span> <span class="Identifier">fileMap</span>[<span class="Identifier">If</span>[<span class="Identifier">FileExistsQ</span>[<span class="Statement">#2</span>], <span class="Identifier">Import</span>[<span class="Statement">#2</span>], <span class="Identifier">Sequence </span><span class="Statement">@@</span> {}] <span class="Statement">&amp;</span>];],
    <span class="String">&quot;Input&quot;</span>]];

<span class="Comment">(**)</span>
<span class="Identifier">archive</span>[] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{fileName},
   fileName <span class="Statement">=</span> <span class="Identifier">ToString</span>[mainLabel] <span class="Statement">&lt;&gt;</span> <span class="String">&quot; &quot;</span> <span class="Statement">&lt;&gt;</span>
     <span class="Identifier">DateString</span>[{<span class="String">&quot;DateShort&quot;</span>,
       <span class="String">&quot; (&quot;</span>, <span class="String">&quot;Hour12&quot;</span>, <span class="String">&quot; &quot;</span>, <span class="String">&quot;Minute&quot;</span>, <span class="String">&quot; &quot;</span>, <span class="String">&quot;Second&quot;</span>, <span class="String">&quot; &quot;</span>, <span class="String">&quot;AMPM&quot;</span>, <span class="String">&quot;)&quot;</span>}];

   <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">CreateDirectory</span>[dir];
   <span class="Identifier">foldersExistL</span>[[<span class="Type">1</span>]] <span class="Statement">=</span> <span class="Identifier">True</span>;
   <span class="Identifier">Export</span>[<span class="Identifier">FileNameJoin</span>[{dir, fileName <span class="Statement">&lt;&gt;</span> <span class="String">&quot;.nb&quot;</span>}],
    <span class="Identifier">NotebookGet</span>[<span class="Identifier">EvaluationNotebook</span>[]]];

   <span class="Identifier">Beep</span>[]];
</pre>
                </li>
                <li name="4">
                <pre style="font-size: 4px">
<span class="Comment">(*controls*)</span>
  <span class="Identifier">With</span>[{
    btnMakeFrames <span class="Statement">=</span> <span class="Identifier">Button</span>[<span class="String">&quot;frames + process + movie&quot;</span>,
      <span class="Identifier">makeFrames</span>[]; <span class="Identifier">Beep</span>[]; <span class="Identifier">processFrames</span>[]; <span class="Identifier">Beep</span>[]; <span class="Identifier">makeMovie</span>[]; <span class="Identifier">Beep</span>[],
      Method <span class="Statement">-&gt;</span> <span class="String">&quot;Queued&quot;</span>, Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[progress1 <span class="Statement">=!=</span> numFrames]],
    btnProcessFrames <span class="Statement">=</span> <span class="Identifier">Button</span>[<span class="String">&quot;process + movie&quot;</span>,
      <span class="Identifier">processFrames</span>[]; <span class="Identifier">Beep</span>[]; <span class="Identifier">makeMovie</span>[]; <span class="Identifier">Beep</span>[],
      Method <span class="Statement">-&gt;</span> <span class="String">&quot;Queued&quot;</span>, Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[
        progress2 <span class="Statement">=!=</span> numFrames <span class="Statement">&amp;&amp;</span> progress1 <span class="Statement">=!=</span> <span class="Type">0</span> <span class="Statement">&amp;&amp;</span> processF <span class="Statement">=!=</span> <span class="Identifier">None</span>]],
    btnMakeMovie <span class="Statement">=</span> <span class="Identifier">Button</span>[<span class="String">&quot;movie&quot;</span>,
      <span class="Identifier">makeMovie</span>[]; <span class="Identifier">Beep</span>[],
      Method <span class="Statement">-&gt;</span> <span class="String">&quot;Queued&quot;</span>, Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[
        (progress2 <span class="Statement">===</span> numFrames <span class="Statement">||</span>
           (processF <span class="Statement">===</span> <span class="Identifier">None</span> <span class="Statement">&amp;&amp;</span> progress1 <span class="Statement">===</span> numFrames)) <span class="Statement">&amp;&amp;</span>
         <span class="Statement">!</span> movieDone <span class="Statement">&amp;&amp;</span> makeMovieA]],
    btnMainFolder <span class="Statement">=</span> <span class="Identifier">tooltip</span>[<span class="String">&quot;open folder&quot;</span>]<span class="Statement">@</span>
      <span class="Identifier">Button</span>[{mainLabel, processLabel}, <span class="Identifier">SystemOpen</span>[dir],
       Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">foldersExistL</span>[[<span class="Type">1</span>]]]],
    btnFramesFolder <span class="Statement">=</span> <span class="Identifier">tooltip</span>[<span class="String">&quot;open folder&quot;</span>]<span class="Statement">@</span>
      <span class="Identifier">Button</span>[{<span class="Identifier">Dynamic</span>[progress1]<span class="Statement">/</span><span class="Identifier">ToString</span>[numFrames],
        <span class="Identifier">ProgressIndicator</span>[<span class="Identifier">Dynamic</span>[progress1<span class="Statement">/</span>numFrames]]},
       <span class="Identifier">SystemOpen</span>[framesDir],
       Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">foldersExistL</span>[[<span class="Type">2</span>]]]],
    btnProcessFolder <span class="Statement">=</span> <span class="Identifier">tooltip</span>[<span class="String">&quot;open folder&quot;</span>]<span class="Statement">@</span>
      <span class="Identifier">Button</span>[{<span class="Identifier">Dynamic</span>[progress2]<span class="Statement">/</span><span class="Identifier">ToString</span>[numFrames],
        <span class="Identifier">ProgressIndicator</span>[<span class="Identifier">Dynamic</span>[progress2<span class="Statement">/</span>numFrames]]},
       <span class="Identifier">SystemOpen</span>[processedDir],
       Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[processF <span class="Statement">=!=</span> <span class="Identifier">None</span> <span class="Statement">&amp;&amp;</span> <span class="Identifier">foldersExistL</span>[[<span class="Type">3</span>]]]],
    btnMovieFile <span class="Statement">=</span> <span class="Identifier">tooltip</span>[<span class="String">&quot;open movie&quot;</span>]<span class="Statement">@</span>
      <span class="Identifier">Button</span>[{<span class="Identifier">Dynamic</span>[<span class="Identifier">Boole</span>[movieDone]]<span class="Statement">/</span><span class="String">&quot;1&quot;</span>,
        <span class="Identifier">ProgressIndicator</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">Boole</span>[movieDone]<span class="Statement">/</span><span class="Type">1</span>]]},
       <span class="Identifier">SystemOpen</span>[movieFile], Enabled <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[movieDone]]},

   <span class="Comment">(*without going the extra mile, better to have no persistence*)</span>
   <span class="Identifier">Dynamic</span>[<span class="Identifier">If</span>[alive <span class="Statement">===</span> <span class="Identifier">True</span>,
       <span class="Identifier">Panel</span>[<span class="Statement">#</span>, FrameMargins <span class="Statement">-&gt;</span> {{<span class="Identifier">Automatic</span>, <span class="Identifier">Automatic</span>}, {<span class="Identifier">Automatic</span>, <span class="Type">0</span>}}],
       <span class="Identifier">Panel</span>[<span class="Identifier">Tooltip</span>[<span class="Identifier">Overlay</span>[{
           <span class="Identifier">Style</span>[<span class="String">&quot;VWXYZ&quot;</span>, <span class="Identifier">Lighter</span>[LightGray, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>], FontFamily <span class="Statement">-&gt;</span> <span class="String">&quot;Wingdings&quot;</span>],
           <span class="Identifier">Style</span>[<span class="String">&quot;dead&quot;</span>, <span class="Identifier">Darker</span>[<span class="Identifier">Red</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">6</span>]]}, <span class="Identifier">All</span>, <span class="Type">2</span>, Alignment <span class="Statement">-&gt;</span> {Center, Center}],
         <span class="String">&quot;R.I.P. this MovieMaker module&quot;</span>],
        FrameMargins <span class="Statement">-&gt;</span> <span class="Type">0</span>]]] <span class="Statement">&amp;</span><span class="Statement">@</span>

    <span class="Identifier">Manipulate</span>[
     <span class="Identifier">Grid</span>[{
       {btnMainFolder, SpanFromLeft},
       {btnMakeFrames, btnFramesFolder},
       {btnProcessFrames, btnProcessFolder},
       {btnMakeMovie, btnMovieFile}}],

     Bookmarks <span class="Statement">:&gt;</span> {
       <span class="String">&quot;preview&quot;</span> <span class="Statement">:&gt;</span> <span class="Identifier">AbortProtect</span>[<span class="Identifier">preview</span>[]],
       <span class="Identifier">Overscript</span>[<span class="Identifier">Row</span>[{<span class="String">&quot;print &quot;</span>, <span class="Identifier">Style</span>[<span class="String">&quot;preview&quot;</span>, Bold], <span class="String">&quot; function&quot;</span>}], <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> <span class="Identifier">printPreview</span>[],
       <span class="Identifier">Row</span>[{<span class="String">&quot;print &quot;</span>, <span class="Identifier">Style</span>[<span class="String">&quot;fileMap&quot;</span>, Bold], <span class="String">&quot; function&quot;</span>}] <span class="Statement">:&gt;</span> <span class="Identifier">printFileMap</span>[],
       <span class="Identifier">Overscript</span>[<span class="String">&quot;write archive&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> <span class="Identifier">archive</span>[],
       <span class="String">&quot;shoot&quot;</span> <span class="Statement">:&gt;</span> (alive <span class="Statement">=</span> <span class="Identifier">False</span>)},
     Paneled <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, FrameMargins <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]]];
</pre>
                </li>
            </ol>
            </li>
            <li name="?">
    <pre style="font-size: 5px">
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {numPoints, <span class="Type">_Integer</span>}, {wowzerz, <span class="Type">_Real</span>}},
   <span class="Identifier">Module</span>[{diff, b},
    <span class="Comment">(*NestList for less memory usage. i didn't actually verify this*)</span>
    <span class="Identifier">NestList</span>[(
       b <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[vertices];
       diff <span class="Statement">=</span> b <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> b) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> wowzerz]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, numPoints]]];

<span class="Identifier">proc</span>[<span class="Type">img1_</span>, <span class="Type">cf_</span><span class="Statement">:</span> <span class="Identifier">ColorData</span>[<span class="Type">1</span>], <span class="Type">mode_</span><span class="Statement">:</span> <span class="Identifier">None</span>, <span class="Type">blur_</span><span class="Statement">:</span> <span class="Type">8</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{img, components, rank, largest, colored},
   img <span class="Statement">=</span> <span class="Identifier">RemoveAlphaChannel</span>[<span class="Identifier">ColorNegate</span><span class="Statement">@</span><span class="Identifier">ColorConvert</span>[img1, <span class="String">&quot;Grayscale&quot;</span>]];
   components <span class="Statement">=</span> <span class="Identifier">MorphologicalComponents</span>[img];

   <span class="Identifier">Module</span>[{measurements, sorted},
    measurements <span class="Statement">=</span> <span class="Identifier">ComponentMeasurements</span>[components, <span class="String">&quot;Count&quot;</span>];
    sorted <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">SortBy</span>[measurements, Last];
    <span class="Identifier">rank</span>[<span class="Type">label_</span>] <span class="Statement">:=</span> (<span class="Identifier">rank</span>[label] <span class="Statement">=</span> <span class="Identifier">Position</span>[sorted, label][[<span class="Type">1</span>, <span class="Type">1</span>]])];

   colored <span class="Statement">=</span> <span class="Identifier">Colorize</span>[components,
     ColorFunction <span class="Statement">-&gt;</span> (<span class="Identifier">cf</span>[<span class="Identifier">rank</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];
   <span class="Identifier">If</span>[mode <span class="Statement">==</span> <span class="String">&quot;Angelic&quot;</span>,
    colored <span class="Statement">=</span> <span class="Identifier">ImageMultiply</span>[img, colored]];
   <span class="Identifier">ColorNegate</span>[<span class="Identifier">ImageMultiply</span>[<span class="Identifier">ColorNegate</span>[img],
       <span class="Identifier">Blur</span>[<span class="Statement">#</span>, blur] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">ColorNegate</span>[colored]]] <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span>];

<span class="Identifier">Needs</span>[<span class="String">&quot;PolyhedronOperations`&quot;</span>];
vertices <span class="Statement">=</span> <span class="Identifier">OpenTruncate</span>[<span class="Identifier">PolyhedronData</span>[<span class="String">&quot;Icosahedron&quot;</span>, <span class="String">&quot;Faces&quot;</span>]][[<span class="Type">1</span>]];
vertices <span class="Statement">=</span> <span class="Identifier">Rescale</span>[vertices] <span class="Statement">-</span> <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>; <span class="Comment">(*rescale to 1/2 {-1, 1} range*)</span>

{numFrames, imageSize, numPoints} <span class="Statement">=</span> {
   {<span class="Type">5</span><span class="Comment">(*sec*)</span><span class="Type">15</span><span class="Comment">(*fps*)</span>, {<span class="Type">16</span>, <span class="Type">9</span>} (<span class="Type">360</span><span class="Statement">/</span><span class="Type">9</span>), <span class="Type">600000</span>},
   {<span class="Type">5</span><span class="Comment">(*sec*)</span><span class="Type">15</span><span class="Comment">(*fps*)</span>, {<span class="Type">16</span>, <span class="Type">9</span>} (<span class="Type">1080</span><span class="Statement">/</span><span class="Type">9</span>), <span class="Type">10000000</span>}}[[<span class="Type">2</span>]];

label <span class="Statement">=</span> {<span class="String">&quot;NUCLEAR1080P&quot;</span>, numPoints, <span class="Identifier">IntegerString</span>[<span class="Identifier">Hash</span>[vertices, <span class="String">&quot;CRC32&quot;</span>], <span class="Type">36</span>]};

process <span class="Statement">=</span> {
    {<span class="String">&quot;[COLORDATA3]&quot;</span>, <span class="Identifier">Composition</span>[
      <span class="Identifier">proc</span>[<span class="Statement">#</span>, <span class="Identifier">If</span>[<span class="Statement">#</span> <span class="Statement">==</span> <span class="Type">1</span>, <span class="Identifier">Blue</span>, <span class="Identifier">ColorData</span>[<span class="Type">3</span>][<span class="Statement">#</span>]] <span class="Statement">&amp;</span>, <span class="String">&quot;Angelic&quot;</span>, <span class="Type">1</span>] <span class="Statement">&amp;</span>,
      <span class="Identifier">ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>]] <span class="Statement">&amp;</span>, <span class="Identifier">Blur</span>[<span class="Statement">#</span>, <span class="Type">1</span>] <span class="Statement">&amp;</span>, ImageAdjust]},
    {<span class="String">&quot;[HIGHBLUR]&quot;</span>, <span class="Identifier">Composition</span>[
      <span class="Identifier">proc</span>[<span class="Statement">#</span>, <span class="Identifier">If</span>[<span class="Statement">#</span> <span class="Statement">==</span> <span class="Type">1</span>, <span class="Identifier">Blue</span>, <span class="Identifier">ColorData</span>[<span class="Type">3</span>][<span class="Statement">#</span>]] <span class="Statement">&amp;</span>, <span class="String">&quot;Angelic&quot;</span>, <span class="Type">40</span>] <span class="Statement">&amp;</span>,
      <span class="Identifier">ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>]] <span class="Statement">&amp;</span>, ImageAdjust]}}[[<span class="Type">2</span>]];

<span class="Identifier">frame</span>[<span class="Type">w_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">PointSize</span>[<span class="Type">0</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">game</span>[vertices, numPoints, w]]},
   ImageSize <span class="Statement">-&gt;</span><span class="Comment">(**)</span><span class="Type">2</span><span class="Comment">(**)</span>imageSize, ViewVertical <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
   SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
   ViewVector <span class="Statement">-&gt;</span> {<span class="Identifier">RotationTransform</span>[<span class="Type">2</span> <span class="Identifier">Pi</span> w, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}][{<span class="Type">1</span>, <span class="Type">0</span>, (w <span class="Statement">-</span> <span class="Statement">.</span><span class="Type">25</span>) <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>}], {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}}];

<span class="Identifier">MovieMaker</span>[frame, {<span class="Statement">.</span><span class="Type">4</span>, <span class="Statement">.</span><span class="Type">75</span>, <span class="Type">4</span> numFrames},
 Label <span class="Statement">-&gt;</span> label, Process <span class="Statement">-&gt;</span> process]
</pre>
            </li>
        </ol>

        <p>
        This just need some James Horner music. And science majors, witness a <span class="flipbookLink" name="fadeleaf animation" index="2">dangerous nuclear science experiment gone horribly awesome</span>. These are animations on the $w$ factor. For the source, you can just use the <span class="flipbookLink" name="fadeleaf animation" index="3">basic code</span>. But if you intend to do more general experimentation, then something like my little <span class="flipbookLink" name="fadeleaf animation" index="4">MovieMaker</span> utility will be useful. It's a quite general utility. Each of these movies took something on the order of 20 hours for my computer to make. That's why having a minimal-fuss setup is convenient.
        </p>

        <p>
        As for the renderings and animations themselves, they're basically me chewing a few times on one of the leaves of one of the branches of a tree I happened to run up the side of like a monkey. There's a lot of trees in this jungle to monoperambulate.
        </p>

        <p>
        What's great about these structures is that they are still fractals. They may look spazzy and some of them may remind you of Vash the Stampede's plant mode arm, but they possess self-similarity throughout. For example, why do the arms of the nest look like that?
        </p>

        <ol class="flipbook static" name="fadeleaf 3D 3">
            <li>
            <img src="img/sier3Dranderexp1.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/sier3Dranderexp2.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/sier3Dranderexp3.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/sier3Dranderexp4.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/sier3Dranderexp5.png" width="700" height="394" />
            </li>
            <li>
            <img src="img/sier3Dranderexp6.png" width="700" height="394" />
            </li>
        </ol>

        <p>
        It's because the <span class="flipbookLink" name="fadeleaf 3D 3" index="2">nest as a whole</span> looks like that. And notice that as the <span class="flipbookLink" name="fadeleaf 3D 3" index="3">big bird</span> flies in from below to explode into the nest, the <span class="flipbookLink" name="fadeleaf 3D 3" index="4">little birds all around the nest</span> follow along (because adults know best) and explode into their own little nests, and <span class="flipbookLink" name="fadeleaf 3D 3" index="5">so on</span>, producing the distinctive infinitary echela of simultaneously exploding dinosaur progeny. And notice that the big bird itself is a version of the entire figure. Now, as for the <span class="flipbookLink" name="fadeleaf 3D 3" index="6">hat</span>, who knows.
        </p>

        <p>
        The chaos game is an algorithm that we use for the sake of computational convenience. The "real" algorithm doesn't randomly pick among the vertices, it takes every point toward every observer at each step. And it's actually easy to see how the self-similarity of the algorithm comes about. Look here at a house and an observer:
        </p>

        <ol class="flipbook static" name="house observer">
            <li>
            <img src="img/sierifsexp1.png" width="600" height="531" />
            </li>
            <li>
            <img src="img/sierifsexp2.png" width="600" height="531" />
            </li>
            <li>
            <img src="img/sierifsexp3.png" width="600" height="531" />
            </li>
            <li>
            <img src="img/sierifsexp4.png" width="600" height="531" />
            </li>
            <li>
            <img src="img/sierifsexp5.png" width="600" height="531" />
            </li>
        </ol>

        <p>
        If we run one step of the "real" algorithm, we get <span class="flipbookLink" name="house observer" index="2">this</span>. Something interesting here is that there is no difference between what the observer sees in either case. The little house is exactly blocking his or her view of the bigger house, like an inescapable mathematical version of a really tall person sitting in front of you at a theatre (formally we would say the houses are <i>cosyzygous</i>). If we start with two observers, we get <span class="flipbookLink" name="house observer" index="3">this</span> then <span class="flipbookLink" name="house observer" index="4">this</span>.
        </p>

        <p>
        So it's clear that the scaled-skewed self-similarity is inevitable. What I find interesting is that for a given set of vertices and distance function, the resulting figure as a whole is also inevitable. You can start the chaos game at any point (or points, because e.g. the $\small{\frac 1 2}$ factor effectively shrinks your whole house into a point) and you will end up with the same figure, just a different approximation of it.
        </p>

        <p>
        Another way of thinking about it is that the resulting figure is precisely the figure that all observers "agree on":
        </p>

<br />
        <center>
        <img src="img/sier3Dobs6.png" width="600" height="334" />
        </center>
<br />

        <p>
        Because running the full algorithm on the entire figure does nothing. I.e. the figure is the fixed point of the algorithm. This automagic consensusing bonks my head and seems to me to carry a particular philosophical undertone... over which I shalln't digress.
        </p>

        <p>
        Mathematically, it appears our chaos game shennaneganery as a whole falls under the <a href="http://en.wikipedia.org/wiki/Contraction_mapping_principle">contraction mapping principle</a>. Tersely complicated explanations of inconfusably simple things not withstanding, I know me some topology but not enough to understand the bigger picture of what's going on.
        </p>

        <p>
        On the subject of hats, when going from 2D L-systems to 3D L-systems I had to put a hat on the turtle and also give it the ability to do backflips and taco rolls:
        </p>

        <span title="There is a saying to the effect of &quot;pretty things are in people's eyeballs.&quot; It is in that spirit that I leave it to you to decide which composition is better.">
            <!-- "indeed, the eyeballs of the people," continues the full quote -->
        <ol class="flipbook static" name="turtle 3D composition">
            <li name="with ramen">
            <img src="img/turtle3Dwithramen.jpg" width="500" height="667" />
            </li>
            <li name="without ramen">
            <img src="img/turtle3Dwithoutramen.jpg" width="500" height="667" />
            </li>
        </ol>
    </span>

        <p>
        Even wearing Mugen's shoes. Wow. Unfortunately, as epic as this is, with our current technology we're limited to e.g. representing the turtle's hat with an abstraction called a "vector", which certainly doesn't connote the same social status or sophistication. Still it's enough for some 3D L-systems, such as this version of the arrowhead construction:
        </p>

        <ol class="flipbook static" name="l-system 3D 1">
            <li>
            <img src="img/sier3Dlsys2.jpg" width="600" height="600" />
            </li>
            <li>
            <img src="img/sier3Dlsys3.jpg" width="600" height="600" />
            </li>
            <li>
            <img src="img/sier3Dlsys4.png" width="600" height="600" />
            </li>
            <li name="source">

        <ol class="flipbook static" name="l-system 3D 1 source">
        <li name="half 1">
<pre style="font-size: 10px">
<span class="Identifier">Module</span>[{options <span class="Statement">=</span> {
     Axiom <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, Rules <span class="Statement">-&gt;</span> {}, Iterations <span class="Statement">-&gt;</span> <span class="Type">1</span>, Definitions <span class="Statement">-&gt;</span> {},
     DrawStyle <span class="Statement">-&gt;</span> {}, HatStyle <span class="Statement">-&gt;</span> {}, Primitive <span class="Statement">-&gt;</span> Tube, TraceHat <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
     HatWorldplaneStyle <span class="Statement">-&gt;</span> <span class="Identifier">Directive</span>[<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">2</span>]],
     HatPrimitive <span class="Statement">-&gt;</span> <span class="Identifier">Composition</span>[Arrow, Tube], Angle <span class="Statement">-&gt;</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>,
     RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">05</span>]}},

  <span class="Identifier">SetAttributes</span>[Draw, <span class="Identifier">Orderless</span>];

  <span class="Identifier">Draw</span>[<span class="Type">commands </span><span class="Statement">:</span> {<span class="Identifier">Except</span>[<span class="Type">_Rule</span> <span class="Statement">|</span> <span class="Type">_RuleDelayed</span>] <span class="Statement">..</span>},
    <span class="Type">rules </span><span class="Statement">:</span> {(<span class="Type">_Rule</span> <span class="Statement">|</span> <span class="Type">_RuleDelayed</span>) <span class="Statement">..</span>}, <span class="Type">rest___</span>] <span class="Statement">:=</span> <span class="Identifier">Draw</span>[Axiom <span class="Statement">-&gt;</span> commands, Rules <span class="Statement">-&gt;</span> rules, rest];                
  <span class="Identifier">Draw</span>[<span class="Type">rules </span><span class="Statement">:</span> {(<span class="Type">_Rule</span> <span class="Statement">|</span> <span class="Type">_RuleDelayed</span>) <span class="Statement">..</span>}, <span class="Type">rest___</span>] <span class="Statement">:=</span> <span class="Identifier">Draw</span>[Rules <span class="Statement">-&gt;</span> rules, rest];
  <span class="Identifier">Draw</span>[<span class="Type">commands </span><span class="Statement">:</span> {<span class="Identifier">Except</span>[<span class="Type">_Rule</span> <span class="Statement">|</span> <span class="Type">_RuleDelayed</span>] <span class="Statement">..</span>}, <span class="Type">rest___</span>] <span class="Statement">:=</span> <span class="Identifier">Draw</span>[Axiom <span class="Statement">-&gt;</span> commands, rest];
  <span class="Identifier">Draw</span>[<span class="Type">opts </span><span class="Statement">:</span> <span class="Identifier">OptionsPattern</span>[<span class="Identifier">Join</span>[<span class="Identifier">Options</span>[Graphics3D], options]]] <span class="Statement">:=</span>
   <span class="Identifier">Module</span>[{commands, reshape, states, points, hatTrace, hatWorldplane,
     forwardP, leftP, frontflipP, tacoleftP, flipoutP, pushI, popI, definitionsI},

    <span class="Comment">(*basic parameterized state transfer functions*)</span>
    <span class="Identifier">forwardP</span>[<span class="Type">p_</span>][{<span class="Type">z_</span>, <span class="Type">face_</span>, <span class="Type">hat_</span>}] <span class="Statement">:=</span> {z <span class="Statement">+</span> p face, face, hat};
    <span class="Identifier">leftP</span>[<span class="Type">p_</span>][{<span class="Type">z_</span>, <span class="Type">face_</span>, <span class="Type">hat_</span>}] <span class="Statement">:=</span> {z, <span class="Identifier">RotationTransform</span>[p, hat][face], hat};
    <span class="Identifier">tacoleftP</span>[<span class="Type">p_</span>][{<span class="Type">z_</span>, <span class="Type">face_</span>, <span class="Type">hat_</span>}] <span class="Statement">:=</span> {z, face, <span class="Identifier">RotationTransform</span>[p, face][hat]};
    <span class="Identifier">frontflipP</span>[<span class="Type">p_</span>][{<span class="Type">z_</span>, <span class="Type">face_</span>, <span class="Type">hat_</span>}] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{rot},
      rot <span class="Statement">=</span> <span class="Identifier">RotationTransform</span>[p, <span class="Identifier">Cross</span>[hat, face]];
      {z, <span class="Identifier">rot</span>[face], <span class="Identifier">rot</span>[hat]}];
    <span class="Identifier">flipoutP</span>[<span class="Type">p1_</span>, <span class="Type">p2_</span>] <span class="Statement">:=</span> <span class="Identifier">Composition</span>[<span class="Identifier">frontflipP</span>[<span class="Statement">-</span>p2], <span class="Identifier">tacoleftP</span>[<span class="Statement">-</span>p1]];

    <span class="Comment">(*general function. fit elements of l1 into structure of l2*)</span>
    <span class="Identifier">reshape</span>[<span class="Type">l1_</span>, <span class="Type">l2_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{i <span class="Statement">=</span> <span class="Type">1</span>, length <span class="Statement">=</span> <span class="Identifier">Length</span>[l1]},
      <span class="Identifier">Map</span>[<span class="Identifier">l1</span>[[<span class="Identifier">Mod</span>[i<span class="Statement">++</span>, length, <span class="Type">1</span>]]] <span class="Statement">&amp;</span>, l2, {<span class="Statement">-</span><span class="Type">1</span>}]];

    <span class="Comment">(*LIFO stack*)</span>
    {pushI, popI} <span class="Statement">=</span> <span class="Identifier">Module</span>[{stack <span class="Statement">=</span> {}},
      {(<span class="Identifier">AppendTo</span>[stack, <span class="Statement">#</span>]; <span class="Statement">#</span>) <span class="Statement">&amp;</span>,
       <span class="Identifier">Module</span>[{val <span class="Statement">=</span> <span class="Identifier">Last</span>[stack]},
         stack <span class="Statement">=</span> <span class="Identifier">Most</span>[stack];
         val] <span class="Statement">&amp;</span>}];

    <span class="Identifier">With</span>[{vars <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> options},
     <span class="Identifier">Module</span>[vars, vars <span class="Statement">=</span> <span class="Identifier">OptionValue</span>[vars];



     </pre>
            </li>

            <li name="half 2">
            <pre style="font-size: 10px">

      <span class="Identifier">If</span>[Axiom <span class="Statement">===</span> <span class="Identifier">None</span> <span class="Statement">&amp;&amp;</span> Rules <span class="Statement">=!=</span> {}, Axiom <span class="Statement">=</span> <span class="Identifier">Rules</span>[[<span class="Type">1</span>, <span class="Type">1</span>]]];<span class="Comment">(*default axiom*)</span>
      Axiom <span class="Statement">=</span> <span class="Identifier">Flatten</span>[{Axiom}];<span class="Comment">(*normalize to list/directive*)</span>
      {DrawStyle, HatStyle, HatWorldplaneStyle} <span class="Statement">=</span> <span class="Identifier">Directive </span><span class="Statement">/@</span> {DrawStyle, HatStyle, HatWorldplaneStyle};

      Definitions <span class="Statement">=</span> <span class="Identifier">Join</span>[Definitions, {
         F <span class="Statement">-&gt;</span> forward, B <span class="Statement">-&gt;</span> backward, L <span class="Statement">-&gt;</span> left, R <span class="Statement">-&gt;</span> right, FO <span class="Statement">-&gt;</span> flipout, <span class="Identifier">FO</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">flipout</span>[p],
         FF <span class="Statement">-&gt;</span> frontflip, BF <span class="Statement">-&gt;</span> backflip, TL <span class="Statement">-&gt;</span> tacoleft, TR <span class="Statement">-&gt;</span> tacoright}];

      definitionsI <span class="Statement">=</span> {
        <span class="Identifier">forward</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">forwardP</span>[p], <span class="Identifier">backward</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">forwardP</span>[<span class="Statement">-</span>p], <span class="Identifier">left</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">leftP</span>[p],
        <span class="Identifier">right</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">leftP</span>[<span class="Statement">-</span>p], <span class="Identifier">tacoleft</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">tacoleftP</span>[<span class="Statement">-</span>p], <span class="Identifier">tacoright</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">tacoleftP</span>[p],
        <span class="Identifier">frontflip</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">frontflipP</span>[p], <span class="Identifier">backflip</span>[<span class="Type">p_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">frontflipP</span>[<span class="Statement">-</span>p], forward <span class="Statement">-&gt;</span> <span class="Identifier">forwardP</span>[<span class="Type">1</span>],
        backward <span class="Statement">-&gt;</span> <span class="Identifier">forwardP</span>[<span class="Statement">-</span><span class="Type">1</span>], left <span class="Statement">-&gt;</span> <span class="Identifier">leftP</span>[Angle], right <span class="Statement">-&gt;</span> <span class="Identifier">leftP</span>[<span class="Statement">-</span>Angle], tacoleft <span class="Statement">-&gt;</span> <span class="Identifier">tacoleftP</span>[<span class="Statement">-</span>Angle],
        tacoright <span class="Statement">-&gt;</span> <span class="Identifier">tacoleftP</span>[Angle], frontflip <span class="Statement">-&gt;</span> <span class="Identifier">frontflipP</span>[Angle], backflip <span class="Statement">-&gt;</span> <span class="Identifier">frontflipP</span>[<span class="Statement">-</span>Angle],
        flipout <span class="Statement">-&gt;</span> <span class="Identifier">flipoutP</span>[Angle, Angle], <span class="Identifier">flipout</span>[<span class="Type">p1_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">flipoutP</span>[p1, Angle],
        <span class="Identifier">flipout</span>[<span class="Type">p1_</span>, <span class="Type">p2_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">flipoutP</span>[p1, p2], push <span class="Statement">-&gt;</span> pushI,
        pop <span class="Statement">-&gt;</span> <span class="Identifier">Sequence</span>[popI, Identity]<span class="Comment">(*preadjustment for reshape*)</span>};

      <span class="Comment">(*note no memoization. if you try, keep in mind case of RuleDelayed*)</span>
      commands <span class="Statement">=</span> <span class="Identifier">Nest</span>[<span class="Identifier">Flatten</span>[<span class="Identifier">Replace</span>[<span class="Statement">#</span>, Rules, {<span class="Type">1</span>}]] <span class="Statement">&amp;</span>, Axiom, Iterations];
      commands <span class="Statement">=</span> <span class="Identifier">Flatten</span>[((<span class="Statement">#</span> <span class="Statement">/.</span> Definitions) <span class="Statement">/.</span> definitionsI) <span class="Statement">&amp;</span> <span class="Statement">/@</span> commands];
      states <span class="Statement">=</span> <span class="Identifier">ComposeList</span>[commands, <span class="Identifier">N</span><span class="Statement">@</span>{{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}}];

      points <span class="Statement">=</span> <span class="Identifier">reshape</span>[<span class="Identifier">First </span><span class="Statement">/@</span> states, <span class="Identifier">Split</span>[popI <span class="Statement">===</span> <span class="Statement">#</span> <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Join</span>[{<span class="Type">0</span>}, commands]]];<span class="Comment">(*pop is turtle teleportation*)</span>
      points <span class="Statement">=</span> <span class="Identifier">Composition</span>[<span class="Identifier">First </span><span class="Statement">/@</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>, Split] <span class="Statement">/@</span> points;<span class="Comment">(*delete duplicate points*)</span>

      <span class="Identifier">Graphics3D</span>[{
        {RandomStuff <span class="Statement">/.</span> <span class="Identifier">None</span> <span class="Statement">-&gt;</span> {}, {DrawStyle, <span class="Identifier">Primitive</span>[points]}},
        <span class="Identifier">If</span>[TraceHat,
         hatTrace <span class="Statement">=</span> {<span class="Statement">#1</span>, <span class="Statement">#1</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Statement">#3</span><span class="Statement">/</span><span class="Type">5</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> states;
         hatTrace <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Split</span>[hatTrace];<span class="Comment">(*delete duplicate hats*)</span>

         hatWorldplane <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Statement">#4</span>, <span class="Statement">#3</span>} <span class="Statement">&amp;</span> <span class="Statement">@@</span> <span class="Identifier">Flatten</span>[<span class="Statement">#</span>, <span class="Type">1</span>]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Partition</span>[hatTrace, <span class="Type">2</span>, <span class="Type">1</span>];
         {{HatStyle, <span class="Identifier">HatPrimitive</span>[hatTrace]}, {HatWorldplaneStyle, hatWorldplane}}, {}]},
       <span class="Identifier">Quiet</span><span class="Statement">@</span><span class="Identifier">FilterRules</span>[{opts}, <span class="Identifier">Options</span>[Graphics3D]], Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]]]]];

<span class="Identifier">Draw</span>[
 {X, push, BF, L, X, R, R, X, pop, R, X, L, TL, L, X, R, F},
 {F <span class="Statement">-&gt;</span> {F, BF, push, L, X, R, R, X, pop, R, X, L, L, X, R, F},
  X <span class="Statement">-&gt;</span> {F, BF, push, L, F, R, R, R, F, pop, R, F, L, L, F, R, F}},
 Iterations <span class="Statement">-&gt;</span> <span class="Type">3</span>, DrawStyle <span class="Statement">-&gt;</span> {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">65</span>], <span class="Identifier">Glow</span>[<span class="Identifier">Darker</span>[<span class="Identifier">Red</span>, <span class="Type">2</span><span class="Statement">/</span><span class="Type">3</span>]]},
 Definitions <span class="Statement">-&gt;</span> {X <span class="Statement">-&gt;</span> Identity}, Angle <span class="Statement">-&gt;</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">8</span>]
</pre>
            </li>
        </ol>
            </li>
        </ol>

        <p>
        Whoops. Accidentally X-rayed my heart. Or was that <span class="flipbookLink" name="l-system 3D 1" index="2">this one</span>? In any case, <span class="flipbookLink" name="l-system 3D 1" index="3">this</span> is the 3D Sierpinski arrowhead curve. It might not look very 3D, but technically it's 3D because it's made out of a tube instead of a line. All joking aside, try as I might I wasn't able to figure out the construction for the 3D arrowhead curve, sadface.
        </p>

        <p>
        And though this a crushing defeat, we here at the Sierpinski triangle page are stalwart folk for whom such failure is but a rare trigger of recidivistic saccades to our respective vices, for in the characteristic case we amene our fibrile egos by way of the platitudinous homily that what doesn't kill you makes you stronger. In the process of trying to figure out the 3D arrowhead I ended up making an <span class="flipbookLink" name="l-system 3D 1" index="4">easy-to-use flexible L-system program</span>.
        </p>

        <p>
        True story, when I woke up this morning I could have sworn my body was contorting into different LOGO curves, in the hope of trial-and-erroring the arrowhead construction. It was like that dream scene in Fight Club, except instead of a girl it was a LOGO curve. Definitely one of the more Freudiologically-awkward memories I'm going to have to carry around for the rest of my life.
        </p>

        <ol class="flipbook static" name="l-system 3D 2">
            <li>
            <img src="img/sier3Dlsys7.png" width="640" height="669" />
            </li>
            <li>
            <img src="img/sier3Dlsys6.png" width="640" height="745" />
            </li>
            <li>
            <img src="img/sier3Dlsyshattracedemo2.jpg" width="550" height="550" />
            </li>
            <li>
            <img src="img/sier3Dlsys16.png" width="566" height="423" />
            </li>
            <li>
    <div style="width: 640px; height: 809px; top: 50%; margin-top: -750px; position: relative;">
            <img src="img/sier3Dlsys14.png" width="640" height="809" />
    </div>
            </li>
            <li>
            <img src="img/sier3Dlsysemblem1.png" width="640" height="571" />
            </li>
            <li>
            <img title="space alien" src="img/sier3Dlsys20.png" width="550" height="683" />
            </li>
            <li>
            <img src="img/papermotherfuckingclip.jpg" width="640" height="695" />
            </li>
            <li>
            <img src="img/sier3Dlsys21.png" width="644" height="737" />
            </li>
            <li name="?">
<pre style="font-size: 10px">
<span class="Identifier">proc</span>[<span class="Type">img1_</span>, <span class="Type">cf_</span><span class="Statement">:</span> <span class="Identifier">ColorData</span>[<span class="Type">1</span>], <span class="Type">mode_</span><span class="Statement">:</span> <span class="Identifier">None</span>, <span class="Type">blur_</span><span class="Statement">:</span> <span class="Type">8</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{img, components, rank, largest, colored},
   img <span class="Statement">=</span> <span class="Identifier">RemoveAlphaChannel</span>[<span class="Identifier">ColorNegate</span><span class="Statement">@</span><span class="Identifier">ColorConvert</span>[img1, <span class="String">&quot;Grayscale&quot;</span>]];
   components <span class="Statement">=</span> <span class="Identifier">MorphologicalComponents</span>[img];

   <span class="Identifier">Module</span>[{measurements, sorted},
    measurements <span class="Statement">=</span> <span class="Identifier">ComponentMeasurements</span>[components, <span class="String">&quot;Count&quot;</span>];
    sorted <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Reverse</span><span class="Statement">@</span><span class="Identifier">SortBy</span>[measurements, Last];
    <span class="Identifier">rank</span>[<span class="Type">label_</span>] <span class="Statement">:=</span> (<span class="Identifier">rank</span>[label] <span class="Statement">=</span> <span class="Identifier">Position</span>[sorted, label][[<span class="Type">1</span>, <span class="Type">1</span>]])];

   colored <span class="Statement">=</span> <span class="Identifier">Colorize</span>[components, ColorFunction <span class="Statement">-&gt;</span> (<span class="Identifier">cf</span>[<span class="Identifier">rank</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>), ColorFunctionScaling <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];
   <span class="Identifier">If</span>[mode <span class="Statement">==</span> <span class="String">&quot;Angelic&quot;</span>, colored <span class="Statement">=</span> <span class="Identifier">ImageMultiply</span>[img, colored]];
   <span class="Identifier">ColorNegate</span>[<span class="Identifier">ImageMultiply</span>[<span class="Identifier">ColorNegate</span>[img], <span class="Identifier">Blur</span>[<span class="Statement">#</span>, blur] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">ColorNegate</span>[colored]]] <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span>];

<span class="Comment">(**)</span>im <span class="Statement">=</span> <span class="Identifier">Draw</span>[Iterations <span class="Statement">-&gt;</span> <span class="Type">17</span>, {F <span class="Statement">-&gt;</span> {B, <span class="Identifier">left</span>[<span class="Type">.020944</span>], B}, B <span class="Statement">-&gt;</span> {L, F}}, RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
    Angle <span class="Statement">-&gt;</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">5</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">1280</span>, ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>}] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;

<span class="Identifier">GradientFilter</span>[im, <span class="Type">5</span>] <span class="Statement">//</span><span class="Identifier"> ColorNegate</span> <span class="Statement">//</span><span class="Identifier"> proc</span>[<span class="Statement">#</span>, <span class="Identifier">Blue</span> <span class="Statement">&amp;</span>] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ColorNegate</span> <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>]] <span class="Statement">&amp;</span>

<span class="Comment">(**)</span><span class="Identifier">Draw</span>[{A <span class="Statement">-&gt;</span> {B, L, B}, B <span class="Statement">-&gt;</span> {A, R, A}}, Primitive <span class="Statement">-&gt;</span> (<span class="Identifier">Rotate</span>[<span class="Identifier">Line</span>[<span class="Statement">#</span>], <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">24</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}] <span class="Statement">&amp;</span>),
 Iterations <span class="Statement">-&gt;</span> <span class="Type">13</span>, Angle <span class="Statement">-&gt;</span> <span class="Type">7</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">12</span>, Definitions <span class="Statement">-&gt;</span> {B <span class="Statement">-&gt;</span> forward, A <span class="Statement">-&gt;</span> forward},
 DrawStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>}]

<span class="Comment">(**)</span><span class="Identifier">Draw</span>[Iterations <span class="Statement">-&gt;</span> <span class="Type">9</span>, {A <span class="Statement">-&gt;</span> {B, L, B}, B <span class="Statement">-&gt;</span> {A, R, A}}, Definitions <span class="Statement">-&gt;</span> {B <span class="Statement">-&gt;</span> forward, A <span class="Statement">-&gt;</span> forward},
   RandomStuff <span class="Statement">-&gt;</span> {Transparent, <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">05</span>]}, DrawStyle <span class="Statement">-&gt;</span> {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">8</span>], <span class="Identifier">Yellow</span>, <span class="Identifier">Glow</span>[<span class="Identifier">Green</span>]},
   ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>}]

<span class="Comment">(**)</span>d <span class="Statement">=</span> <span class="Identifier">Draw</span>[{swirl <span class="Statement">-&gt;</span> <span class="Identifier">ConstantArray</span>[{BF, F, BF, swirl, <span class="Identifier">FO</span>[<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">12</span>]}, <span class="Type">5</span>]}, DrawStyle <span class="Statement">-&gt;</span> <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">9</span>], RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
    Primitive <span class="Statement">-&gt;</span> (<span class="Identifier">Line</span>[<span class="Identifier">First</span><span class="Statement">@</span><span class="Statement">#</span>,
      VertexColors <span class="Statement">-&gt;</span> (<span class="Identifier">Darker</span>[<span class="Statement">#</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">8</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">ColorData</span>[<span class="String">&quot;AvocadoColors&quot;</span>] <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span>, <span class="Type">1</span><span class="Statement">/</span>(<span class="Identifier">Length</span>[<span class="Identifier">First</span>[<span class="Statement">#</span>]] <span class="Statement">-</span> <span class="Type">1</span>)])] <span class="Statement">&amp;</span>),
    Definitions <span class="Statement">-&gt;</span> {swirl <span class="Statement">-&gt;</span> backward}, Iterations <span class="Statement">-&gt;</span> <span class="Type">6</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>, Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
    Background <span class="Statement">-&gt;</span> <span class="Identifier">Lighter</span>[LightGray, <span class="Type">7</span><span class="Statement">/</span><span class="Type">12</span>]] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;

d <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ImageReflect</span>[<span class="Statement">#</span>, Top <span class="Statement">-&gt;</span> Bottom] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ImagePad</span>[<span class="Statement">#</span>, <span class="Type">2</span>, <span class="Identifier">Lighter</span>[LightGray, <span class="Type">7</span><span class="Statement">/</span><span class="Type">12</span>]] <span class="Statement">&amp;</span>

<span class="Comment">(**)</span><span class="Identifier">Draw</span>[Iterations <span class="Statement">-&gt;</span> <span class="Type">8</span>, {F <span class="Statement">:&gt;</span> {F, <span class="Identifier">flipout</span>[<span class="Statement">.</span><span class="Type">2</span> <span class="Identifier">RandomReal</span>[], <span class="Identifier">Pi</span> <span class="Identifier">RandomReal</span>[]], F}}]

<span class="Comment">(**)</span>h <span class="Statement">=</span> <span class="Identifier">Draw</span>[{R <span class="Statement">-&gt;</span> {B, R, R, R, F}}, Iterations <span class="Statement">-&gt;</span> <span class="Type">8</span>, Primitive <span class="Statement">-&gt;</span> Line, RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
    Angle <span class="Statement">-&gt;</span> <span class="Type">1907</span><span class="Statement">/</span><span class="Type">2048</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>, ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Identifier">Infinity</span>}] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>;

<span class="Identifier">proc</span>[h <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span>, <span class="Identifier">Yellow</span> <span class="Statement">&amp;</span>, <span class="String">&quot;Anglic&quot;</span>, <span class="Type">13</span>] <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span>

<span class="Comment">(**)</span>diff <span class="Statement">=</span> <span class="Identifier">ImageDifference </span><span class="Statement">@@</span> <span class="Identifier">Table</span>[
   <span class="Identifier">Draw</span>[{arc, F, arc}, {F <span class="Statement">-&gt;</span> {F, F, arc, F, arc, F, arc, F, F}}, Primitive <span class="Statement">-&gt;</span> (<span class="Identifier">Tube</span>[<span class="Statement">#</span>, <span class="Statement">.</span><span class="Type">115</span>] <span class="Statement">&amp;</span>), Angle <span class="Statement">-&gt;</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>,
     Definitions <span class="Statement">-&gt;</span> {F <span class="Statement">-&gt;</span> <span class="Identifier">forward</span>[<span class="Type">6</span>], arc <span class="Statement">-&gt;</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Table</span>[{<span class="Identifier">forward</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">backflip</span>[<span class="Statement">.</span><span class="Type">899</span> <span class="Statement">.</span><span class="Type">1047</span>], <span class="Identifier">right</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span> <span class="Statement">.</span><span class="Type">1047</span>]}, {<span class="Type">160</span>}]]},
     Iterations <span class="Statement">-&gt;</span> <span class="Type">2</span>, DrawStyle <span class="Statement">-&gt;</span> color, RandomStuff <span class="Statement">-&gt;</span> <span class="Identifier">None</span>, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
     ViewPoint <span class="Statement">-&gt;</span> {<span class="Type">3</span>, <span class="Statement">-</span><span class="Type">0.25</span>, <span class="Statement">-</span><span class="Type">1.5</span>}, ViewVertical <span class="Statement">-&gt;</span> {<span class="Type">0.56</span>, <span class="Statement">-</span><span class="Type">0.66</span>, <span class="Statement">-</span><span class="Type">0.7</span>}, ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>] <span class="Statement">//</span><span class="Identifier"> Rasterize</span>,
   {color, {LightGray, <span class="Identifier">White</span>}}];

diff <span class="Statement">//</span><span class="Identifier"> ColorNegate</span> <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span> <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span>
</pre>
            </li>
        </ol>

        <p>
        What makes this program great is that even just for 2D L-systems, the 3D perspective makes things more intuitive. The arrowhead problem also demanded debugging features such as <span class="flipbookLink" name="l-system 3D 2" index="3">keeping track of the turtle's orientation</span>, a definite necessity because of the enormous degrees of freedom that geometric L-systems possess.
        </p>

        <p>
        To give you an idea of this freedom, all of the items in <span class="flipbookLink" name="l-system 3D 2" index="4">this table</span> are the same exact L-system at the same exact power. The only difference between them is the base angle specified. (By the way, notice Voltron. This is how you know L-systems are Turing complete.) If you take a couple of these to higher powers you get <span class="flipbookLink" name="l-system 3D 2" index="1">these </span><span class="flipbookLink" name="l-system 3D 2" index="2">images</span> (11th and 13th iterations). It's interesting to wonder what some of these might look like at say the thousandth or billionth iteration. Or even, the <i>millionth</i>.
        </p>

        <p>
        <b>Sidenote.</b> You may have noticed that I never really explained what L-systems are. In fact what I do and don't explain on this page is pretty much completely arbitrary, largely to annoy people who are already familiar with all of this stuff. "Why aren't you mentioning IFS" I hear them crying. Hilarious. But if you've used Mathematica you know that it's well-suited for replacement schemes such as L-systems in a way that is difficult to convey in the context of other languages. Take a look at a simple function definition in Mathematica:
        </p>

        <ol class="flipbook static" name="language arts">
            <li>
            <pre><span class="Identifier">add</span>[<span class="Type">a_</span>, <span class="Type">b_</span>] <span class="Statement">:=</span> a <span class="Statement">+</span> b</pre>
            </li>
            <li>
            <pre><span class="Identifier">add</span>[<span class="Type">_</span>, <span class="Type">_</span>] <span class="Statement">:=</span> <span class="Type">1</span></pre>
            </li>
        </ol>

        <p>
        What this is saying is: Whenever something matching the pattern <span style="font-family: monospace">add[a_, b_]</span> is found, replace it by <span style="font-family: monospace">a + b</span>. In other words, function application is a special case of pattern matching. Those <span style="font-family: monospace">_</span> characters are the analogue of the regex <span style="font-family: monospace">.</span> character, the Kleene proton. So <span style="font-family: monospace">a_</span> means "match any single thing, and call it <span style="font-family: monospace">a</span>". You can in fact <span class="flipbookLink" name="language arts" index="2">do this</span>, which will make the 'function' return 1 when it is passed any two things, as well as use more involved patterns.
        </p>

        <p>
        I point this out because it can be difficult to appreciate the fundamental straightforwardness of the Mathematica language, I think even for people who have used it for a while. And especially if you're coming to Mathematica from more mainstream languages where the idea of function application being a special case of something more general would be considered some kind of unreachable koan.
        </p>

        <p>
        The arrowhead isn't the only L-system that can create the Sierpinski figure. More likely there are an infinite number of distinct L-systems that form the Sierpinski triangle in the limit. When we were fiddling with the Sierpinski triangle as a graph, you may have noticed that the zig zag and criss cross had recursive structure:
        </p>

        <ol class="flipbook static" name="zigzag crisscross">
            <li>
            <img src="img/sier3Dlsysresistorplot.png" width="600" height="522" />
            </li>
            <li>
            <img src="img/siergraph12.gif" width="360" height="314" />
            </li>
            <li>
            <img src="img/siergraph13.gif" width="360" height="314" />
            </li>
            <li>
            
        <ol class="flipbook static" name="grapherization">
            <li name="image">
            <img src="img/siergrapherized2.png" width="360" height="377" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">With</span>[{v <span class="Statement">=</span> <span class="Type">5</span>},
  axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v)]];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
    (<span class="Identifier">Polygon</span>[<span class="Identifier">ScalingTransform</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span> {<span class="Type">1</span>, <span class="Type">1</span>}, <span class="Statement">#</span>][pts]] <span class="Statement">&amp;</span> <span class="Statement">/@</span> pts);

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];

<span class="Identifier">draw</span>[<span class="Type">2</span>]
<span class="Identifier">GraphPlot3D</span>[<span class="Identifier">draw</span>[<span class="Type">2</span>]]
</pre>
            </li>
        </ol>

            </li>
            <li name="source">
<pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];

g <span class="Statement">=</span> <span class="Identifier">draw</span>[<span class="Type">2</span>];
cycle <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[{FindHamiltonianCycle, FindEulerianCycle}][g][[<span class="Type">1</span>]];

<span class="Identifier">Animate</span>[
 <span class="Identifier">HighlightGraph</span>[g, <span class="Identifier">Graph</span>[<span class="Identifier">cycle</span>[[<span class="Type">1</span> ;; n]]],
  EdgeShapeFunction <span class="Statement">-&gt;</span> (<span class="Identifier">Line</span>[<span class="Statement">#1</span>] <span class="Statement">&amp;</span>),
  VertexShapeFunction <span class="Statement">-&gt;</span> <span class="Identifier">None</span>,
  GraphHighlightStyle <span class="Statement">-&gt;</span> <span class="String">&quot;DehighlightHide&quot;</span>],
 {n, <span class="Type">1</span>, <span class="Identifier">Length</span>[cycle], <span class="Type">1</span>}, AnimationRate <span class="Statement">-&gt;</span> <span class="Type">1</span>]
</pre>
            </li>
        </ol>

        <p>
        We can find these paths for the 3D Sierpinski graph as well, though not necessarily. In fact all along we could have been <span class="flipbookLink" name="zigzag crisscross" index="4">grapherizing a lot of our stuff</span>, even things like the different distance functions. My point here however is that we may be able to reverse-engineer an L-system from these structures. And it might not actually be hard at all. It does have the down side however of sounding really boring, so on to nonboringer pastures we skidaddle-prance.
        </p>

        <p>
        Since cellular automata often have the 'world' array joined at the ends, it makes sense to think of their evolution as being on a cylinder:
        </p>

        <ol class="flipbook static" name="cellular automata 3D 1">
            <li>
            <img src="img/sier3Dca3.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca4.png" width="500" height="381" />
            </li>
            <li>
            <img src="img/sier3Dca6.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca1.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca16.png" width="640" height="508" />
            </li>
            <li>
            <img src="img/sier3Dca12.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca20.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dcakitty1.png" width="640" height="543" />
            </li>
            <li>
            <img src="img/sier3Dcatomoe1.png" width="644" height="644" />
            </li>
            <li name="source">
            <pre>
<span class="Identifier">draw</span>[<span class="Type">array_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[
   {interval, topinterval, width, height, f, coords},
   {height, width} <span class="Statement">=</span> <span class="Identifier">Dimensions</span>[array];
   interval <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span><span class="Statement">/</span>width;
   topinterval <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> (<span class="Type">1</span> <span class="Statement">+</span> interval)<span class="Statement">/</span>width;
   coords <span class="Statement">=</span> <span class="Identifier">Position</span>[array, <span class="Type">1</span>];

   <span class="Identifier">f</span>[{<span class="Type">x_</span>, <span class="Type">r_</span>}] <span class="Statement">:=</span> <span class="Identifier">Rotate</span>[<span class="Identifier">Translate</span>[
      <span class="Identifier">Cuboid</span>[<span class="Statement">-</span><span class="Statement">#</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span>[<span class="Statement">.</span><span class="Type">5</span> topinterval {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}],
      {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Statement">-</span>interval x}], interval r, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}<span class="Comment">(*;{1,0,0}*)</span>, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}];

   <span class="Identifier">Graphics3D</span>[{{<span class="Identifier">Lighter</span>[LightBlue], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
      <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>interval height<span class="Statement">/</span><span class="Type">2</span>}, <span class="Statement">.</span><span class="Type">5</span>]},
     <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">White</span>, <span class="Identifier">f </span><span class="Statement">/@</span> coords}, options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Identifier">draw</span>[<span class="Identifier">CellularAutomaton</span>[<span class="Type">22</span>,
  <span class="Identifier">ConstantArray</span>[<span class="Type">0</span>, <span class="Type">500</span>]<span class="Statement">~</span><span class="Identifier">ReplacePart</span><span class="Statement">~</span>{<span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="Type">1</span>, <span class="Type">251</span> <span class="Statement">-&gt;</span> <span class="Type">1</span>}, <span class="Type">125</span>],
 Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>]</pre>
            </li>
            <li name="?">
            <pre style="font-size: 12px">
<span class="Identifier">draw2</span>[<span class="Type">im_Image</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">draw2</span>[<span class="Identifier">ImageData</span>[<span class="Identifier">ColorConvert</span>[im, <span class="String">&quot;RGB&quot;</span>]], options];
<span class="Identifier">draw2</span>[<span class="Type">array_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[
   {interval, width, height, f, cubes, coords},
   {height, width} <span class="Statement">=</span> <span class="Identifier">Dimensions</span>[array][[{<span class="Type">1</span>, <span class="Type">2</span>}]];
   interval <span class="Statement">=</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span><span class="Statement">/</span>width;
   coords <span class="Statement">=</span> <span class="Identifier">Position</span>[array, <span class="Type">p_</span> <span class="Statement">/;</span> p <span class="Statement">!=</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">2</span>}];

   <span class="Identifier">f</span>[{<span class="Type">x_</span>, <span class="Type">r_</span>}] <span class="Statement">:=</span> <span class="Identifier">Rotate</span>[<span class="Identifier">Translate</span>[
      <span class="Identifier">Cuboid</span>[<span class="Statement">-</span><span class="Statement">#</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span>[<span class="Statement">.</span><span class="Type">5</span> interval {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}],
      {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Statement">-</span>interval x}], interval r, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}];

   cubes <span class="Statement">=</span> <span class="Identifier">MapThread</span>[{<span class="Identifier">RGBColor </span><span class="Statement">@@</span> <span class="Statement">#1</span>, <span class="Identifier">f</span>[<span class="Statement">#2</span>]} <span class="Statement">&amp;</span>,
     {<span class="Identifier">array</span>[[<span class="Statement">##</span>]] <span class="Statement">&amp;</span> <span class="Statement">@@@</span> coords, coords}];

   <span class="Identifier">Graphics3D</span>[{{<span class="Identifier">Lighter</span>[LightBlue], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
      <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Statement">-</span>interval height<span class="Statement">/</span><span class="Type">2</span>}, <span class="Statement">.</span><span class="Type">5</span>]},
     <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], cubes}, options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Comment">(*this rule from </span><span class="String">&quot;<a href="http://web.cecs.pdx.edu/~mm/evca-review.pdf">http://web.cecs.pdx.edu/~mm/evca-review.pdf</a>&quot;</span><span class="Comment">*)</span>
rules <span class="Statement">=</span> <span class="Identifier">Thread</span>[<span class="Identifier">Tuples</span>[{<span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Type">7</span>}] <span class="Statement">-&gt;</span>
    <span class="Identifier">IntegerDigits</span>[<span class="Identifier">FromDigits</span>[<span class="String">&quot;0504058705000f77037755837bffb77f&quot;</span>, <span class="Type">16</span>], <span class="Type">2</span>, <span class="Type">128</span>]];

arr <span class="Statement">=</span> <span class="Identifier">FixedPointList</span>[<span class="Identifier">CellularAutomaton</span>[rules], <span class="Identifier">RandomInteger</span>[<span class="Type">1</span>, <span class="Type">600</span>]];
arrEdge <span class="Statement">=</span> <span class="Identifier">ArrayPlot</span>[arr, PixelConstrained <span class="Statement">-&gt;</span> <span class="Type">1</span>, Frame <span class="Statement">-&gt;</span> <span class="Identifier">False</span>] <span class="Statement">//</span><span class="Identifier"> EdgeDetect</span> <span class="Statement">//</span><span class="Identifier"> ImageData</span>;

<span class="Comment">(*ad hoc coloring, originally intended for particle animation*)</span>
pat1 <span class="Statement">=</span> {{<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>}, {<span class="Type">_</span>, <span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, {<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>}};
pat2 <span class="Statement">=</span> {{<span class="Type">_</span>, <span class="Type">1</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>}, {<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">1</span>, <span class="Type">_</span>, <span class="Type">_</span>}, {<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">1</span>, <span class="Type">_</span>}};
pat3 <span class="Statement">=</span> {{<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>}, {<span class="Type">_</span>, <span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">_</span>}, {<span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>, <span class="Type">_</span>}};
(<span class="Identifier">f</span>[<span class="Statement">#1</span> <span class="Statement">|</span> <span class="Identifier">Reverse </span><span class="Statement">/@</span> <span class="Statement">#1</span>, <span class="Type">_</span>] <span class="Statement">=</span> <span class="Statement">#2</span>) <span class="Statement">&amp;</span> <span class="Statement">@@@</span>
  {<span class="Type">_</span> <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, pat1 <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}, pat2 <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">0</span>}, pat3 <span class="Statement">-&gt;</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}};

<span class="Comment">(*see also ImageFilter, ImageConvolve, a million other things*)</span>
colored <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[{f, {}, {<span class="Type">1</span>, <span class="Type">2</span>}}, arrEdge];

<span class="Identifier">Image</span>[colored]
<span class="Identifier">draw2</span>[colored, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>]
</pre>
            </li>
        </ol>

        <p>
        This is <span class="flipbookLink" name="cellular automata 3D 1" index="1">Rule 22</span> with two initial black squares. It's a cylindrical mapping of <span class="flipbookLink" name="cellular automata 3D 1" index="2">this</span>. The sphere in the center is an homage to the Sega Saturn. Long live Sega Saturn, long live Dreamcast. Neo Geo forever. <span class="flipbookLink" name="cellular automata 3D 1" index="3">This</span> is a different projection of the same thing, which might actually be easier to comprehend than the cylindrical projection.
        </p>

        <p>
        And a plot of a <span class="flipbookLink" name="cellular automata 3D 1" index="6">range-7 automaton</span>, described in <a href="http://web.cecs.pdx.edu/~mm/evca-review.pdf">this paper</a>, that was evolutionarily engineered to discriminate between majority-white and majority-black initial conditions. And a <span class="flipbookLink" name="cellular automata 3D 1" index="7">particle plot</span> o<span class="flipbookLink" name="cellular automata 3D 1" index="8">NEKO!!!</span> Ka-wa-ii. My hope is the image of this dark hieroglyphic cat infests your dreams with nightmares so mindbendingly horrid your perception of reality and fantasy becomes forever warped. Whoops did I say that out loud. See also my <a href="index.htm#cellularautomata">Cellular Automata</a> program.
        </p>

        <p>
        Of course, there are automata whose evolutions are properly three-dimensional, like these quadrilateral versions of Rule 22:
        </p>

        <ol class="flipbook static" name="cellular automata 3D 2">
            <li>
            <img src="img/sier3Dca2D3.png" width="640" height="338" />
            </li>
            <li>
            <img src="img/sier3Dca2D4.png" width="640" height="462" />
            </li>
            <li>
            <img src="img/sier3Dca2D1.png" width="640" height="290" />
            </li>
            <li>
            <img src="img/sier3Dca2D2.png" width="640" height="449" />
            </li>
            <li>
            <img src="img/sier3Dca2D5.png" width="230" height="500" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">draw</span>[<span class="Type">block_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[
   {<span class="Identifier">EdgeForm</span>[<span class="Identifier">Gray</span>], <span class="Identifier">Cuboid </span><span class="Statement">/@</span> <span class="Identifier">Position</span>[block, <span class="Type">1</span>]},
   options, ViewVertical <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">draw</span>[<span class="Identifier">CellularAutomaton</span>[{
<span class="Type">115792089237316195423570985008687907853269984665640564039476030751986839257106</span>
  , <span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">1</span>}}, {{{<span class="Type">1</span>}}, <span class="Type">0</span>}, <span class="Type">31</span>],
 Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>]
</pre>
            </li>
            <li name="?">
<pre style="font-size: 10px">
<span class="Comment">(**)</span>
grids <span class="Statement">=</span> <span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">3</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Tuples</span>[{<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">9</span>}];
rule <span class="Statement">=</span> <span class="Identifier">IntegerDigits</span>[<span class="Statement">#</span>, <span class="Type">2</span>, <span class="Type">512</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Type">115792089237316195423570985008687907853269984665640564039476030751986839257106</span>;

<span class="Identifier">Dynamic</span>[<span class="Identifier">FromDigits</span>[rule, <span class="Type">2</span>]]
<span class="Identifier">Dynamic</span>[<span class="Identifier">draw</span>[<span class="Identifier">CellularAutomaton</span>[{<span class="Identifier">FromDigits</span>[rule, <span class="Type">2</span>], <span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">1</span>}}, {{{<span class="Type">1</span>}}, <span class="Type">0</span>}, <span class="Type">31</span>]]]

<span class="Identifier">With</span>[{plot <span class="Statement">=</span> <span class="Identifier">Function</span>[c, <span class="Identifier">Magnify</span>[<span class="Identifier">ArrayPlot</span>[<span class="Statement">#1</span>, FrameStyle <span class="Statement">-&gt;</span> c], <span class="Type">1</span><span class="Statement">/</span><span class="Type">6</span>]]},
 <span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">32</span>], Spacings <span class="Statement">-&gt;</span> {<span class="Statement">.</span><span class="Type">1</span>, <span class="Statement">.</span><span class="Type">1</span>}] <span class="Statement">&amp;</span><span class="Statement">@</span>
  <span class="Identifier">MapIndexed</span>[
   <span class="Identifier">Toggler</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">rule</span>[[<span class="Identifier">First</span><span class="Statement">@</span><span class="Statement">#2</span>]]],
     {<span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Identifier">plot</span>[LightGray], <span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="Identifier">plot</span>[<span class="Identifier">Red</span>]}] <span class="Statement">&amp;</span>,
   grids]]

<span class="Comment">(**)</span>
z <span class="Statement">=</span> <span class="Identifier">Import</span>[<span class="String">&quot;<a href="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Game_of_life_glider_gun.svg/610px-Game_of_life_glider_gun.svg.png">http://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Game_of_life_glider_gun.svg/610px-Game_of_life_glider_gun.svg.png</a>&quot;</span>];
z <span class="Statement">=</span> <span class="Identifier">ImageData</span>[<span class="Identifier">ImageResize</span>[z, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">16</span>], Resampling <span class="Statement">-&gt;</span> <span class="String">&quot;Nearest&quot;</span>] <span class="Statement">//</span><span class="Identifier"> Binarize</span> <span class="Statement">//</span><span class="Identifier"> ColorNegate</span>];
<span class="Identifier">Image</span>[z] <span class="Statement">//</span><span class="Identifier"> Magnify</span>

<span class="Identifier">With</span>[{f <span class="Statement">=</span> <span class="Identifier">Switch</span>[
     {<span class="Statement">#</span>[[<span class="Type">2</span>, <span class="Type">2</span>]], <span class="Identifier">Total</span>[<span class="Statement">#</span>, <span class="Type">2</span>] <span class="Statement">-</span> <span class="Statement">#</span>[[<span class="Type">2</span>, <span class="Type">2</span>]]},
     {<span class="Type">_</span>, <span class="Type">3</span>} <span class="Statement">|</span> {<span class="Type">1</span>, <span class="Type">2</span>}, <span class="Type">1</span>, <span class="Type">_</span>, <span class="Type">0</span>] <span class="Statement">&amp;</span>},

 <span class="Identifier">draw</span>[<span class="Identifier">CellularAutomaton</span>[{f, {}, {<span class="Type">1</span>, <span class="Type">1</span>}}, {z, <span class="Type">0</span>}, <span class="Type">100</span>]]]
</pre>
            </li>
        </ol>

        <p>
        An actual 3D automaton whose evolution would be 4-dimensional:
        </p>

        <ol class="flipbook static" name="cellular automata 3D 3">
            <li>
            <img src="img/sier3Dca3D2.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca3D3.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca3Dliff1.gif" width="400" height="400" />
            </li>
            <li>
            <img src="img/sier3Dca3D8.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dca3D7.png" width="640" height="640" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">block_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[
   {<span class="Identifier">EdgeForm</span>[<span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>]], <span class="Identifier">Cuboid </span><span class="Statement">/@</span> <span class="Identifier">Position</span>[block, <span class="Type">1</span>]},
   options, ViewVertical <span class="Statement">-&gt;</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">0</span>, <span class="Type">0</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">f</span>[<span class="Type">block_</span>, <span class="Type">_</span>] <span class="Statement">:=</span> <span class="Identifier">Switch</span>[
   {<span class="Identifier">block</span>[[<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>]], <span class="Identifier">Total</span>[block, <span class="Type">3</span>] <span class="Statement">-</span> <span class="Identifier">block</span>[[<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>]]},
   {<span class="Type">_</span>, <span class="Type">4</span>}<span class="Comment">(*|{1,2}*)</span>, <span class="Type">1</span>, <span class="Type">_</span>, <span class="Type">0</span>];

evol <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[{f, {}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}},
   {{{{<span class="Type">1</span>, <span class="Type">1</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}<span class="Comment">(*,{1,1},{1,1}*)</span>}}, <span class="Type">0</span>}, <span class="Type">15</span>];

<span class="Identifier">ListAnimate</span>[
 <span class="Identifier">draw</span>[<span class="Statement">#</span>, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">400</span> {<span class="Type">1</span>, <span class="Type">1</span>}] <span class="Statement">&amp;</span> <span class="Statement">/@</span> evol]
</pre>
            </li>
            <li name="?">
            <pre>
<span class="Identifier">draw</span>[<span class="Type">block_</span>, <span class="Type">options___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[{
    <span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>],<span class="Comment">(*Opacity[.8],*)</span>
    <span class="Identifier">Cuboid </span><span class="Statement">/@</span> <span class="Identifier">Position</span>[block, <span class="Type">1</span>],
    <span class="Identifier">Black</span>, <span class="Identifier">Cuboid </span><span class="Statement">/@</span> <span class="Identifier">Position</span>[block, <span class="Type">2</span>]},
   options, Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">f</span>[<span class="Type">block_</span>, <span class="Type">_</span>] <span class="Statement">:=</span> <span class="Identifier">Switch</span>[
   {<span class="Identifier">block</span>[[<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>]], <span class="Identifier">Total</span>[block, <span class="Type">3</span>] <span class="Statement">-</span> <span class="Identifier">block</span>[[<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>]]},
   {<span class="Type">_</span>, <span class="Type">4</span>}, <span class="Type">1</span>, {<span class="Type">0</span>, <span class="Type">3</span>}, <span class="Type">2</span>, <span class="Type">_</span>, <span class="Type">0</span>];

evol <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[{f, {}, {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}},
   {<span class="Identifier">CrossMatrix</span>[<span class="Type">1</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]<span class="Statement">~</span><span class="Identifier">BitXor</span><span class="Statement">~</span><span class="Type">1</span>, <span class="Type">0</span>}, <span class="Type">25</span>];

<span class="Comment">(*can be flashy*)</span>
<span class="Comment">(*ListAnimate[draw[#,ViewPoint-&gt;Top,ImageSize-&gt;400 {1,1}]&amp;/@evol]*)</span>

<span class="Identifier">draw</span>[<span class="Identifier">Last</span>[evol],
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">2</span> <span class="Type">1280</span>, ViewPoint <span class="Statement">-&gt;</span> <span class="Type">2</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>},
   Lighting <span class="Statement">-&gt;</span> {{<span class="String">&quot;Point&quot;</span>, <span class="Identifier">Yellow</span>, <span class="Identifier">Scaled</span>[{<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}], <span class="Type">5</span>}},
   Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>}] <span class="Statement">//</span>
  Rasterize <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span></pre>
        </li>
        </ol>

        <p>
        And just so we're all clear, time isn't "the fourth dimension." That statement is the conceptual version of eating bagels without cream cheese, namely a manifestation of meaniglessness.
        </p>

        <p>
        In rectangular 3D each cell is surrounded by $3^3 - 1 = 26$ cells, so the number of even just simple totalistic rules is very large, nevermind starting configurations. This means that finding "interesting" rules and configurations can be a tricky artform. This is another place where I could use, say, a warehouse full of Alienware laptops.
        </p>

        <p>
        If you have Mathematica 9 (must be nice), its Image3D functionality is perfect for these 3Dified cellular automata. And speaking of grid thingies, let's not forget our unexpectedly-glorious matrix replacement scheme:
        </p>

        <ol class="flipbook static" name="matrix replacement 3D 1">
            <li>
            <img src="img/sier3Dmatrixrepl11.png" width="669" height="732" />
            </li>
            <li>
            <img src="img/sier3Dmatrixrepl8.png" width="669" height="732" />
            </li>
            <li>
            <img src="img/sier3Dmatrixrepl2.png" width="640" height="732" />
            </li>
            <li>
            <img src="img/sier3Dmatrixrepl3.png" width="605" height="732" />
            </li>
            <li>
            <img title="engine room" src="img/engineroom1.png" width="732" height="732" />
            </li>
            <li>
    <div style="width: 1004px; height: 732px; left: 50%; margin-left: -502px; position: relative;">
        <img src="img/sier3Dmatrixrepl5.png" width="1004" height="732" />
    </div>
            </li>
            <li>
            <img src="img/sier3Dmatrixrepl4.png" width="522" height="727" />
            </li>
            <li title="i don't wanna hear no complainin'" name="source">
<pre style="font-size: 2px">






<span class="Comment">(**)</span>
<span class="Identifier">Begin</span>[<span class="String">&quot;mmx`&quot;</span>];

<span class="Identifier">matrixInput3D1</span>[<span class="Identifier">Dynamic</span>[<span class="Type">tensor_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">color_</span>], <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Dynamic</span><span class="Statement">@</span><span class="Identifier">Module</span>[{grid},
    grid <span class="Statement">=</span> <span class="Identifier">Position</span>[<span class="Identifier">ArrayPad</span>[tensor, {<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">1</span>}], <span class="Type">_</span><span class="Statement">?</span><span class="Type">IntegerQ</span>];

    <span class="Identifier">EventHandler</span>[<span class="Statement">#</span>, {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> {}] <span class="Statement">&amp;</span><span class="Statement">@</span>
       <span class="Identifier">Graphics3D</span>[{<span class="Statement">#</span>, Transparent, <span class="Identifier">EdgeForm</span>[LightGray], <span class="Identifier">Cuboid </span><span class="Statement">/@</span> grid},
        options,<span class="Comment">(*Method-&gt;{</span><span class="String">&quot;ShrinkWrap&quot;</span><span class="Comment">-&gt;True},*)</span>Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>

     <span class="Identifier">Array</span>[<span class="Identifier">With</span>[{loc <span class="Statement">:=</span> <span class="Identifier">tensor</span>[[<span class="Statement">##</span>]]},
        <span class="Identifier">Mouseover</span>[
         <span class="Comment">(**)</span>{<span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Darker</span>[color, <span class="Statement">.</span><span class="Type">65</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
           <span class="Identifier">Text</span>[<span class="Identifier">Dynamic</span>[loc <span class="Statement">/.</span> <span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Type">0</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>]]], {<span class="Statement">##</span>}],
          <span class="Identifier">Opacity</span>[loc <span class="Statement">/.</span> {<span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">1</span>, <span class="Type">1</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>}], <span class="Identifier">Sphere</span>[{<span class="Statement">##</span>}, <span class="Statement">.</span><span class="Type">2</span>]},
         <span class="Comment">(**)</span>{<span class="Identifier">Text</span>[<span class="Identifier">EventHandler</span>[<span class="Identifier">Checkbox</span>[<span class="Identifier">Dynamic</span>[loc], {<span class="Type">0</span>, <span class="Type">1</span>}],
            {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> (loc <span class="Statement">=</span> <span class="Type">0</span>)], {<span class="Statement">##</span>}],
          <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>], <span class="Identifier">Sphere</span>[{<span class="Statement">##</span>}, <span class="Statement">.</span><span class="Type">2</span>]}]] <span class="Statement">&amp;</span>,
      <span class="Identifier">Dimensions</span>[tensor]]];

<span class="Identifier">matrixInput3D2</span>[<span class="Identifier">Dynamic</span>[<span class="Type">tensor_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">rules_</span>], <span class="Identifier">Dynamic</span>[<span class="Type">color_</span>], <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Dynamic</span><span class="Statement">@</span><span class="Identifier">DynamicModule</span>[{grid},
    grid <span class="Statement">=</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Array</span>[List, <span class="Identifier">Dimensions</span>[<span class="Identifier">ArrayPad</span>[tensor, {<span class="Type">0</span>, <span class="Statement">-</span><span class="Type">1</span>}]]], <span class="Type">2</span>];

    <span class="Identifier">EventHandler</span>[<span class="Statement">#</span>, {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> {}] <span class="Statement">&amp;</span><span class="Statement">@</span>
       <span class="Identifier">Graphics3D</span>[{<span class="Statement">#</span>, Transparent, <span class="Identifier">EdgeForm</span>[LightGray], <span class="Identifier">Cuboid </span><span class="Statement">/@</span> grid},
        options,<span class="Comment">(*Method-&gt;{</span><span class="String">&quot;ShrinkWrap&quot;</span><span class="Comment">-&gt;True},*)</span>Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>

     <span class="Identifier">Array</span>[<span class="Identifier">With</span>[{loc <span class="Statement">:=</span> <span class="Identifier">tensor</span>[[<span class="Statement">##</span>]]},
        <span class="Identifier">With</span>[{display <span class="Statement">=</span> <span class="Identifier">Tooltip</span>[<span class="Identifier">Panel</span>[<span class="Statement">#</span>, FrameMargins <span class="Statement">-&gt;</span> <span class="Identifier">None</span>],
             <span class="Identifier">Column</span>[{loc <span class="Statement">/.</span> rules <span class="Statement">/.</span> {Reverse <span class="Statement">-&gt;</span> <span class="String">&quot;R&quot;</span>, Transpose <span class="Statement">-&gt;</span> <span class="String">&quot;T&quot;</span>,
                 Composition <span class="Statement">-&gt;</span> List, <span class="Identifier">Verbatim</span>[Slot][<span class="Type">_</span>] <span class="Statement">:&gt;</span> <span class="String">&quot;m&quot;</span>},
               <span class="String">&quot;&quot;</span>, <span class="String">&quot;Click to cycle&quot;</span>, <span class="String">&quot;Right-click to zero&quot;</span>}],
             TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">6</span>] <span class="Statement">&amp;</span>},

         <span class="Identifier">Mouseover</span>[
          <span class="Comment">(**)</span>{<span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Darker</span>[color, <span class="Statement">.</span><span class="Type">65</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
            <span class="Identifier">Text</span>[<span class="Identifier">Dynamic</span>[loc <span class="Statement">/.</span> <span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Identifier">Style</span>[<span class="Type">0</span>, <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>]]], {<span class="Statement">##</span>}],
           <span class="Identifier">Opacity</span>[loc <span class="Statement">/.</span> {<span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">1</span>, <span class="Type">_</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>}], <span class="Identifier">Sphere</span>[{<span class="Statement">##</span>}, <span class="Statement">.</span><span class="Type">2</span>]},
          <span class="Comment">(**)</span>{<span class="Identifier">Text</span>[<span class="Identifier">EventHandler</span>[
             <span class="Identifier">display</span>[
              Toggler<span class="Comment">(*PopupMenu*)</span>[<span class="Identifier">Dynamic</span>[loc], <span class="Identifier">First </span><span class="Statement">/@</span> rules,
               ImageSize <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>]
              ],
             {<span class="String">&quot;MouseDown&quot;</span>, <span class="Type">2</span>} <span class="Statement">:&gt;</span> (loc <span class="Statement">=</span> <span class="Type">0</span>)], {<span class="Statement">##</span>}],
           <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>], <span class="Identifier">Sphere</span>[{<span class="Statement">##</span>}, <span class="Statement">.</span><span class="Type">2</span>]}]]] <span class="Statement">&amp;</span>,
      <span class="Identifier">Dimensions</span>[tensor]]];

bg <span class="Statement">=</span> <span class="Identifier">White</span>;
dims <span class="Statement">=</span> <span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">If</span>[<span class="Statement">#</span> <span class="Statement">&gt;</span> <span class="Type">2</span>, <span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Red</span>], <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">5</span>];

rotations <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Outer</span>[<span class="Identifier">Function</span>[{o, dir},
     <span class="Identifier">Composition</span>[<span class="Identifier">Transpose</span>[<span class="Statement">#</span>, o] <span class="Statement">&amp;</span>, <span class="Identifier">dir </span><span class="Statement">/@</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>, <span class="Identifier">Transpose</span>[<span class="Statement">#</span>, o] <span class="Statement">&amp;</span>]],
    {{<span class="Type">1</span>, <span class="Type">2</span>, <span class="Type">3</span>}, {<span class="Type">3</span>, <span class="Type">2</span>, <span class="Type">1</span>}, {<span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">3</span>}},
    {<span class="Identifier">Composition</span>[Transpose, Reverse],
     <span class="Identifier">Composition</span>[Reverse, Transpose],
     Reverse, Transpose}, <span class="Type">1</span>];

rotations <span class="Statement">=</span> <span class="Identifier">MapIndexed</span>[<span class="String">&quot;S&quot;</span> <span class="Statement">@@</span> <span class="Statement">#2</span> <span class="Statement">-&gt;</span> <span class="Statement">#1</span> <span class="Statement">&amp;</span>, rotations];
defaultRules <span class="Statement">=</span> <span class="Identifier">Join</span>[{<span class="Type">0</span> <span class="Statement">-&gt;</span> (<span class="Type">0</span> <span class="Statement">#</span> <span class="Statement">&amp;</span>), <span class="Type">1</span> <span class="Statement">-&gt;</span> (<span class="Statement">#</span> <span class="Statement">&amp;</span>)}, rotations];

<span class="Identifier">iterate</span>[<span class="Type">matrix0_</span>, <span class="Type">matrixT_</span>, <span class="Type">rules_</span>, <span class="Type">power_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Nest</span>[<span class="Identifier">Function</span>[prev,
    <span class="Identifier">ArrayFlatten</span>[<span class="Identifier">Map</span>[<span class="Statement">#</span>[prev] <span class="Statement">&amp;</span>,
      <span class="Identifier">Replace</span>[matrixT, rules, {<span class="Type">3</span>}], {<span class="Type">3</span>}], <span class="Type">3</span>]],
   matrix0, power];

<span class="Identifier">randomMatrix</span>[<span class="Type">dimensions_</span>, <span class="Type">source_</span>] <span class="Statement">:=</span> <span class="Identifier">With</span>[
   {rv <span class="Statement">:=</span> <span class="Identifier">RandomVariate</span>[<span class="Identifier">ZipfDistribution</span>[<span class="Identifier">Length</span>[source], <span class="Type">1</span>]]},
   <span class="Identifier">Array</span>[<span class="Identifier">source</span>[[rv]] <span class="Statement">&amp;</span>, dimensions]];

<span class="Identifier">With</span>[{HiPrint <span class="Statement">:=</span> <span class="Identifier">Function</span>[viewpoint,
    <span class="Identifier">With</span>[{pow <span class="Statement">=</span> power},
     <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[
       <span class="Identifier">Defer</span>[
        powzerz <span class="Statement">=</span> pow;
        <span class="Identifier">With</span>[{objects <span class="Statement">=</span> <span class="Identifier">Translate</span>[primitive,
            <span class="Identifier">Replace</span>[<span class="Identifier">Position</span>[<span class="Identifier">iterate</span>[
               matrix0 <span class="Statement">/.</span> <span class="Type">0</span> matrix0 <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
               matrixT <span class="Statement">/.</span> <span class="Type">0</span> matrixT <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
               rules, powzerz], <span class="Identifier">If</span>[negativeSpace, <span class="Type">0</span>, <span class="Type">1</span>]],
             {} <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]]},
         <span class="Identifier">ImageResize</span>[<span class="Identifier">Rasterize</span>[<span class="Statement">#</span>], <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">4</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span>
          <span class="Identifier">Defer</span>[Graphics3D][{color, <span class="Identifier">Opacity</span>[opacity],
            <span class="Identifier">Glow</span>[glow], <span class="Identifier">Specularity</span>[specularity],
            <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opacity], <span class="Identifier">Darker</span>[color, <span class="Type">4</span> <span class="Statement">.</span><span class="Type">15</span>]}], objects},
           Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Method <span class="Statement">-&gt;</span> {<span class="String">&quot;ShrinkWrap&quot;</span> <span class="Statement">-&gt;</span> <span class="Identifier">True</span>},
           ImageSize <span class="Statement">-&gt;</span> {<span class="Identifier">Automatic</span>, <span class="Type">4</span> <span class="Type">732</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>,
           ViewPoint <span class="Statement">-&gt;</span> viewpoint, ViewVertical <span class="Statement">-&gt;</span> vv,
           Background <span class="Statement">-&gt;</span> background]]],
       <span class="String">&quot;Input&quot;</span>]]]],

  printMatrices <span class="Statement">:=</span> <span class="Identifier">Function</span>[
    <span class="Identifier">CellPrint</span>[<span class="Identifier">ExpressionCell</span>[<span class="Identifier">DynamicModule</span>[{
        mtx0 <span class="Statement">=</span> matrix0, mtxT <span class="Statement">=</span> matrixT, mtx0o <span class="Statement">=</span> matrix0, mtxTo <span class="Statement">=</span> matrixT,
        clr <span class="Statement">=</span> color, opc <span class="Statement">=</span> opacity, ns <span class="Statement">=</span> negativeSpace, pow <span class="Statement">=</span> power, rls <span class="Statement">=</span> rules,
        prm <span class="Statement">=</span> primitive, iter <span class="Statement">=</span> iterate, bg <span class="Statement">=</span> background, vp1 <span class="Statement">=</span> vp, vv1 <span class="Statement">=</span> vv},

       <span class="Identifier">With</span>[{
         btn <span class="Statement">=</span> <span class="Identifier">Button</span>[<span class="Identifier">DynamicWrapper</span>[<span class="String">&quot;print data&quot;</span>,

            <span class="Identifier">If</span>[mtx0 <span class="Statement">=!=</span> mtx0o <span class="Statement">||</span> mtxT <span class="Statement">=!=</span> mtxTo, mtx0 <span class="Statement">=</span> mtx0o; mtxT <span class="Statement">=</span> mtxTo]],
           <span class="Identifier">Print</span>[<span class="Identifier">Grid</span>[{
              {<span class="String">&quot;kernel matrix&quot;</span>, <span class="Identifier">MatrixForm</span>[mtx0o]},
              {<span class="String">&quot;transformation matrix&quot;</span>, <span class="Identifier">MatrixForm</span>[mtxTo]},
              {<span class="String">&quot;rules&quot;</span>, rls}, {<span class="String">&quot;power&quot;</span>, pow}}]]],
         mtx0c <span class="Statement">=</span> <span class="Identifier">matrixInput3D1</span>[<span class="Identifier">Dynamic</span>[mtx0], <span class="Identifier">Dynamic</span>[clr],
           SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, ImageSize <span class="Statement">-&gt;</span> Small,
           Background <span class="Statement">-&gt;</span> <span class="Identifier">Lighter</span>[bg, <span class="Statement">.</span><span class="Type">8</span>],
           ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp1], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv1]],
         mtxTc <span class="Statement">=</span> <span class="Identifier">matrixInput3D2</span>[<span class="Identifier">Dynamic</span>[mtxT], <span class="Identifier">Dynamic</span>[rls], <span class="Identifier">Dynamic</span>[clr],
           SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, ImageSize <span class="Statement">-&gt;</span> Small,
           Background <span class="Statement">-&gt;</span> <span class="Identifier">Lighter</span>[bg, <span class="Statement">.</span><span class="Type">8</span>],
           ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp1], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv1]],
         g3d <span class="Statement">=</span> <span class="Identifier">With</span>[{objects <span class="Statement">=</span> <span class="Identifier">Translate</span>[prm,
              <span class="Identifier">Replace</span>[<span class="Identifier">Position</span>[<span class="Identifier">iter</span>[
                 mtx0 <span class="Statement">/.</span> <span class="Type">0</span> mtx0 <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
                 mtxT <span class="Statement">/.</span> <span class="Type">0</span> mtxT <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
                 rls, pow], <span class="Identifier">If</span>[ns, <span class="Type">0</span>, <span class="Type">1</span>]],
               {} <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]]},
           <span class="Identifier">Graphics3D</span>[{
             <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opc], <span class="Identifier">Darker</span>[clr, <span class="Type">4</span> <span class="Statement">.</span><span class="Type">15</span>]}],
             clr, <span class="Identifier">Opacity</span>[opc], objects},
            ImageSize <span class="Statement">-&gt;</span> Small, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>,
            ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp1], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv1],
            Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Background <span class="Statement">-&gt;</span> bg]]},

        <span class="Identifier">Panel</span>[<span class="Identifier">Grid</span>[{
           {<span class="Identifier">Panel</span>[<span class="Identifier">Placeholder</span>[<span class="String">&quot;name&quot;</span>]], SpanFromLeft, btn},
           {mtx0c, mtxTc, g3d}}]]]]]]],

  <span class="Comment">(* controls *)</span>
  dim0C <span class="Statement">=</span> <span class="Identifier">Control</span>[{{dim0, <span class="Type">1</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
  dimTC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{dimT, <span class="Type">2</span>, <span class="String">&quot;&quot;</span>}, dims, ControlType <span class="Statement">-&gt;</span> PopupMenu}],
  matrix0C <span class="Statement">=</span> <span class="Identifier">matrixInput3D1</span>[<span class="Identifier">Dynamic</span>[matrix0], <span class="Identifier">Dynamic</span>[color],
    SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[imgSize1],
    Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">Lighter</span>[background, <span class="Statement">.</span><span class="Type">8</span>]],
    ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv]],
  matrixTC <span class="Statement">=</span> <span class="Identifier">matrixInput3D2</span>[<span class="Identifier">Dynamic</span>[matrixT], <span class="Identifier">Dynamic</span>[rules], <span class="Identifier">Dynamic</span>[color],
    SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[imgSize2],
    Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">Lighter</span>[background, <span class="Statement">.</span><span class="Type">8</span>]],
    ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv]],
  rulesC <span class="Statement">=</span> <span class="Identifier">Pane</span>[<span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Type">10</span>], {<span class="Type">400</span>, <span class="Type">200</span>}, Scrollbars <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
    <span class="Identifier">Control</span>[{{rules, defaultRules, <span class="String">&quot;&quot;</span>},
      InputField, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[<span class="Identifier">Lighter</span>[background, <span class="Statement">.</span><span class="Type">65</span>]],
      FieldSize <span class="Statement">-&gt;</span> {<span class="Type">50</span>, {<span class="Type">0</span><span class="Statement">.</span>, <span class="Identifier">Infinity</span>}}}],
  colorC <span class="Statement">=</span>
   <span class="Identifier">Control</span>[{{color, <span class="Identifier">RGBColor</span>[<span class="Statement">.</span><span class="Type">15</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Type">1</span>], <span class="String">&quot;color&quot;</span>}, ColorSlider}],
  backgroundC <span class="Statement">=</span> <span class="Identifier">Row</span>[{<span class="String">&quot;background   &quot;</span>, <span class="Identifier">Framed</span>[
      <span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
       AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Swatch&quot;</span>],
      FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Gray</span>], <span class="String">&quot; &quot;</span>,
     <span class="Identifier">ColorSlider</span>[<span class="Identifier">Dynamic</span>[background, (bg <span class="Statement">=</span> background <span class="Statement">=</span> <span class="Statement">#</span>) <span class="Statement">&amp;</span>],
      AppearanceElements <span class="Statement">-&gt;</span> <span class="String">&quot;Spectrum&quot;</span>, ImageSize <span class="Statement">-&gt;</span> Small]}],
  opacityC <span class="Statement">=</span> <span class="Identifier">Control</span><span class="Statement">@</span>{{opacity, <span class="Type">1</span>, <span class="String">&quot;opacity&quot;</span>}, <span class="Type">0</span>, <span class="Type">1</span>, ImageSize <span class="Statement">-&gt;</span> Small},
  glowC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{glow, <span class="Identifier">Black</span>, <span class="String">&quot;glow&quot;</span>}, ColorSlider}],
  specC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{specularity, <span class="Identifier">Black</span>, <span class="String">&quot;specularity&quot;</span>}, ColorSlider, ImageSize <span class="Statement">-&gt;</span> Small}],
  primC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{primitive, <span class="Identifier">Scale</span>[<span class="Identifier">Cuboid</span>[],<span class="Statement">.</span><span class="Type">99999</span>], <span class="String">&quot;primitive&quot;</span>},
     <span class="Statement">#</span> <span class="Statement">-&gt;</span> <span class="Identifier">Graphics3D</span>[{color, <span class="Statement">#</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, ImageSize <span class="Statement">-&gt;</span> <span class="Type">20</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span>
      {{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Point</span>[{<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}]}, <span class="Identifier">Sphere</span>[{<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}, <span class="Statement">.</span><span class="Type">5</span>],
       {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Scale</span>[<span class="Identifier">Cuboid</span>[],<span class="Statement">.</span><span class="Type">99999</span>]}, <span class="Identifier">Scale</span>[<span class="Identifier">Cuboid</span>[],<span class="Statement">.</span><span class="Type">99999</span>]}, SetterBar}],
  powerC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{power, <span class="Type">1</span>, <span class="String">&quot;power&quot;</span>}, <span class="Type">0</span>, <span class="Type">5</span>, <span class="Type">1</span>, Appearance <span class="Statement">-&gt;</span> <span class="String">&quot;Labeled&quot;</span>}],
  nsC <span class="Statement">=</span> <span class="Identifier">Control</span>[{{negativeSpace, <span class="Identifier">False</span>,
      <span class="Identifier">Tooltip</span>[<span class="String">&quot;negative&quot;</span>, <span class="String">&quot;negative space&quot;</span>,
       TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">4</span>]}, {<span class="Identifier">False</span>, <span class="Identifier">True</span>}}]
  },

 <span class="Comment">(*control layout*)</span>
 <span class="Identifier">With</span>[{controls <span class="Statement">:=</span>
    <span class="Identifier">Row</span>[{
      <span class="Identifier">Column</span>[{
        <span class="Identifier">Row</span>[{dim0C, <span class="String">&quot;   |&quot;</span>, dimTC}],
        <span class="Identifier">Row</span>[{<span class="String">&quot;    &quot;</span>, matrix0C, <span class="String">&quot;  &quot;</span>, matrixTC}]}], <span class="Identifier">Spacer</span>[<span class="Type">40</span>],
      <span class="Identifier">Column</span>[{
        <span class="Identifier">OpenerView</span>[{<span class="String">&quot;Rules&quot;</span>, rulesC}],
        <span class="Identifier">OpenerView</span>[{<span class="String">&quot;Style&quot;</span>,
          <span class="Identifier">Column</span>[{
            <span class="Identifier">Row</span>[{
              <span class="Identifier">Column</span>[{colorC, backgroundC}], <span class="Identifier">Spacer</span>[<span class="Type">40</span>],
              <span class="Identifier">Column</span>[{glowC, specC}]}],
            <span class="Identifier">Row</span>[{opacityC, <span class="Identifier">Spacer</span>[<span class="Type">20</span>], nsC, <span class="Identifier">Spacer</span>[<span class="Type">20</span>], primC}]}]}],
        powerC}]}],

   bookmarks <span class="Statement">:=</span> {
     <span class="Identifier">Overscript</span>[<span class="String">&quot;Random kernel matrix&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span>
       (matrix0 <span class="Statement">=</span> <span class="Identifier">randomMatrix</span>[<span class="Identifier">Dimensions</span>[matrix0], {<span class="Type">0</span>, <span class="Type">1</span>}]),
     <span class="String">&quot;Random transformation matrix&quot;</span> <span class="Statement">:&gt;</span>
       (matrixT <span class="Statement">=</span> <span class="Identifier">randomMatrix</span>[<span class="Identifier">Dimensions</span>[matrixT], <span class="Identifier">First </span><span class="Statement">/@</span> defaultRules]),
     <span class="String">&quot;Random both&quot;</span> <span class="Statement">:&gt;</span> (
       matrix0 <span class="Statement">=</span> <span class="Identifier">randomMatrix</span>[<span class="Identifier">Dimensions</span>[matrix0], {<span class="Type">0</span>, <span class="Type">1</span>}];
       matrixT <span class="Statement">=</span> <span class="Identifier">randomMatrix</span>[<span class="Identifier">Dimensions</span>[matrixT], <span class="Identifier">First </span><span class="Statement">/@</span> defaultRules]),

     <span class="Identifier">Overscript</span>[<span class="String">&quot;Clear kernel matrix&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> (matrix0 <span class="Statement">=</span> <span class="Type">0</span> matrix0),
     <span class="String">&quot;Clear transformation matrix&quot;</span> <span class="Statement">:&gt;</span> (matrixT <span class="Statement">=</span> <span class="Type">0</span> matrixT),
     <span class="String">&quot;Clear both&quot;</span> <span class="Statement">:&gt;</span> ({matrix0, matrixT} <span class="Statement">=</span> <span class="Type">0</span> {matrix0, matrixT}),

     <span class="Identifier">Overscript</span>[<span class="String">&quot;Invert kernel matrix&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> (matrix0 <span class="Statement">=</span> <span class="Identifier">BitXor</span>[matrix0, <span class="Type">1</span>]),
     <span class="String">&quot;Invert transformation matrix&quot;</span> <span class="Statement">:&gt;</span> (matrixT <span class="Statement">=</span> <span class="Identifier">Replace</span>[matrixT, {<span class="Type">0</span> <span class="Statement">-&gt;</span> <span class="Type">1</span>, <span class="Type">_</span> <span class="Statement">-&gt;</span> <span class="Type">0</span>}, {<span class="Type">3</span>}]),

     <span class="Identifier">Overscript</span>[<span class="String">&quot;Print matrices&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> <span class="Identifier">printMatrices</span>[],

     <span class="Identifier">Overscript</span>[<span class="String">&quot;HiPrint&quot;</span>, <span class="String">&quot;&quot;</span>] <span class="Statement">:&gt;</span> <span class="Identifier">HiPrint</span>[vp],
     <span class="String">&quot;HiPrint Far&quot;</span> <span class="Statement">:&gt;</span> <span class="Identifier">HiPrint</span>[<span class="Type">1000</span> vp]}},

  <span class="Identifier">Panel</span>[<span class="Statement">#</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[bg]] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">Manipulate</span>[<span class="Identifier">Module</span>[{g3d, side},

     <span class="Identifier">If</span>[dim0 {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>} <span class="Statement">=!=</span> <span class="Identifier">Dimensions</span>[matrix0], matrix0 <span class="Statement">=</span> <span class="Identifier">PadRight</span>[matrix0, dim0 {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]];
     <span class="Identifier">If</span>[dimT {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>} <span class="Statement">=!=</span> <span class="Identifier">Dimensions</span>[matrixT], matrixT <span class="Statement">=</span> <span class="Identifier">PadRight</span>[matrixT, dimT {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]];
     <span class="Identifier">If</span>[bg <span class="Statement">=!=</span> background, bg <span class="Statement">=</span> background];

     <span class="Identifier">Module</span>[{matrixP},<span class="Comment">(*remove rules from matrix that no longer exist*)</span>
      matrixP <span class="Statement">=</span> <span class="Identifier">Map</span>[<span class="Identifier">Function</span>[a, <span class="Identifier">If</span>[a <span class="Statement">===</span> <span class="Identifier">Replace</span>[a, rules], <span class="Identifier">rules</span>[[<span class="Type">1</span>, <span class="Type">1</span>]], a]], matrixT, {<span class="Type">3</span>}];
      <span class="Identifier">If</span>[matrixT <span class="Statement">=!=</span> matrixP, matrixT <span class="Statement">=</span> matrixP]];

     g3d <span class="Statement">=</span> <span class="Identifier">With</span>[{objects <span class="Statement">=</span> <span class="Identifier">Translate</span>[primitive,
          <span class="Identifier">Replace</span>[<span class="Identifier">Position</span>[<span class="Identifier">iterate</span>[
             matrix0 <span class="Statement">/.</span> <span class="Type">0</span> matrix0 <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
             matrixT <span class="Statement">/.</span> <span class="Type">0</span> matrixT <span class="Statement">-&gt;</span> {{{<span class="Type">1</span>}}},
             rules, power], <span class="Identifier">If</span>[negativeSpace, <span class="Type">0</span>, <span class="Type">1</span>]],
           {} <span class="Statement">-&gt;</span> {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}]]},
       <span class="Identifier">Graphics3D</span>[{
         <span class="Identifier">Dynamic</span>[<span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[opacity], <span class="Identifier">Darker</span>[color, <span class="Type">4</span> <span class="Statement">.</span><span class="Type">15</span>]}]],
         <span class="Identifier">Dynamic</span>[color], <span class="Identifier">Dynamic</span>[<span class="Identifier">Opacity</span>[opacity]], <span class="Identifier">Dynamic</span>[<span class="Identifier">Glow</span>[glow]],
         <span class="Identifier">Dynamic</span>[<span class="Identifier">Specularity</span>[specularity]], objects},
        ImageSize <span class="Statement">-&gt;</span> {{<span class="Type">300</span>, Large}, {<span class="Type">300</span>, Large}},
        Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background]]];

     side <span class="Statement">=</span> <span class="Identifier">Map</span>[<span class="Identifier">Function</span>[vp1,
        <span class="Identifier">Tooltip</span>[<span class="Statement">#</span>, ViewPoint <span class="Statement">-&gt;</span> vp1, TooltipDelay <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">3</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>

           <span class="Identifier">EventHandler</span>[<span class="Statement">#</span>,
            <span class="String">&quot;MouseDown&quot;</span> <span class="Statement">:&gt;</span> (vp <span class="Statement">=</span> vp1 <span class="Statement">/.</span> <span class="Identifier">Infinity</span> <span class="Statement">-&gt;</span> <span class="Type">4</span>; vv <span class="Statement">=</span> {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>})] <span class="Statement">&amp;</span><span class="Statement">@</span>
         <span class="Identifier">Framed</span>[<span class="Identifier">Deploy</span>[
           <span class="Identifier">Show</span>[g3d, ViewPoint <span class="Statement">-&gt;</span> vp1, ImageSize <span class="Statement">-&gt;</span> Small, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]],
          FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Gray</span>, Background <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[background]]],
       <span class="Identifier">Permutations</span>[{<span class="Identifier">Infinity</span>, <span class="Type">0</span>, <span class="Type">0</span>}]];

     <span class="Identifier">Row</span>[{<span class="Identifier">Column</span>[side,<span class="Comment">(*Dividers-&gt;All,*)</span>FrameStyle <span class="Statement">-&gt;</span> <span class="Identifier">Gray</span>],
       <span class="Identifier">Show</span>[g3d, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SphericalRegion <span class="Statement">-&gt;</span> <span class="Identifier">True</span>,
        <span class="Comment">(*PlotRangePadding-&gt;.001,*)</span>
        ViewPoint <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vp], ViewVertical <span class="Statement">-&gt;</span> <span class="Identifier">Dynamic</span>[vv]]}]
     ],

    {{vv, {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    {{vp, {<span class="Type">1.3</span>, <span class="Statement">-</span><span class="Type">2.4</span>, <span class="Type">2</span>}}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    {{imgSize1, Small},
     ControlType <span class="Statement">-&gt;</span>
      <span class="Identifier">None</span>},<span class="Comment">(*prevent matrix controls from autoresizing*)</span>
    {{imgSize2, Small}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    {{background, <span class="Identifier">White</span>}, ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    {{matrix0,
      <span class="Identifier">If</span>[dim0 <span class="Statement">&lt;</span> <span class="Type">2</span>, {{{<span class="Type">1</span>}}}, <span class="Identifier">randomMatrix</span>[dim0 {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}, {<span class="Type">0</span>, <span class="Type">1</span>}]]},
     ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    {{matrixT,
      <span class="Identifier">If</span>[dimT <span class="Statement">&lt;</span> <span class="Type">2</span>, {{{<span class="Type">1</span>}}},
       <span class="Identifier">randomMatrix</span>[dimT {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}, <span class="Identifier">First </span><span class="Statement">/@</span> defaultRules]]},
     ControlType <span class="Statement">-&gt;</span> <span class="Identifier">None</span>},
    controls, Bookmarks <span class="Statement">:&gt;</span> bookmarks,
    LabelStyle <span class="Statement">-&gt;</span> <span class="Identifier">Darker</span>[<span class="Identifier">Gray</span>], SynchronousUpdating <span class="Statement">-&gt;</span> <span class="Identifier">Automatic</span>,
    Paneled <span class="Statement">-&gt;</span> <span class="Identifier">False</span>, SaveDefinitions <span class="Statement">-&gt;</span> <span class="Identifier">True</span>, Alignment <span class="Statement">-&gt;</span> Center]]]

<span class="Comment">(**)</span>
<span class="Identifier">End</span>[];






</pre>
            </li>
        </ol>

        <p>
        This scheme clearly shows the projective character of these algorithms. Take for example this nifty <span class="flipbookLink" name="matrix replacement 3D 1" index="2">3D plus sign made of 3D plus signs</span>, holy mathphobia inducer. It looks like a 2D fractal plus sign when viewed along each axis, but resembles various <span style="white-space: nowrap"><span class="flipbookLink" name="matrix replacement 3D 1" index="3">2D </span><span class="flipbookLink" name="matrix replacement 3D 1" index="4">constructions</span></span> when viewed from mixed angles.
        </p>

        <p>
        What's not obvious from these images is that the <span class="flipbookLink" name="matrix replacement 3D 1" index="1">matrix controls at the top</span> (the pink spheres) and the output figure share the same viewpoint (twirl one, the other two follow). In Mathematica this is as easy as wrapping a couple of things in <span style="font-family: monospace">Dynamic[ ]</span>, after which the system takes care of automatically updating things as necessary. It's pretty much the ideal of what event handling should be, at least for these kinds of applications. The underlying engineering for this on Mathematica's part must be very intricate.
        </p>

        <p>
        And speaking of intricate, this is probably the most complicated Mathematica program I've so far written, in part because I didn't run it through any last-phase refactoring. If you have the courage to fiddle with this program (and I encourage you to have this courage, as the program has a particular issue I couldn't solve), be prepared to suffer dearly for my laziness.
        </p>

        <br/>

        <p>
        Give me a moment.
        </p>

        <br/>

        <p>
        OK, it looks like we're in the inversion section. Where did all this 3D stuff come from? Holy cow. HOLY BRAHMAN DATA COW. Oh I think I know which voice it was. Irregardless, since a bunch of 3D things essentially just programmed themselves into existence while I wasn't looking, this means we can do 3D INVERSIONS!!!! Chaos game.
        </p>

        <ol class="flipbook static" name="inversions 3D 1">
            <li>
            <img src="img/sier3Dinv33.png" width="640" height="611" />
            </li>
            <li>
            <img src="img/sier3Dinv2.png" width="640" height="611" />
            </li>
            <li>
            <img src="img/sier3Dinv4.gif" width="320" height="240" />
            </li>
            <li>
            <img src="img/sier3Dinv5.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dinv6.png" width="640" height="571" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">numPts_</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">FoldList</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>)<span class="Statement">/</span><span class="Type">2</span> <span class="Statement">&amp;</span>, <span class="Statement">.</span><span class="Type">5</span> <span class="Identifier">First</span>[vertices],
      <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPts]]]},
   Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];
vertices <span class="Statement">=</span> <span class="Identifier">Normalize </span><span class="Statement">/@</span> (<span class="Statement">#</span> <span class="Statement">-</span> <span class="Identifier">Mean</span>[vertices] <span class="Statement">&amp;</span>) <span class="Statement">/@</span> vertices;

<span class="Identifier">Show</span>[
 <span class="Identifier">draw</span>[vertices, <span class="Type">20000</span>],
 <span class="Identifier">draw</span>[vertices, <span class="Type">100000</span>] <span class="Statement">/.</span> <span class="Identifier">Point</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Point</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]]
</pre>
            </li>
        </ol>

        <p>
        <span class="flipbookLink" name="inversions 3D 1" index="3">This</span>. Four-headed tri-jawed infinity-mouthed Pac-man langolier. If the world ever decides to give me a nightmare, I hope it picks one of these adorable things to chase me through the dark recesses of my deranged mind. Geometric.
        </p>

        <ol class="flipbook static" name="inversions 3D 2">
            <li>
            <img src="img/sier3Dinv7.png" width="640" height="611" />
            </li>
            <li>
            <img src="img/sier3Dinv8.png" width="640" height="571" />
            </li>
            <li>
            <img src="img/sier3Dinv9.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dinv26.png" width="640" height="650" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">shape_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{next},
   <span class="Comment">(*scale by 1/2 toward each vertex, in turn*)</span>
   <span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[prev, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

   <span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">15</span>]],
     <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>shape, n]},
    Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

shape <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;Faces&quot;</span>];
<span class="Identifier">shape</span>[[<span class="Type">1</span>]] <span class="Statement">=</span> <span class="Identifier">Normalize </span><span class="Statement">/@</span> (<span class="Statement">#</span> <span class="Statement">-</span> <span class="Identifier">Mean</span>[<span class="Identifier">shape</span>[[<span class="Type">1</span>]]] <span class="Statement">&amp;</span>) <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

<span class="Identifier">Show</span>[
 <span class="Identifier">draw</span>[shape, <span class="Type">3</span>],
 (<span class="Identifier">draw</span>[shape, <span class="Type">4</span>] <span class="Statement">//</span><span class="Identifier"> Normal</span>) <span class="Statement">/.</span>
  <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>, <span class="Type">__</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> pts]]
</pre>
            </li>
        </ol>

        <p>
        The ostensive <span class="flipbookLink" name="inversions 3D 2" index="1">architectonics</span>, quite awesome. c.f. Dyson sphere. The <span class="flipbookLink" name="inversions 3D 2" index="5">code</span> however is simple. Cobra.
        </p>

        <ol class="flipbook static" name="inversions 3D 3">
            <li>
            <img src="img/sier3Dinv22.png" width="640" height="670" />
            </li>
            <li>
            <img src="img/sier3Dinv13.png" width="640" height="659" />
            </li>
            <li>
            <img src="img/sier3Dinv21.png" width="638" height="640" />
            </li>
            <li>
            <img src="img/sier3Dinv23.png" width="640" height="419" />
            </li>
            <li>
            <img src="img/sier3Dinv18.png" width="640" height="667" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">shape_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{next},
   <span class="Comment">(*scale by 1/2 toward each vertex, in turn*)</span>
   <span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> <span class="Identifier">Scale</span>[prev, <span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">shape</span>[[<span class="Type">1</span>]];

   <span class="Identifier">Graphics3D</span>[{<span class="Identifier">EdgeForm</span>[<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">15</span>]],
     <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">75</span>], <span class="Identifier">Black</span>, <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>shape, n]},
    Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]];

<span class="Identifier">transform</span>[<span class="Type">1</span>][<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">^</span><span class="Type">3</span><span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;
<span class="Identifier">transform</span>[<span class="Type">2</span>][<span class="Type">p_</span>] <span class="Statement">:=</span> (<span class="Identifier">Reverse</span>[p]<span class="Statement">.</span>p) p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;
<span class="Identifier">transform</span>[<span class="Type">3</span>][<span class="Type">p_</span>] <span class="Statement">:=</span> (<span class="Identifier">Reverse</span>[p]<span class="Statement">.</span><span class="Identifier">Cross</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">1</span>}, p]) p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

shape <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;Faces&quot;</span>];

(<span class="Identifier">draw</span>[shape, <span class="Type">4</span>] <span class="Statement">//</span><span class="Identifier"> Normal</span>) <span class="Statement">/.</span>
  <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>, <span class="Type">__</span>] <span class="Statement">:&gt;</span> <span class="Identifier">Polygon</span>[<span class="Identifier">transform</span>[<span class="Type">1</span>] <span class="Statement">/@</span> pts]
</pre>
            </li>
        </ol>

        <p>
        And <span class="flipbookLink" name="inversions 3D 3" index="4">fishie!</span> Logarithmic.
        </p>

        <ol class="flipbook static" name="inversions 3D 4">
            <li>
            <img src="img/sier3Dinv27.png" width="640" height="646" />
            </li>
            <li>
            <img src="img/sier3Dinv28.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dinv32.png" width="640" height="647" />
            </li>
            <li>
            <img src="img/sier3Dinv31.png" width="640" height="580" />
            </li>
            <li name="source">
<pre>
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {w, <span class="Type">_Real</span>}, {numpoints, <span class="Type">_Integer</span>}},
   <span class="Identifier">Module</span>[{diff},
    <span class="Identifier">FoldList</span>[(diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> w]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numpoints]]]];

<span class="Identifier">invert</span>[<span class="Type">p_</span> <span class="Statement">/;</span> <span class="Identifier">Norm</span>[p] <span class="Statement">&lt;</span> <span class="Statement">.</span><span class="Type">25</span>] <span class="Statement">:=</span> <span class="Type">4</span> <span class="Identifier">Normalize</span>[p];
<span class="Identifier">invert</span>[<span class="Type">p_</span>] <span class="Statement">:=</span> p<span class="Statement">/</span><span class="Identifier">Norm</span>[p]<span class="Statement">^</span><span class="Type">2</span>;

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];
<span class="Comment">(*vertices=Normalize/@(#-Mean[vertices]&amp;)/@vertices;*)</span>

<span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">2</span>],
  <span class="Identifier">Point</span>[<span class="Identifier">invert </span><span class="Statement">/@</span> <span class="Identifier">game</span>[vertices, <span class="Statement">.</span><span class="Type">01</span>, <span class="Type">400000</span>]]},
 Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]
</pre>
            </li>
        </ol>

        <p>
        "Chaos game with logarithmic distance function" is a bit long. We need to give this specific kind of fractal a name. What about "Charlie render"? So I'd be like "here we have an <span class="flipbookLink" name="inversions 3D 4" index="1">inverted Charlie render at $w$ factor .01</span>" and people would nod comprehendingly while reading that, as if there were an established literature on Charlie renders.
        </p>

        <p>
        You might object that the contours of this nomenclature don't quite align with the striking yet oft- hauntingly quiescent leylines of its intended referents, but you would be wrong &mdash; the matching is nigh onomatopoeial per my linguistic auteurity<!--at this point, someone in the audience  sneezes-->. Incidentally, you should see what my writing looks like when I really cut loose. Rejoice asplendent my sparing you that paragon 'cross the rubicon, padawan. 
        </p>

        <p>
        Since the originals have a lot of points close to 0, their inverses have a lot of points at very large distances. In this case I've decided to clamp the maximum distance of points to a short range (essentially putting them on a leash, like those ball &amp; chain dogs in Mario Bros. 3). It's another way of dealing with infinities. I like this approach because it preserves the radial texture of the figure, snowglobe-like. Taking this to its conclusion, we normalize all points to the same distance:
        </p>

        <ol class="flipbook static" name="3D normalize">
            <li>
            <img src="img/sier3Dnorm15.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm16.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm17.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm18.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm5.png" width="640" height="604" />
            </li>
            <li>
            <img src="img/sier3Dnorm3.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm8.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Dnorm11.png" width="640" height="635" />
            </li>
            <!--li>
            <img src="img/sier3Dnorm10.png" width="640" height="632" />
            </li-->
            <li name="source">
<pre>
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {w, <span class="Type">_Real</span>}, {numpoints, <span class="Type">_Integer</span>}},
   <span class="Identifier">Module</span>[{diff},
    <span class="Identifier">FoldList</span>[(diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
       <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> w]]) <span class="Statement">&amp;</span>,
     {<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numpoints]]]];

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Pyramid&quot;</span>, <span class="Type">3</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];
<span class="Comment">(*vertices=Normalize/@(#-Mean[vertices]&amp;)/@vertices;*)</span>

<span class="Identifier">Module</span>[{pts},
 pts <span class="Statement">=</span> <span class="Identifier">game</span>[vertices, <span class="Statement">.</span><span class="Type">01</span>, <span class="Type">400000</span>];

 <span class="Identifier">Graphics3D</span>[{
   {<span class="Identifier">Glow</span>[<span class="Identifier">White</span>], <span class="Identifier">Sphere</span>[{<span class="Type">0</span>, <span class="Type">0</span>, <span class="Type">0</span>}, <span class="Statement">.</span><span class="Type">99999</span>]}, <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
   <span class="Identifier">Point</span>[<span class="Identifier">Normalize </span><span class="Statement">/@</span> pts,
    VertexColors <span class="Statement">-&gt;</span> (<span class="Identifier">ColorData</span>[<span class="String">&quot;AvocadoColors&quot;</span>] <span class="Statement">/@</span> <span class="Identifier">Norm </span><span class="Statement">/@</span> pts)]},
  ViewPoint <span class="Statement">-&gt;</span> {<span class="Identifier">Sqrt</span>[<span class="Type">3</span>], <span class="Statement">-</span><span class="Identifier">Sqrt</span>[<span class="Type">8</span>], <span class="Type">1</span>}, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>]]
</pre>
            </li>
        </ol>

        <p>
        <span class="flipbookLink" name="3D normalize" index="1">These</span> <span class="flipbookLink" name="3D normalize" index="2">two</span> are the same, except the first one has an opaque sphere in the interior so that you can't see points beyond the horizon. The extra points in the second one are on the other side of the globe. <span class="flipbookLink" name="3D normalize" index="3">These points</span> are colored according to their original distance. And the <span class="flipbookLink" name="3D normalize" index="4">unnormalized figure</span>.
        </p>

        <br />
        
    </div>

    <div class="section">
        <div class="header"> <h2> Questions </h2> </div>

        <p>
        How many points does the Sierpinski triangle have, besides infinity? Say at a given iteration?
        </p>

        <ol class="flipbook static" name="combinatorics">
            <li>
            <img src="img/sierpointcount1.png" width="360" height="360" />
            </li>
            <li>
            <img src="img/sierpointcount2.png" width="360" height="360" />
            </li>
            <li>
            <img src="img/sierpointcount3.png" width="360" height="360" />
            </li>
            <li name="source">
           <pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{g},
   g <span class="Statement">=</span> <span class="Identifier">Graphics</span>[{
      <span class="Identifier">White</span>, <span class="Identifier">EdgeForm</span>[<span class="Identifier">Black</span>],
      <span class="Identifier">Nest</span>[next, axiom, n]}];

   <span class="Identifier">Show</span>[
    (g <span class="Statement">//</span><span class="Identifier"> next</span>) <span class="Statement">/.</span> <span class="Type">p </span><span class="Statement">:</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      {p, <span class="Identifier">Black</span>, <span class="Identifier">Disk</span>[<span class="Statement">#</span>, (<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>)<span class="Statement">^</span>(n <span class="Statement">+</span> <span class="Type">5</span>)] <span class="Statement">&amp;</span> <span class="Statement">/@</span> pts},
    g <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      {<span class="Identifier">EdgeForm</span>[<span class="Identifier">None</span>], <span class="Identifier">Disk</span>[<span class="Statement">#</span>, (<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>)<span class="Statement">^</span>(n <span class="Statement">+</span> <span class="Type">5.075</span>)] <span class="Statement">&amp;</span> <span class="Statement">/@</span> pts}]];
</pre> 
        </li>
        <li name="?">
        <pre style="font-size: 14px">
<span class="Identifier">FindSequenceFunction</span>[
  <span class="Identifier">Length</span><span class="Statement">@</span><span class="Identifier">DeleteDuplicates</span><span class="Statement">@</span>
      <span class="Identifier">Cases</span>[<span class="Identifier">draw</span>[<span class="Statement">#</span>], <span class="Identifier">Disk</span>[<span class="Type">p_</span>, <span class="Type">___</span>] <span class="Statement">:&gt;</span> p, <span class="Identifier">Infinity</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">6</span>]
  ][n]</pre>
        </li>
        </ol>

        <p>
        All additions are in powers of 3. So at a given iteration we have $\Sigma \space 3^k$ total points. There's all sorts of ways to find the closed form of this sum, not least of which is to use the internet. I'm a fan of the algebraic approach:
        </p>

        $$
\begin{array}{ccccccccccc}
 S & = & 3^1 & + & 3^2 & + & 3^3 & + & \cdots  & + & 3^n \\
 -3S & = &  & - & 3^2 & - & 3^3 & - & \cdots  & - & 3^{n+1} \\
 -2S & = & 3^1 & - & 3^{n+1} \\
 S & = & \frac 1 2 (3^{n+1}-3) \\
 S & = & \frac 3 2 (3^n-1) \\
\end{array}
$$        

        <p>
        The nice thing about this kind of manual deduction is that it gives us an excuse to plaster more math on our page, giving perusers who don't know any better the impression that we're really smart. This sum accounts for the additions. We also need to account for the first 3 points. For a given iteration, we have a total of $\frac 3 2 (3^n-1) + 3=\frac 3 2 (3^n + 1)$ points. The arithmetic works out better if we count the polygons instead of the points.
        </p>

        <p>
        If my web search kune do hasn't failed me, this would make most of our algorithms "geometric space and therefore time" (GSATT) algorithms. Actually I just made that up, I don't know what they're called. It's not really relevant for us since the geometricness also means we get a large number of points with few iterations.
        </p>

        <p>
        What does the "integration" of the Sierpinski triangle look like? There's various ways to interpret this in 2D, but I'm curious about how the number of points of the triangle increases along a straight line, as if the triangle were a single-variable function:
        </p>

        <ol class="flipbook static" name="integral 1">
            <li>
            <img src="img/sierpointcount6.png" width="512" height="511" />
            </li>
            <li>
            <img src="img/sierpointcount7.png" width="512" height="511" />
            </li>
            <li>
                <ol class="flipbook static" name="cantor set">
                    <li>
                    <img src="img/sierpointcount8.png" width="512" height="511" />
                    </li>
                    <li>
                    <img src="img/sierpointcount9.png" width="512" height="511" />
                    </li>
                    <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Interval</span>[{<span class="Type">a_</span>, <span class="Type">b_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Interval</span>[{a, a <span class="Statement">+</span> (b <span class="Statement">-</span> a)<span class="Statement">/</span><span class="Type">3</span>}],
     <span class="Identifier">Interval</span>[{a <span class="Statement">+</span> <span class="Type">2</span> (b <span class="Statement">-</span> a)<span class="Statement">/</span><span class="Type">3</span>, b}]};

<span class="Identifier">cantor</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">IntervalUnion </span><span class="Statement">@@</span> <span class="Identifier">Flatten</span><span class="Statement">@</span>
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span><span class="Identifier">Interval</span>[{<span class="Type">0</span>, <span class="Type">1</span>}], n];

<span class="Identifier">rectangles</span>[<span class="Type">n_</span>, <span class="Type">h_</span><span class="Statement">:</span> <span class="Statement">.</span><span class="Type">02</span>, <span class="Type">scale_</span><span class="Statement">:</span> <span class="Type">1</span>] <span class="Statement">:=</span>
  <span class="Identifier">Nest</span>[next, <span class="Identifier">Interval</span>[{<span class="Type">0</span>, <span class="Type">1</span>}], n] <span class="Statement">/.</span> <span class="Identifier">Interval</span>[{<span class="Type">a_</span>, <span class="Type">b_</span>}] <span class="Statement">:&gt;</span>
    <span class="Identifier">Rectangle</span>[{a, <span class="Statement">-</span>h (n <span class="Statement">+</span> <span class="Type">10</span> h) scale}, {b, <span class="Statement">-</span>h (n <span class="Statement">+</span> <span class="Type">1</span>) scale}];

<span class="Comment">(*this </span><span class="String">&quot;integration&quot;</span><span class="Comment"> depends on the </span><span class="String">&quot;curve&quot;</span><span class="Comment"> being </span><span class="String">&quot;uniformly sampled&quot;</span><span class="Comment">*)</span>
<span class="Identifier">int</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> <span class="Identifier">MapIndexed</span>[{<span class="Statement">##</span>} <span class="Statement">/.</span>
     {{<span class="Type">x_</span>, <span class="Type">y_</span>}, {<span class="Type">i_</span>}} <span class="Statement">:&gt;</span> {x, i} <span class="Statement">&amp;</span>, <span class="Identifier">SortBy</span>[pts, First]];

set <span class="Statement">=</span> <span class="Identifier">cantor</span>[<span class="Type">16</span>];<span class="Comment">(*this is 2^16 intervals*)</span>
{null, {pts}} <span class="Statement">=</span> <span class="Identifier">Reap</span>[<span class="Identifier">Do</span>[
   <span class="Identifier">If</span>[<span class="Identifier">IntervalMemberQ</span>[set, a], <span class="Identifier">Sow</span>[{a, <span class="Type">0</span>}]],
   {a, <span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">1000000</span>}]];

<span class="Identifier">Graphics</span>[<span class="Identifier">rectangles </span><span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">6</span>]]

<span class="Identifier">Show</span>[<span class="Identifier">Graphics</span>[<span class="Identifier">rectangles</span>[<span class="Type">6</span>] <span class="Statement">/.</span>
   <span class="Identifier">Rectangle</span>[{<span class="Type">x1_</span>, <span class="Type">y1_</span>}, {<span class="Type">x2_</span>, <span class="Type">y2_</span>}] <span class="Statement">:&gt;</span> <span class="Identifier">Rectangle</span>[{x1, <span class="Type">0</span>}, {x2, <span class="Statement">.</span><span class="Type">02</span>}]],
 <span class="Identifier">ListLinePlot</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span><span class="Statement">/</span><span class="Identifier">Length</span>[pts]} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> <span class="Identifier">int</span>[pts],
  PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Black</span>]]
</pre>
                    </li>
                </ol>
            </li>
            <li name="source">
<pre style="font-size: 14px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Type">1</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">points</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">DeleteDuplicates</span>[<span class="Identifier">Flatten</span>[
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> Polygon <span class="Statement">-&gt;</span> Sequence, n]];

<span class="Comment">(*this </span><span class="String">&quot;integration&quot;</span><span class="Comment"> depends on the </span><span class="String">&quot;curve&quot;</span><span class="Comment"> being </span><span class="String">&quot;uniformly sampled&quot;</span><span class="Comment">*)</span>
<span class="Identifier">int</span>[<span class="Type">pts_</span>] <span class="Statement">:=</span> <span class="Identifier">MapIndexed</span>[{<span class="Statement">##</span>} <span class="Statement">/.</span>
     {{<span class="Type">x_</span>, <span class="Type">y_</span>}, {<span class="Type">i_</span>}} <span class="Statement">:&gt;</span> {x, i} <span class="Statement">&amp;</span>, <span class="Identifier">SortBy</span>[pts, First]];

pts <span class="Statement">=</span> <span class="Identifier">points</span>[<span class="Type">10</span>];

<span class="Identifier">Show</span>[
 <span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Black</span>, <span class="Identifier">Point</span>[pts]}],
 <span class="Identifier">ListLinePlot</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span><span class="Statement">/</span><span class="Identifier">Length</span>[pts]} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> <span class="Identifier">int</span>[pts], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">Black</span>]]
</pre>
            </li>
        </ol>

        <p>
        Hmm. I was hoping it would look something like the so-called Devil's Stairscase, which is the <span class="flipbookLink" name="integral 1" index="3">same thing for the Cantor set</span>. You can just feel the Staircase's <span class="flipbookLink" name="cantor set" index="2">ragged darkness</span> filling you with joy. But <span class="flipbookLink" name="integral 1" index="1">this</span>, <span class="flipbookLink" name="integral 1" index="1">this</span> looks like the underside of a fluffy cloud. I think I will call it Lumpy Space Satan's Hairline. Not as dark and morally grimy a name as I was hoping to coin, but not bad either.
        </p>

        <p>
        My original reason for inverting the Sierpinksi triangle was to see how it might magnify the inner texture. I.e. turning the triangle inside out to make the inside more visible. "You could have explained that in the actual inversion section" you say. Indeed, but let's not hark on couldas and shouldas. The point is there is an intuition behind these things, and we can ask other questions in the same spirit. For example, what if we extend the 2D Sierpinski triangle into 3D, with each point a different $z$ coordinate (depth) depending on its distance from the center of the triangle?
        </p>

        <ol class="flipbook static" name="radial sonogram 1">
            <li>
            <img src="img/siersonogram1.png" width="512" height="512" />
            </li>
            <li>
            <img src="img/siersonogram6.png" width="512" height="546" />
            </li>
            <li>
            <img src="img/siersonogram7.png" width="512" height="526" />
            </li>
            <li>
            <img src="img/siersonogram8.png" width="512" height="267" />
            </li>
            <li>
            <img src="img/siersonogram5.png" width="512" height="399" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring, figure},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   figure <span class="Statement">=</span> <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Polygon</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>, <span class="Identifier">Norm</span>[{<span class="Statement">#1</span>, <span class="Statement">#2</span>}]} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> pts];

   <span class="Comment">(*figure=ring[0.,1.,n]/.Polygon[pts_]:&gt;</span>
<span class="Comment">   Polygon[Normalize[#]~Append~Norm[#]&amp;/@pts];*)</span>

   <span class="Identifier">Graphics3D</span>[{Transparent,
     <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">Black</span>}], figure}]];

<span class="Identifier">draw</span>[<span class="Type">3</span>, <span class="Type">5</span>]
</pre>
            </li>
        </ol>

        <p>
        We get what we expect, a <span class="flipbookLink" name="radial sonogram 1" index="1">boomerang-looking thing</span>. And look at this lovely <span class="flipbookLink" name="radial sonogram 1" index="3">demonic-looking Moire pattern</span>, surely the universe's recompense for that fluffy cloud nonsense above. We can also normalize the points so that all we see is the radial detail. That produces a <span class="flipbookLink" name="radial sonogram 1" index="4">coronet-looking thing</span>, which can be unrolled:
        </p>

        <ol class="flipbook static" name="radial sonogram 2">
            <li>
            <img src="img/siersonogram12.png" width="607" height="600" />
            </li>
            <li>
            <img src="img/siersonogram13.png" width="596" height="464" />
            </li>
            <li>
            <img src="img/siersonogram14.png" width="640" height="245" />
            </li>
            <li>
            <img src="img/siersonogram20.png" width="640" height="344" />
            </li>
            <li>
            <img src="img/siersonogram24.png" width="688" height="179" />
            </li>
            <li>
            <img src="img/siersonogram22.png" width="688" height="274" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">n_</span>, <span class="Type">s_</span><span class="Statement">:</span> <span class="Type">2</span>, <span class="Type">cutoff_</span><span class="Statement">:</span> <span class="Type">0</span>, <span class="Type">width_</span><span class="Statement">:</span> <span class="Type">1</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ring, figure},
   <span class="Identifier">ring</span>[<span class="Type">c_</span>, <span class="Type">r_</span>, <span class="Type">depth_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{ps},
     ps <span class="Statement">=</span> c <span class="Statement">+</span> r {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">If</span>[depth <span class="Statement">==</span> <span class="Type">0</span>, <span class="Identifier">Polygon</span>[ps],
      <span class="Identifier">ring</span>[(c <span class="Statement">+</span> <span class="Statement">#</span>)<span class="Statement">/</span><span class="Type">2</span>, r<span class="Statement">/</span><span class="Type">2</span>, depth <span class="Statement">-</span> <span class="Type">1</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> ps]];

   figure <span class="Statement">=</span> <span class="Identifier">ring</span>[<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">1</span><span class="Statement">.</span>, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Polygon</span>[{<span class="Identifier">ArcTan </span><span class="Statement">@@</span> (<span class="Statement">#</span> <span class="Statement">/.</span> {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>} <span class="Statement">-&gt;</span> {<span class="Type">1</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}), s <span class="Identifier">Norm</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> pts];
   figure <span class="Statement">=</span> <span class="Identifier">Flatten</span>[figure];

   figure <span class="Statement">=</span> <span class="Identifier">Cases</span>[figure, <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">/;</span>
      <span class="Identifier">Mean</span>[<span class="Identifier">Norm </span><span class="Statement">/@</span> <span class="Identifier">Differences</span>[pts]] <span class="Statement">&lt;</span> <span class="Statement">.</span><span class="Type">5</span>
       <span class="Comment">(*&amp;&amp;MemberQ[First/@pts,a_/;-width Pi/v&lt;a&lt;width Pi/v]*)</span>
       <span class="Statement">&amp;&amp;</span> <span class="Identifier">MemberQ</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> pts, <span class="Type">y_</span> <span class="Statement">/;</span> y <span class="Statement">&gt;</span> cutoff s]];

   <span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>],
     <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">13</span>], <span class="Identifier">JoinForm</span>[<span class="String">&quot;Round&quot;</span>]}],
     figure}, ImageSize <span class="Statement">-&gt;</span> Large]];

<span class="Identifier">draw</span>[<span class="Type">6</span>, <span class="Type">4</span>, <span class="Type">2</span>, <span class="Statement">.</span><span class="Type">4</span>] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
  {<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">5</span>], <span class="Identifier">EdgeForm</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">01</span>], LightGray}],
   <span class="Identifier">Hue</span>[<span class="Statement">.</span><span class="Type">05</span> <span class="Identifier">Norm</span>[<span class="Identifier">Mean</span>[pts]]], <span class="Identifier">Polygon</span>[pts]}
</pre>
            </li>
            <li name="?">
            <img src="img/siersonogram30.png" width="650" height="528" />
            </li>
        </ol>

        <p>
        What does a radial histogram of the Sierpinski triangle look like?
        </p>

        <ol class="flipbook static" name="radial histogram">
            <li>
            <img src="img/sierradialhistogram1.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierradialhistogram2.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierradialhistogram4.png" width="640" height="569" />
            </li>
            <li name="source">
<pre>
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span> <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>)];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">points</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">DeleteDuplicates</span>[<span class="Identifier">Flatten</span>[
    <span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> Polygon <span class="Statement">-&gt;</span> Sequence, n]];

pts <span class="Statement">=</span> <span class="Identifier">points</span>[<span class="Type">8</span>];
stats <span class="Statement">=</span> <span class="Identifier">Transpose</span><span class="Statement">@</span><span class="Identifier">MapAt</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">2</span>, <span class="Type">1</span>] <span class="Statement">&amp;</span>, <span class="Statement">#</span>, <span class="Type">1</span>] <span class="Statement">&amp;</span><span class="Statement">@</span>
   <span class="Identifier">HistogramList</span>[<span class="Identifier">ArcTan </span><span class="Statement">@@@</span> pts, <span class="String">&quot;Knuth&quot;</span>];

max <span class="Statement">=</span> <span class="Identifier">Max</span>[<span class="Identifier">Last </span><span class="Statement">/@</span> stats];
polys <span class="Statement">=</span> <span class="Identifier">Polygon</span>[<span class="Statement">#2</span><span class="Statement">/</span>max {{<span class="Type">0</span>, <span class="Type">0</span>},
       {<span class="Identifier">Cos</span>[<span class="Statement">#1</span>[[<span class="Type">1</span>]] <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">005</span>], <span class="Identifier">Sin</span>[<span class="Statement">#1</span>[[<span class="Type">1</span>]] <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">005</span>]},
       {<span class="Identifier">Cos</span>[<span class="Statement">#1</span>[[<span class="Type">2</span>]]], <span class="Identifier">Sin</span>[<span class="Statement">#1</span>[[<span class="Type">2</span>]]]}}] <span class="Statement">&amp;</span> <span class="Statement">@@@</span> stats;
<span class="Comment">(*poly=Polygon[#2/max{Cos[#1[[1]]],Sin[#1[[1]]]}&amp;@@@stats];*)</span>

<span class="Identifier">Graphics</span>[{
  {<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">Point</span>[pts]},
  {<span class="Identifier">ColorData</span>[<span class="Type">1</span>][<span class="Type">1</span>], polys}}]
</pre>
            </li>
        </ol>

        <p>
        What happens if we run the Game of Life on the Sierpinski triangle?
        </p>

        <ol class="flipbook static" name="game of life">
            <li name="animation">
            <img src="img/sierlife1.gif" width="123" height="123" />
            </li>
            <li name="source">
<pre style="font-size: 10px">
<span class="Identifier">sier</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>];

s <span class="Statement">=</span> <span class="Identifier">ArrayPad</span>[<span class="Identifier">sier</span>[<span class="Type">2</span><span class="Statement">^</span><span class="Type">9</span>], <span class="Type">2</span><span class="Statement">^</span><span class="Type">5</span>];
<span class="Comment">(*s=sier[2^9]+Transpose[sier[2^9]]/. 2-&gt;1;*)</span>
i <span class="Statement">=</span> <span class="Type">0</span>;

<span class="Identifier">PrintTemporary</span>[<span class="Identifier">Dynamic</span>[i]];
<span class="Identifier">PrintTemporary</span>[<span class="Identifier">Dynamic</span>[<span class="Identifier">Image</span>[s]]];

<span class="Identifier">With</span>[{lifeSpec <span class="Statement">=</span> {<span class="Type">224</span>, {<span class="Type">2</span>, {{<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}}}, {<span class="Type">1</span>, <span class="Type">1</span>}}},
  <span class="Identifier">While</span>[i<span class="Statement">++</span> <span class="Statement">&lt;</span> <span class="Identifier">Infinity</span>,
   s <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[lifeSpec, s]]];

i
<span class="Identifier">Image</span>[s]
</pre>
            </li>
        </ol>

        <p>
        Basically nothing. The triangle does this and that, shoots a couple gliders, settles. Larger versions do more or less the same thing but take longer to settle. Not very interesting, but it raises the idea of using fractals as starting configurations. However, on the internet I found that <a href="https://webfiles.uci.edu/bwisialo/www/gameoflife2.html">lines produce Sierpinski triangles</a>:
        </p>

        <ol class="flipbook static" name="game of life 2">
            <li>
            <img src="img/sierlife6.png" width="513" height="292" />
            </li>
            <li>
            <img src="img/sierlife8.gif" width="248" height="241" />
            </li>
            <li>
            <img src="img/sierlife9.gif" width="256" height="256" />
            </li>
            <li>
            <pre style="font-size: 14px">
<span class="Identifier">Export</span>[<span class="String">&quot;c:/users/zrp/desktop/line.bmp&quot;</span>,
 <span class="Identifier">Image</span>[{<span class="Identifier">ConstantArray</span>[<span class="Type">0</span>, <span class="Type">2</span><span class="Statement">^</span><span class="Type">13</span>]}]]</pre>
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">With</span>[{lifeSpec <span class="Statement">=</span> {<span class="Type">224</span>, {<span class="Type">2</span>, {{<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}}}, {<span class="Type">1</span>, <span class="Type">1</span>}}},
  frames <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[lifeSpec,
    {{<span class="Identifier">ConstantArray</span>[<span class="Type">1</span>, <span class="Type">2</span><span class="Statement">^</span><span class="Type">8</span><span class="Comment">(*-14*)</span>]}, <span class="Type">0</span>}, <span class="Type">130</span>]];

<span class="Identifier">Export</span>[<span class="String">&quot;c:/users/zrp/desktop/zrp.gif&quot;</span>,
 <span class="Identifier">ColorNegate </span><span class="Statement">/@</span> <span class="Identifier">Image </span><span class="Statement">/@</span> frames, <span class="String">&quot;DisplayDurations&quot;</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">17</span>]
</pre>
            </li>
            <li name="?">
            <pre style="font-size: 14px">
<span class="Identifier">With</span>[{lifeSpec <span class="Statement">=</span> {<span class="Type">224</span>, {<span class="Type">2</span>, {{<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">2</span>}, {<span class="Type">2</span>, <span class="Type">2</span>, <span class="Type">2</span>}}}, {<span class="Type">1</span>, <span class="Type">1</span>}}},
  frames <span class="Statement">=</span> <span class="Identifier">CellularAutomaton</span>[lifeSpec,
    <span class="Identifier">Boole</span><span class="Statement">@</span><span class="Identifier">Array</span>[<span class="Statement">#1</span> <span class="Statement">==</span> <span class="Type">2</span><span class="Statement">^</span><span class="Type">7</span> <span class="Statement">&amp;</span>, <span class="Type">2</span><span class="Statement">^</span><span class="Type">8</span> {<span class="Type">1</span>, <span class="Type">1</span>}], <span class="Type">2</span><span class="Statement">^</span><span class="Type">7</span>]];

<span class="Identifier">Export</span>[<span class="String">&quot;c:/users/zrp/desktop/zrp.gif&quot;</span>,
 <span class="Identifier">ColorNegate </span><span class="Statement">/@</span> <span class="Identifier">Image </span><span class="Statement">/@</span> frames, <span class="String">&quot;DisplayDurations&quot;</span> <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">17</span>]</pre>
            </li>
        </ol>

        <p>
        I didn't even have to add the horns. This is one end of a line after some iterations. The pattern <span class="flipbookLink" name="game of life 2" index="2">continues propagating</span> forever and ever as long as there is line left and becomes more distinguished at larger scales. It appears to be driven entirely by the line itself. Consider the evolution of a line that is infinitely long, something you can actually witness in the Game of Life by <span class="flipbookLink" name="game of life 2" index="3">connecting the edges</span> of the board.
        </p>

        <p>
        As the <span class="flipbookLink" name="game of life 2" index="2">finite line splits</span>, it leaves debris due to the circumstances of the ends. The pattern you end up with is a trace of the line's subdivisions. It's because the line splits cleanly and does so in a Sierpinski recursion that you end up with clear Sierpinski triangles at larger scales.
        </p>

        <p>
If you want to play with large Game of Life constructions, the easiest way is to <span class="flipbookLink" name="game of life 2" index="4">export</span> them as images and open them in a dedicated Game of Life program, as those can run the game at very high speeds.
        </p>

        <p>
         What does a random walk on the Sierpinski graph look like?
        </p>

        <ol class="flipbook static" name="triangle random walk">
            <li>
            <img src="img/sierrandomwalk6.png" width="518" height="512" />
            </li>
            <li>
            <img src="img/sierrandomwalk5.png" width="518" height="512" />
            </li>
            <li>
            <img src="img/sierrandomwalk7.png" width="518" height="512" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];

<span class="Identifier">graphWalkPath</span>[<span class="Type">g_Graph</span>, <span class="Type">steps_</span><span class="Statement">:</span> <span class="Type">15</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{neighbors},
   <span class="Identifier">neighbors</span>[<span class="Type">vertex_</span>] <span class="Statement">:=</span> (<span class="Identifier">neighbors</span>[vertex] <span class="Statement">=</span>
      <span class="Identifier">Complement</span>[<span class="Identifier">VertexList</span>[<span class="Identifier">NeighborhoodGraph</span>[g, vertex]], {vertex}]);

   <span class="Identifier">NestList</span>[<span class="Identifier">RandomChoice</span>[<span class="Identifier">neighbors</span>[<span class="Statement">#</span>]] <span class="Statement">&amp;</span>, <span class="Identifier">First</span>[<span class="Identifier">VertexList</span>[g]], steps]];

<span class="Identifier">SetAttributes</span>[UndirectedEdge, <span class="Identifier">Orderless</span>];
<span class="Identifier">graphWalk</span>[<span class="Type">args__</span>] <span class="Statement">:=</span> <span class="Identifier">Graph</span>[<span class="Identifier">DeleteDuplicates</span>[
    <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[<span class="Identifier">graphWalkPath</span>[args], <span class="Type">2</span>, <span class="Type">1</span>]]];

g <span class="Statement">=</span> <span class="Identifier">draw</span>[<span class="Type">3</span>];
<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">10</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">Table</span>[
  <span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">8</span>], <span class="Identifier">JoinForm</span>[<span class="String">&quot;Round&quot;</span>], <span class="Identifier">Line</span>[<span class="Identifier">graphWalkPath</span>[g, <span class="Type">50</span>]]},
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">50</span> {<span class="Type">1</span>, <span class="Type">1</span>}], {<span class="Type">100</span>}]

<span class="Identifier">Grid</span>[<span class="Identifier">Partition</span>[<span class="Statement">#</span>, <span class="Type">10</span>]] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">Table</span>[
  <span class="Identifier">HighlightGraph</span>[g, <span class="Identifier">graphWalk</span>[g, <span class="Type">50</span>],
   ImageSize <span class="Statement">-&gt;</span> <span class="Type">50</span> {<span class="Type">1</span>, <span class="Type">1</span>}], {<span class="Type">100</span>}]
</pre>
            </li>
        </ol>

        <p>
        About what you would expect. I'll leave the stats to those whose laziness is bounded from above, instead of below. What does a "circle" look like on the Sierpinski graph?
        </p>

        <ol class="flipbook static" name="graph circles">
            <li>
            <img src="img/siergraphcircles1.png" width="461" height="455" />
            </li>
            <li>
            <img src="img/siergraphcircles5.png" width="461" height="455" />
            </li>
            <li>
            <img src="img/siergraphcircles3.png" width="570" height="475" />
            </li>
            <li>
            <img src="img/siergraphcircles4.png" width="568" height="421" />
            </li>
            <li name="source">
<pre style="font-size: 12px">
axiom <span class="Statement">=</span> <span class="Identifier">Polygon</span>[{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">1</span>, <span class="Identifier">Sqrt</span>[<span class="Type">3</span>]}<span class="Statement">/</span><span class="Type">2</span>, {<span class="Type">1</span>, <span class="Type">0</span>}}];

<span class="Identifier">next</span>[<span class="Type">prev_</span>] <span class="Statement">:=</span> prev <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[{<span class="Type">p1_</span>, <span class="Type">p2_</span>, <span class="Type">p3_</span>}] <span class="Statement">:&gt;</span> {
     <span class="Identifier">Polygon</span>[{p1, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p2, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p1 <span class="Statement">+</span> p2)<span class="Statement">/</span><span class="Type">2</span>}],
     <span class="Identifier">Polygon</span>[{p3, (p1 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>, (p2 <span class="Statement">+</span> p3)<span class="Statement">/</span><span class="Type">2</span>}]};

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges},
   edges <span class="Statement">=</span> <span class="Identifier">Flatten</span><span class="Statement">@</span><span class="Identifier">Nest</span>[next, <span class="Identifier">N</span><span class="Statement">@</span>axiom, n] <span class="Statement">/.</span> <span class="Identifier">Polygon</span>[<span class="Type">pts_</span>] <span class="Statement">:&gt;</span>
      <span class="Identifier">Sequence </span><span class="Statement">@@</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span> <span class="Identifier">Partition</span>[pts, <span class="Type">2</span>, <span class="Type">1</span>, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]],
    VertexSize <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">25</span>]];

style <span class="Statement">=</span> <span class="Identifier">Sequence</span>[EdgeStyle <span class="Statement">-&gt;</span> <span class="Identifier">Orange</span>];
<span class="Identifier">circles</span>[<span class="Type">g_Graph</span>, <span class="Type">r_</span><span class="Statement">:</span> <span class="Type">1</span>] <span class="Statement">:=</span> (<span class="Identifier">circles</span>[g, r] <span class="Statement">=</span>
    <span class="Identifier">Module</span>[{vs <span class="Statement">=</span> <span class="Identifier">VertexList</span>[g]},
     <span class="Identifier">DeleteDuplicates</span>[
      <span class="Identifier">NeighborhoodGraph</span>[g, <span class="Statement">#</span>, r, style] <span class="Statement">&amp;</span> <span class="Statement">/@</span> vs,
      IsomorphicGraphQ]]);

<span class="Identifier">Pane</span>[<span class="Statement">#</span>, <span class="Type">600</span>] <span class="Statement">&amp;</span><span class="Statement">@</span><span class="Identifier">Column</span>[
  <span class="Identifier">Row</span>[<span class="Identifier">Prepend</span>[
      <span class="Identifier">circles</span>[<span class="Identifier">draw</span>[<span class="Type">5</span>], <span class="Statement">#</span>],
      <span class="Identifier">Style</span>[<span class="Statement">#</span>, <span class="Identifier">Lighter</span>[<span class="Identifier">Black</span>, <span class="Type">1</span><span class="Statement">/</span><span class="Type">6</span>]]], <span class="String">&quot; &quot;</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Range</span>[<span class="Type">1</span>, <span class="Type">3</span>],
  Alignment <span class="Statement">-&gt;</span> Center, Spacings <span class="Statement">-&gt;</span> <span class="Type">1</span>]
</pre>
            </li>
        </ol>
        
        <p>
        This brings to light a more important question: <span class="flipbookLink" name="graph circles" index="2">What the hell is this?</span> It's like the ugly duckling of radius 3 Sierpinski subgraphs. Just look at it. LOL. But OK, I mightn't myself be the most handsomest chap on the block, and graphs are people too after all.
        </p>

        <p>
        There's a good chance that subgraph is hideous because it contains one of the 3 end vertices of the graph as a whole, though I'm too lazy to check this. Those vertices are in part pathological because they have degree 2, whereas all the other vertices have degree 4. But really I think the Sierpinski graph itself is contrived. At least, the finite version seems contrived to me.
        </p>

        <p>
        Perhaps because the Sierpinski pattern might actually be a grid, in the sense that the empty space is an integral part of its characterization a la our infinite quadrilateral descent construction. If we base a graph on the pattern produced by the mod 2 binomial, we get this graph:
        </p>

        <ol class="flipbook static" name="binary sierpinski graph">
            <li>
            <img src="img/siergraph20.png" width="360" height="359" />
            </li>
            <li>
            <img src="img/siergraph17.png" width="360" height="359" />
            </li>
            <li>
            <img src="img/siergraph19.png" width="360" height="359" />
            </li>
            <li>
            <img src="img/siergraph21.png" width="360" height="359" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">locs</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">RotationTransform</span>[<span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>] <span class="Statement">/@</span>
   <span class="Identifier">Position</span>[<span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Binomial, {n, n}, <span class="Type">0</span>], <span class="Type">2</span>], <span class="Type">1</span>];

<span class="Identifier">draw</span>[<span class="Type">n_</span>, <span class="Type">grid_</span><span class="Statement">:</span> <span class="Identifier">True</span>] <span class="Statement">:=</span>
  <span class="Identifier">Module</span>[{edges, subsets <span class="Statement">=</span> <span class="Identifier">Subsets</span>[<span class="Identifier">locs</span>[n], {<span class="Type">2</span>}]},
   edges <span class="Statement">=</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span>
     <span class="Identifier">Pick</span>[subsets,
      ManhattanDistance<span class="Comment">(*;ChessboardDistance*)</span><span class="Statement">@@@</span> subsets, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges, VertexCoordinates <span class="Statement">-&gt;</span> <span class="Identifier">If</span>[grid,
      {<span class="Statement">.</span><span class="Type">5</span>, <span class="Statement">.</span><span class="Type">5</span>} <span class="Statement">+</span> <span class="Statement">#</span> <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">VertexList</span>[<span class="Identifier">Graph</span>[edges]]]]];

<span class="Identifier">Show</span>[
 <span class="Identifier">Graphics</span>[<span class="Identifier">Rectangle </span><span class="Statement">/@</span> <span class="Identifier">locs</span>[<span class="Type">2</span><span class="Statement">^</span><span class="Type">4</span>]],
 <span class="Identifier">draw</span>[<span class="Type">2</span><span class="Statement">^</span><span class="Type">4</span>]]
</pre>
            </li>
        </ol>

        <p>
        Which looks like <span class="flipbookLink" name="binary sierpinski graph" index="2">this</span> in a tiered layout. Maybe the "real" Sierpinski graph is a binary tree of this sort, and it's only connected on all sides in the infinite case. And maybe right now I'm making mathematicians bash their heads against walls, which would be awesome.
        </p>

        <p>
        The binomial mod 2 construction was one of the approaches that went AWOL during our 3Dification blitz. Does it have a 3 dimensional version? Yes, the multinomial mod 2. The code is almost as pretty as it is for the 2D version:
        </p>

        <ol class="flipbook static" default="7" name="multinomial">
            <li>
            <img src="img/sier3Dmultinomial2.png" width="640" height="482" />
            </li>
            <li>
            <img src="img/sier3Dmultinomial1.png" width="640" height="476" />
            </li>
            <li>
            <img src="img/sier3Dmultinomial3.png" width="442" height="482" />
            </li>
            <li>
            <img src="img/siergraph22.png" width="360" height="110" />
            </li>
            <li>
            <img src="img/siergraph25.png" width="360" height="432" />
            </li>
            <li>
            <img src="img/siergraph24.png" width="360" height="315" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">array</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Multinomial, n {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}, <span class="Type">0</span>], <span class="Type">2</span>];

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics3D</span>[<span class="Identifier">Cuboid </span><span class="Statement">/@</span> <span class="Identifier">Position</span>[<span class="Identifier">array</span>[n], <span class="Type">1</span>],
   Lighting <span class="Statement">-&gt;</span> <span class="String">&quot;Neutral&quot;</span>, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];
</pre>
            </li>
            <li name="?">
<pre>
<span class="Identifier">array</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Mod</span>[<span class="Identifier">Array</span>[Multinomial, n {<span class="Type">1</span>, <span class="Type">1</span>, <span class="Type">1</span>}, <span class="Type">0</span>], <span class="Type">2</span>];

<span class="Identifier">draw</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{edges, subsets},
   subsets <span class="Statement">=</span> <span class="Identifier">Subsets</span>[<span class="Identifier">Position</span>[<span class="Identifier">array</span>[n], <span class="Type">1</span>], {<span class="Type">2</span>}];

   edges <span class="Statement">=</span> <span class="Identifier">UndirectedEdge </span><span class="Statement">@@@</span>
     <span class="Identifier">Pick</span>[subsets,
      ManhattanDistance<span class="Comment">(*;ChessboardDistance*)</span><span class="Statement">@@@</span> subsets, <span class="Type">1</span>];

   <span class="Identifier">Graph</span>[edges]];

<span class="Identifier">draw</span>[<span class="Type">2</span><span class="Statement">^</span><span class="Type">3</span>]
<span class="Identifier">GraphPlot3D</span>[<span class="Identifier">draw</span>[<span class="Type">2</span><span class="Statement">^</span><span class="Type">3</span>], PlotStyle <span class="Statement">-&gt;</span> <span class="Identifier">ColorData</span>[<span class="Type">1</span>][<span class="Type">1</span>]]
</pre>
            </li>
        </ol>

        <p>
        Poor <span style="font-family: monospace">Boxed</span>, always being set to <span style="font-family: monospace">False</span>. What happens to our chaos game algorithm if we implement some notion of momentum for the active point?
        </p>

        <ol class="flipbook static" name="momentum">
            <li>
            <img src="img/siermomentum17.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum9.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum14.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum8.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum11.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum13.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/siermomentum18.png" width="640" height="637" />
            </li>
            <li>
            <img src="img/sierdrowsy1.gif" width="150" height="150" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">game</span>[<span class="Type">v_</span>, <span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices, update, vl},
   vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   <span class="Identifier">update</span>[{<span class="Type">pos0_</span>, <span class="Type">vl0_</span>}, <span class="Type">nextVertex_</span>] <span class="Statement">:=</span> (
     <span class="Comment">(*vl=vl0+(pos0+nextVertex)/650-pos0;*)</span>
     <span class="Comment">(*vl = vl0+Normalize[nextVertex - pos0];*)</span>
     vl <span class="Statement">=</span> vl0 <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">0001</span> (nextVertex <span class="Statement">-</span> pos0);
     {pos0 <span class="Statement">+</span> vl, vl});

   <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">FoldList</span>[update, <span class="Identifier">N</span><span class="Statement">@</span>{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">0</span>}},
     <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]];

<span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
  <span class="Identifier">Point</span>[<span class="Identifier">game</span>[<span class="Type">3</span>, <span class="Type">100000</span>]]}]
</pre>
            </li>
            <li name="?">
    <pre>
<span class="Identifier">game</span>[<span class="Type">v_</span>, <span class="Type">numPoints_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{vertices, update, vl},
   vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   <span class="Identifier">update</span>[{<span class="Type">pos0_</span>, <span class="Type">vl0_</span>}, <span class="Type">nextVertex_</span>] <span class="Statement">:=</span> (
     vl <span class="Statement">=</span> vl0 <span class="Statement">+</span> <span class="Identifier">Clip</span>[(nextVertex <span class="Statement">-</span> pos0), <span class="Type">20</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}];
     {pos0 <span class="Statement">+</span> vl, vl});

   <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">FoldList</span>[update, <span class="Identifier">N</span><span class="Statement">@</span>{{<span class="Type">0</span>, <span class="Type">0</span>}, {<span class="Type">0</span>, <span class="Type">0</span>}},
     <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]];

zrp <span class="Statement">=</span> <span class="Identifier">ParallelTable</span>[<span class="Identifier">Module</span>[{pts, max, maxx, maxy},
    pts <span class="Statement">=</span> <span class="Identifier">game</span>[<span class="Type">4</span>, n];
    max <span class="Statement">=</span> <span class="Identifier">Sqrt</span>[<span class="Type">2</span>] <span class="Identifier">Max</span>[<span class="Identifier">Abs </span><span class="Statement">/@</span> pts];

    <span class="Identifier">SeedRandom</span>[<span class="Type">400</span>, Method <span class="Statement">-&gt;</span> <span class="String">&quot;ExtendedCA&quot;</span>];
    <span class="Identifier">Rasterize</span><span class="Statement">@</span><span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">9</span>], <span class="Identifier">Line</span>[pts]},
      PlotRange <span class="Statement">-&gt;</span> max, ImageSize <span class="Statement">-&gt;</span> {<span class="Type">150</span>, <span class="Type">150</span>}]],
   {n, <span class="Type">1</span>, <span class="Type">10000</span>, <span class="Type">83</span>}];

<span class="Identifier">Export</span>[<span class="String">&quot;c:/users/zrp/desktop/zrp.gif&quot;</span>,
 <span class="Identifier">ColorQuantize</span>[<span class="Statement">#</span>, <span class="Type">4</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Most</span>[zrp]]
</pre>
</li>
        </ol>

        <p>
        I didn't find any interesting formulas, but still I managed to get a variety of figures by fiddling with numbers. Probably I would have to use math to find something more interesting.
        </p>

        <p>
        The figures have precise symmetries (180 degree rotation), apparently because the particle eventually overshoots far enough that the randomness becomes a small jitter component (because the vertices of the game become very distant), so it accumulates a near-linear velocity/path on its way back. I'm not sure about this explanation though.
        </p>

        <p>
        Even the ones that <span class="flipbookLink" name="momentum" index="5">look like random walks</span> are symmetric. They aren't standard random walks, rather the particle is overshooting back and forth. This raises the idea of symmetrizing random walks:
        </p>

        <ol class="flipbook static" name="random walk">
            <li>
            <img src="img/sierrandwalk1.png" width="640" height="627" />
            </li>
            <li>
            <img src="img/sierrandwalk2.png" width="640" height="628" />
            </li>
            <li>
            <img src="img/sierrandwalk5.png" width="640" height="657" />
            </li>
            <li name="source">
<pre>
<span class="Identifier">draw</span>[<span class="Type">v_</span>, <span class="Type">r_</span>, <span class="Type">numSteps_</span><span class="Statement">:</span> <span class="Type">100</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{directions, walk},
   directions <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

   walk <span class="Statement">=</span> <span class="Identifier">Accumulate</span>[<span class="Identifier">RandomChoice</span>[directions, numSteps <span class="Statement">+</span> <span class="Type">1</span>]];
   <span class="Identifier">Graphics</span>[<span class="Identifier">Rotate</span>[<span class="Identifier">Line</span>[walk], <span class="Statement">#</span>] <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[r]<span class="Statement">/</span>r)]];
</pre>
            </li>
        </ol>

        <p>
        Awesome possum. What do you see <span class="flipbookLink" name="random walk" index="3">here</span>? When fiddling with momentum I found a simple variation on the logarithmic distance function:
        </p>

        <ol class="flipbook static" name="parameterized fadeleaf 1">
            <li>
            <img src="img/sierrandermod13.png" width="640" height="565" />
            </li>
            <li>
            <img src="img/sierrandermod5.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierrandermod15.png" width="640" height="656" />
            </li>
            <li>
            <img src="img/sierrandermod9.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierrandermod11.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierrandermod16.png" width="640" height="609" />
            </li>
            <li>
            <img src="img/sierrandermod6.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierrandermod14.png" width="640" height="639" />
            </li>
            <li>
            <img src="img/sierrandermod7.png" width="640" height="640" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">Module</span>[{gameC},
  gameC <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{spec, <span class="Type">_Real</span>, <span class="Type">1</span>}, {numPoints, <span class="Type">_Integer</span>, <span class="Type">0</span>}},
    <span class="Identifier">Module</span>[{vertices, diff, v, w, s, b, r, p, z, c},
     {v, w, s, b, r, p, z, c} <span class="Statement">=</span> spec;
     vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">FoldList</span>[(
        diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
        p <span class="Statement">#1</span> <span class="Statement">+</span> <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> z <span class="Statement">#2</span>) <span class="Identifier">Log</span>[b, (diff<span class="Statement">.</span>diff)<span class="Statement">^</span>(<span class="Type">1</span><span class="Statement">/</span>r) <span class="Statement">+</span> w], c {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}]) <span class="Statement">&amp;</span>,
      {<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[s vertices, numPoints]]]];

  <span class="Identifier">game</span>[<span class="Type">spec_</span>, <span class="Type">numPoints_</span>] <span class="Statement">:=</span>
   <span class="Identifier">gameC</span>[<span class="Identifier">PadRight</span>[spec, <span class="Type">8</span>, {<span class="Type">3</span>, <span class="Statement">.</span><span class="Type">5</span>, <span class="Type">1</span>, <span class="Identifier">E</span>, <span class="Type">2</span>, <span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">2</span>}], numPoints]
  ];

<span class="Identifier">draw</span>[<span class="Type">spec_</span>, <span class="Type">numPoints_</span><span class="Statement">:</span> <span class="Type">100000</span>, <span class="Type">rot_</span><span class="Statement">:</span> <span class="Type">0</span>, <span class="Type">style___</span>] <span class="Statement">:=</span> <span class="Identifier">Graphics</span>[{
    <span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], style,
    <span class="Identifier">Rotate</span>[<span class="Identifier">Point</span>[<span class="Identifier">game</span>[spec, numPoints]], rot]}];

<span class="Identifier">draw</span>[{<span class="Type">5</span>, <span class="Statement">.</span><span class="Type">8</span>}]

<span class="Comment">(*{vertex count, w factor, scale, base, root, prefix, polarity, clip range}*)</span>
<span class="Comment">(*Show[draw[{3, .12, .3, 3.9, .9, 1, -.5 E, 1}, 2000000, -Pi/6],</span>
<span class="Comment">   ImageSize -&gt; 2 1280] // Rasterize // ImageResize[#, Scaled[1/4]] &amp;*)</span>
</pre>
            </li>
        </ol>

        <p>
        Or something of a generalization. I blindly parameterized several parts of the formula. Some of the parameters are sensitive, but in any case it's easy to find spiffy images. The hard part is deciding which of them to put here. 3D version:
        </p>

        <ol class="flipbook static" name="parameterized fadeleaf 2">
            <li>
            <img src="img/sier3Drandermod6.png" width="640" height="734" />
            </li>
            <li>
            <img src="img/sier3Drandermod1.png" width="640" height="649" />
            </li>
            <li>
            <img src="img/sier3Drandermod2.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Drandermod5.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sier3Drandermod8.png" width="640" height="619" />
            </li>
            <li>
            <img src="img/sier3Drandermod11.png" width="640" height="639" />
            </li>
            <li name="source">
<pre style="font-size: 14px">
<span class="Identifier">Module</span>[{gameC},
  gameC <span class="Statement">=</span>
   <span class="Identifier">Compile</span>[{{vertices, <span class="Type">_Real</span>, <span class="Type">2</span>}, {spec, <span class="Type">_Real</span>, <span class="Type">1</span>}, {numPoints, <span class="Type">_Integer</span>, <span class="Type">0</span>}},
    <span class="Identifier">Module</span>[{diff, w, r, s, b, p, z, c},
     {w, s, b, r, p, z, c} <span class="Statement">=</span> spec;

     <span class="Identifier">FoldList</span>[(
        diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
        p <span class="Statement">#1</span> <span class="Statement">+</span> <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> z <span class="Statement">#2</span>) <span class="Identifier">Log</span>[b, (diff<span class="Statement">.</span>diff)<span class="Statement">^</span>(<span class="Type">1</span><span class="Statement">/</span>r) <span class="Statement">+</span> w], c {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}]) <span class="Statement">&amp;</span>,
      <span class="Identifier">Mean</span>[vertices] <span class="Identifier">RandomReal</span>[], <span class="Identifier">RandomChoice</span>[s vertices, numPoints]]]];

  <span class="Identifier">game</span>[<span class="Type">vertices_</span>, <span class="Type">spec_</span>, <span class="Type">numPoints_</span><span class="Statement">:</span> <span class="Type">100000</span>] <span class="Statement">:=</span>
   <span class="Identifier">gameC</span>[vertices, <span class="Identifier">PadRight</span>[spec, <span class="Type">7</span>, {<span class="Statement">.</span><span class="Type">5</span>, <span class="Type">1</span>, <span class="Identifier">E</span>, <span class="Type">2</span>, <span class="Type">0</span>, <span class="Type">1</span>, <span class="Type">2</span>}], numPoints]
  ];

<span class="Identifier">draw</span>[<span class="Type">vertices_</span>, <span class="Type">spec_</span>, <span class="Type">numPoints_</span><span class="Statement">:</span> <span class="Type">100000</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics3D</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">game</span>[vertices, spec, numPoints]]},
   options, Boxed <span class="Statement">-&gt;</span> <span class="Identifier">False</span>];

<span class="Comment">(*{w factor, scale, base, root, prefix, polarity, clip range}*)</span>

vertices <span class="Statement">=</span> <span class="Identifier">PolyhedronData</span>[{<span class="String">&quot;Dipyramid&quot;</span>, <span class="Type">5</span>}, <span class="String">&quot;VertexCoordinates&quot;</span>];
<span class="Identifier">draw</span>[vertices, {<span class="Statement">.</span><span class="Type">8</span>}, <span class="Type">200000</span>]

<span class="Comment">(*note.*)</span>
v2D <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">5</span>]<span class="Statement">/</span><span class="Type">5</span>);
{<span class="Identifier">Graphics</span>[<span class="Identifier">Point</span>[<span class="Identifier">game</span>[v2D, {<span class="Statement">.</span><span class="Type">8</span>}]]],
 <span class="Identifier">Graphics3D</span>[<span class="Identifier">Point</span>[<span class="Identifier">game</span>[{<span class="Statement">##</span>, <span class="Type">0</span>} <span class="Statement">&amp;</span> <span class="Statement">@@@</span> v2D, {<span class="Statement">.</span><span class="Type">8</span>}]]]}
</pre>
            </li>
            <li name="?">
            <img src="img/sier3Drandermod12.png" width="700" height="350" />
            </li>
        </ol>

        <p>
        I love how some of these look like sketches. You'd expect to find <span class="flipbookLink" name="parameterized fadeleaf 2" index="5">this</span> as an illustration in a wizard's journal, but it's actually from a <span style="font-family: monospace">Graphics3D</span> pane in my Mathematica notebook. This opportune <span class="flipbookLink" name="parameterized fadeleaf 2" index="2">box</span>, beside being the final confine of a truculent force, is the result of the clipping I use to keep the point from escaping. I set the clipping as a parameter because it can be used <span class="flipbookLink" name="parameterized fadeleaf 2" index="3">to effect</span>. 
        </p>

        <p>
        This clipping restriction isn't always necessary, and it might not be necessary for all points within a given figure, which raises an interesting prospect: What if we try to identify the points that fly off into infinity and those that don't?
        </p>

        <ol class="flipbook static" name="fadeleaf parameterspaceish">
            <li>
            <img src="img/sierranderparam6.png" width="550" height="550" />
            </li>
            <li>
            <img src="img/sierranderparam7.png" width="550" height="519" />
            </li>
            <li>
            <img src="img/sierranderparam9.png" width="550" height="550" />
            </li>
            <li>
            <img src="img/sierranderparam10.png" width="550" height="550" />
            </li>
            <li>
            <img src="img/sierranderparam14.png" width="550" height="550" />
            </li>
            <li>
            <ol class="flipbook static" name="mandelbrot set">
                <li name="image">
                <img src="img/siermandelbrot4.png" width="538" height="551" />
                </li>
                <li name="source">
<pre>
check <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{c, <span class="Type">_Complex</span>, <span class="Type">0</span>}},
   <span class="Identifier">Module</span>[{i <span class="Statement">=</span> <span class="Type">0</span>, z <span class="Statement">=</span> <span class="Type">0</span> <span class="Identifier">I</span>},
    <span class="Identifier">While</span>[
     <span class="Identifier">Abs</span>[z] <span class="Statement">&lt;</span> <span class="Identifier">Sqrt</span>[<span class="Type">2</span>] <span class="Statement">&amp;&amp;</span> i<span class="Statement">++</span> <span class="Statement">&lt;</span> <span class="Type">240</span>,
     z <span class="Statement">=</span> z<span class="Statement">^</span><span class="Type">2</span> <span class="Statement">+</span> c];
    <span class="Statement">-</span>i]];

<span class="Identifier">ImageAdjust</span><span class="Statement">@</span><span class="Identifier">Image</span><span class="Statement">@</span>
  <span class="Identifier">ParallelTable</span>[<span class="Identifier">check</span>[x <span class="Statement">+</span> y <span class="Identifier">I</span>],
   {y, <span class="Statement">-</span><span class="Type">1.1</span>, <span class="Type">1.1</span>, <span class="Statement">.</span><span class="Type">0035</span>}, {x, <span class="Statement">-</span><span class="Type">1.55</span>, <span class="Statement">.</span><span class="Type">6</span>, <span class="Statement">.</span><span class="Type">0035</span>}]
</pre>
                </li>
            </ol>
            </li>
            <li name="source">
<pre>
vertices <span class="Statement">=</span> <span class="Comment">(**)</span><span class="Type">5</span><span class="Comment">(**)</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>);

check <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{x, <span class="Type">_Real</span>, <span class="Type">0</span>}, {y, <span class="Type">_Real</span>, <span class="Type">0</span>}},
   <span class="Identifier">Module</span>[{i, b, diff, z <span class="Statement">=</span> {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}, vertices <span class="Statement">=</span> vertices},
    <span class="Identifier">Total</span><span class="Statement">@</span><span class="Identifier">Table</span>[
      i <span class="Statement">=</span> <span class="Type">0</span>; z <span class="Statement">=</span> {x, y};
      <span class="Identifier">While</span>[z<span class="Statement">.</span>z <span class="Statement">&lt;</span> <span class="Type">40</span> <span class="Statement">&amp;&amp;</span> i<span class="Statement">++</span> <span class="Statement">&lt;</span> <span class="Type">120</span>,
       b <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[vertices];
       diff <span class="Statement">=</span> b <span class="Statement">-</span> z;
       z <span class="Statement">=</span> (z <span class="Statement">+</span> b) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">01</span>]];
      <span class="Statement">-</span>i,
      {<span class="Type">20</span><span class="Comment">(*0*)(*number of trials*)</span>}]]];

img <span class="Statement">=</span> <span class="Identifier">ImageAdjust</span><span class="Statement">@</span><span class="Identifier">Image</span><span class="Statement">@</span>
    <span class="Identifier">ParallelTable</span>[<span class="Identifier">check</span>[x, y],
     {y, <span class="Statement">-</span><span class="Type">6.5</span>, <span class="Type">6.5</span>, <span class="Statement">.</span><span class="Type">01</span>}, {x, <span class="Statement">-</span><span class="Type">6.5</span>, <span class="Type">6.5</span>, <span class="Statement">.</span><span class="Type">01</span>}];

img <span class="Statement">//</span><span class="Identifier"> Colorize</span> <span class="Statement">//</span><span class="Identifier"> ImageResize</span>[<span class="Statement">#</span>, <span class="Type">550</span>] <span class="Statement">&amp;</span>
</pre>
            </li>
        </ol>

        <p>
        Here the white points go off into infinity quickly. The black points don't, or at least they take a lot longer to escape. There are certainly patterns here, but they're much less pronounced and computationally harder to reveal to than they are for the <span class="flipbookLink" name="fadeleaf parameterspaceish" index="6">Mandelbrot set</span>, which is the same idea for Julia iterations. But if you spin a few knobs you can find <span class="flipbookLink" name="fadeleaf parameterspaceish" index="3">interesting figures</span> irregardless. The different colors/shades are different escape speeds. It may not be immediately apparent, but these are fractals also.
        </p>

        <p>
        A lot of fractals have scaled/skewed characteristics, including the Mandelbrot set. I wonder if there's a non-trivial chaos game that can create the Mandelbrot set. Since we're skittering around complex numbers, is there an interesting complex-valued version of the logarithmic chaos game?
        </p>

        <ol class="flipbook static" name="complex fadeleaf maybe">
            <li>
            <img src="img/sierlogloglog2.png" width="640" height="446" />
            </li>
            <li>
            <img src="img/sierlogloglog5.png" width="640" height="527" />
            </li>
            <li title="Aliens">
            <img src="img/sierlogloglog9.png" width="750" height="466" />
            </li>
            <li>
            <img src="img/sierlogloglog4.png" width="640" height="481" />
            </li>
            <li name="source">
<pre>
game <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{v, <span class="Type">_Integer</span>, <span class="Type">0</span>}, {numPoints, <span class="Type">_Integer</span>, <span class="Type">0</span>}},
   <span class="Identifier">Module</span>[{vertices},
    vertices <span class="Statement">=</span><span class="Comment">(*1.5*)</span><span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

    <span class="Identifier">FoldList</span>[<span class="Comment">(*(Log[#1]+#2)/2&amp;*)</span>
     (<span class="Statement">#1</span> <span class="Statement">+</span> (<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) <span class="Identifier">Log</span>[<span class="Identifier">Sqrt</span>[<span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>] <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">7</span>])<span class="Statement">/</span><span class="Type">2.1</span> <span class="Statement">&amp;</span>, <span class="Statement">.</span><span class="Type">1</span>,
     <span class="Identifier">RandomChoice</span>[<span class="Identifier">N</span><span class="Statement">@</span>vertices, numPoints]]]];

<span class="Identifier">Graphics</span>[{<span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">1</span>], <span class="Identifier">PointSize</span>[<span class="Type">0</span>],
  <span class="Identifier">Point</span>[{<span class="Identifier">Im</span>[<span class="Statement">#</span>], <span class="Identifier">Re</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">game</span>[<span class="Type">2</span>, <span class="Type">400000</span>]]}]
</pre>
            </li>
        </ol>

        <p>
        I don't know. Strictly speaking there wouldn't be a difference, but if you put on a blindfold and chuck logarithms at Mathematica helter-skelter, <span class="flipbookLink" name="complex fadeleaf maybe" index="1">pretty pictures</span> eventually come out. So I guess the answer is some form of yes. Formally these might still be considered Julia sets.
        </p>

        <p>
        I've mentioned before that there are a lot of crazy distance functions out there for us to use in our chaos game, and there isn't anything special about the logarithm function. What do plots using other functions look like?
        </p>

        <ol class="flipbook static" name="fadeleaf samples">
            <li>
            <img src="img/sierrandergen15.png" width="616" height="634" />
            </li>
            <li>
            <img src="img/sierrandergen18.png" width="640" height="640" />
            </li>
            <li>
            <img src="img/sierrandergen3.png" width="640" height="583" />
            </li>
            <li>
            <img src="img/sierrandergen12.png" width="640" height="609" />
            </li>
            <li>
            <img src="img/sierrandergen11.png" width="640" height="570" />
            </li>
            <li>
            <img src="img/sierrandergen10.png" width="640" height="580" />
            </li>
            <li>
            <img src="img/sierrandergen14.png" width="640" height="624" />
            </li>
            <li>
            <img src="img/sierrandergen13.png" width="640" height="630" />
            </li>
            <li>
        <ol class="flipbook static" name="fadeleaf sine parameterspaceish">
            <li name="image">
            <img src="img/sierrandergenparameterspaceish3.png" width="550" height="550" />
            </li>
            <li name="source">
        <pre style="font-size: 12px">
vertices <span class="Statement">=</span> <span class="Comment">(**)</span><span class="Type">5</span><span class="Comment">(**)</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (<span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[<span class="Type">3</span>]<span class="Statement">/</span><span class="Type">3</span>);

check <span class="Statement">=</span> <span class="Identifier">Compile</span>[{{x, <span class="Type">_Real</span>, <span class="Type">0</span>}, {y, <span class="Type">_Real</span>, <span class="Type">0</span>}},
   <span class="Identifier">Module</span>[{i, b, diff, z <span class="Statement">=</span> {<span class="Type">0</span><span class="Statement">.</span>, <span class="Type">0</span><span class="Statement">.</span>}, vertices <span class="Statement">=</span> vertices},
    <span class="Identifier">Total</span><span class="Statement">@</span><span class="Identifier">Table</span>[
      i <span class="Statement">=</span> <span class="Type">0</span>; z <span class="Statement">=</span> {x, y};
      <span class="Identifier">While</span>[z<span class="Statement">.</span>z <span class="Statement">&lt;</span> <span class="Type">40</span> <span class="Statement">&amp;&amp;</span> i<span class="Statement">++</span> <span class="Statement">&lt;</span> <span class="Type">120</span>,
       b <span class="Statement">=</span> <span class="Identifier">RandomChoice</span>[vertices];
       diff <span class="Statement">=</span> b <span class="Statement">-</span> z;
       z <span class="Statement">=</span> (z <span class="Statement">+</span> b) <span class="Identifier">Sin</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> <span class="Statement">.</span><span class="Type">01</span>]];
      <span class="Statement">-</span>i,
      {<span class="Type">20</span><span class="Comment">(*0*)(*number of trials*)</span>}]]];

img <span class="Statement">=</span> <span class="Identifier">ImageAdjust</span><span class="Statement">@</span><span class="Identifier">Image</span><span class="Statement">@</span>
    <span class="Identifier">ParallelTable</span>[<span class="Identifier">check</span>[x, y],
     {y, <span class="Statement">-</span><span class="Type">6.5</span>, <span class="Type">6.5</span>, <span class="Statement">.</span><span class="Type">01</span>}, {x, <span class="Statement">-</span><span class="Type">6.5</span>, <span class="Type">6.5</span>, <span class="Statement">.</span><span class="Type">01</span>}];

img <span class="Statement">//</span><span class="Identifier"> Colorize</span> <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span> <span class="Statement">//</span><span class="Identifier"> ColorConvert</span>[<span class="Statement">#</span>, <span class="String">&quot;Grayscale&quot;</span>] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ImageAdjust</span> <span class="Statement">//</span>
    <span class="Identifier">ImageResize</span>[<span class="Statement">#</span>, <span class="Identifier">Scaled</span>[<span class="Type">1</span><span class="Statement">/</span><span class="Type">2</span>]] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ImageRotate</span>[<span class="Statement">#</span>, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2</span>] <span class="Statement">&amp;</span> <span class="Statement">//</span><span class="Identifier"> ColorNegate</span> <span class="Statement">//</span>
 <span class="Identifier">ImageApply</span>[<span class="Statement">#</span><span class="Statement">^</span>(<span class="Type">1</span><span class="Statement">/</span><span class="Type">1.3</span>) <span class="Statement">&amp;</span>, <span class="Statement">#</span>] <span class="Statement">&amp;</span></pre>
            </li>
        </ol>
            </li>
            <li name="source">
<pre>
<span class="Identifier">game</span>[<span class="Type">f_</span>, <span class="Type">rest__</span>] <span class="Statement">:=</span> rest <span class="Statement">//</span>
   <span class="Identifier">Compile</span>[{{v, <span class="Type">_Integer</span>}, {w, <span class="Type">_Real</span>}, {numPoints, <span class="Type">_Integer</span>}, {rot, <span class="Type">_Real</span>}},
    <span class="Identifier">Module</span>[{diff, tmp, vertices},
     vertices <span class="Statement">=</span> {<span class="Identifier">Cos</span>[<span class="Statement">#</span>], <span class="Identifier">Sin</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> (rot <span class="Statement">+</span> <span class="Type">2</span> <span class="Identifier">Pi</span> <span class="Identifier">Range</span>[v]<span class="Statement">/</span>v);

     <span class="Identifier">FoldList</span>[(
        diff <span class="Statement">=</span> <span class="Statement">#2</span> <span class="Statement">-</span> <span class="Statement">#1</span>;
        tmp <span class="Statement">=</span> <span class="Identifier">f</span>[<span class="Identifier">Sqrt</span>[diff<span class="Statement">.</span>diff] <span class="Statement">+</span> w];
        <span class="Identifier">Clip</span>[(<span class="Statement">#1</span> <span class="Statement">+</span> <span class="Statement">#2</span>) tmp, <span class="Type">24</span> {<span class="Statement">-</span><span class="Type">1</span>, <span class="Type">1</span>}]) <span class="Statement">&amp;</span>,
      {<span class="Type">0</span>, <span class="Type">0</span>}, <span class="Identifier">RandomChoice</span>[vertices, numPoints]]]];

<span class="Identifier">draw</span>[{<span class="Type">args__</span>}, <span class="Type">rot_</span><span class="Statement">:</span> <span class="Type">0</span>, <span class="Type">options___</span>] <span class="Statement">:=</span>
  <span class="Identifier">Graphics</span>[{<span class="Identifier">PointSize</span>[<span class="Type">0</span>], <span class="Identifier">Opacity</span>[<span class="Statement">.</span><span class="Type">25</span>],
    <span class="Identifier">Point</span>[<span class="Identifier">game</span>[args, rot]]}, options];

<span class="Identifier">draw</span>[{Sin, <span class="Type">5</span>, <span class="Statement">-</span><span class="Type">1.23</span>, <span class="Type">100000</span>}, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">10</span>]
<span class="Identifier">draw</span>[{Cos, <span class="Type">3</span>, <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">2.675</span>, <span class="Type">100000</span>}, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>]
<span class="Identifier">draw</span>[{RamanujanTauL, <span class="Type">5</span>, <span class="Type">3.1</span>, <span class="Type">10000</span>}, <span class="Statement">-</span><span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">10</span>]
</pre>
            </li>
        </ol>

        <p>
        They look just as awesome, of course. Here we have plots using the <span class="flipbookLink" name="fadeleaf samples" index="1">sine</span>, <span class="flipbookLink" name="fadeleaf samples" index="3">cosine</span>, and, you guessed it, <span class="flipbookLink" name="fadeleaf samples" index="4">Ramanujan tau Dirichlet L-function</span>. And this is using the same basic form as the logarithm version, without us even having to put on Loki's mask and get real buckwild. <span class="flipbookLink" name="fadeleaf samples" index="6">Speaking of masks</span>.
        </p>

        <p>
        Usually I don't pick favorites, but I like the <span class="flipbookLink" name="fadeleaf samples" index="3">cosine</span> image (of course sin/cos are just offsets of eachother) because it has an infinite number of folded sheet things that seem to have precise contours. I'll leave the 3Dification as an exercise, but not the <span class="flipbookLink" name="fadeleaf samples" index="9">how-fast-points-go-to-infinity plot</span>.
        </p>

        <p>
        The reason it's easy to get all these pictures without trying very hard is that the self-similarity is almost guaranteed by the chaos game algorithm. As we saw earlier, "move toward a point" amounts to the same thing as "make a resized copy of everything toward the perspective of that point."
        </p>

        <p>
        This is a simplification, but the point is that you essentially get the skeleton of self-similarity for free, or perhaps something a bit more broad. And more abstractly, I think some remarks could be made about the real number system itself.
        </p>

        <p>
        What does the Sierpinski triangle sound like? One easy interpretation is to consider the L-system construction for the triangle and convert different angles to different frequencies as the turtle makes the triangle:
        </p>

        <ol class="flipbook static" name="turtletone">
            <li>
            <img src="img/sierzrp5.png" width="360" height="63" />
            <br />
            <br />
            <a href="img/sierzrp1.mp3">mp3</a>&nbsp;&nbsp;<a href="img/sierzrp1.mid">midi</a>
            </li>
            <li>
            <img src="img/sierzrp6.png" width="360" height="63" />
            <br />
            <br />
            <a href="img/sierzrp2.mp3">mp3</a>&nbsp;&nbsp;<a href="img/sierzrp2.mid">midi</a>
            </li>
            <li name="source">
<pre style="font-size: 8px">
axiom <span class="Statement">=</span> A;
rules <span class="Statement">=</span> {A <span class="Statement">-&gt;</span> {B, R, A, R, B}, B <span class="Statement">-&gt;</span> {A, L, B, L, A}};
conversions <span class="Statement">=</span> {A <span class="Statement">-&gt;</span> forward, B <span class="Statement">-&gt;</span> forward, L <span class="Statement">-&gt;</span> left, R <span class="Statement">-&gt;</span> right};

<span class="Comment">(*state transformations*)</span>
<span class="Identifier">forward</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z <span class="Statement">+</span> <span class="Identifier">E</span><span class="Statement">^</span>(<span class="Identifier">I</span> theta), theta};
<span class="Identifier">left</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z, theta <span class="Statement">+</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};
<span class="Identifier">right</span>[{<span class="Type">z_</span>, <span class="Type">theta_</span>}] <span class="Statement">:=</span> {z, theta <span class="Statement">-</span> <span class="Type">2</span><span class="Statement">.</span> <span class="Identifier">Pi</span><span class="Statement">/</span><span class="Type">6</span>};

<span class="Identifier">sier</span>[<span class="Type">n_</span>] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{program, zs},
   program <span class="Statement">=</span> <span class="Identifier">Flatten</span>[<span class="Identifier">Nest</span>[<span class="Statement">#</span> <span class="Statement">/.</span> rules <span class="Statement">&amp;</span>, axiom, n]] <span class="Statement">/.</span> conversions;
   zs <span class="Statement">=</span> <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">ComposeList</span>[program, {<span class="Type">0</span>, <span class="Type">0</span>}];
   <span class="Identifier">First </span><span class="Statement">/@</span> <span class="Identifier">Split</span>[{<span class="Identifier">Re</span>[<span class="Statement">#</span>], <span class="Identifier">Im</span>[<span class="Statement">#</span>]} <span class="Statement">&amp;</span> <span class="Statement">/@</span> zs]];

<span class="Comment">(*convert angle into the given frequency range*)</span>
<span class="Identifier">freq</span>[<span class="Type">min_</span>, <span class="Type">max_</span>][<span class="Type">angle_</span>] <span class="Statement">:=</span> angle (max <span class="Statement">-</span> min)<span class="Statement">/</span><span class="Identifier">Pi</span> <span class="Statement">+</span> min;

<span class="Identifier">wave</span>[<span class="Type">coords_</span>, <span class="Type">dur_</span><span class="Statement">:</span> <span class="Type">10</span>, <span class="Type">freq_</span><span class="Statement">:</span> <span class="Identifier">freq</span>[<span class="Type">6</span>, <span class="Type">30</span>]] <span class="Statement">:=</span> <span class="Identifier">Module</span>[{angles, freqs},
   angles <span class="Statement">=</span> <span class="Identifier">Abs</span>[<span class="Identifier">ArcTan </span><span class="Statement">@@@</span> <span class="Identifier">Differences</span>[coords]];
   freqs <span class="Statement">=</span> <span class="Identifier">Round </span><span class="Statement">/@</span> <span class="Identifier">freq </span><span class="Statement">/@</span> angles;
   <span class="Identifier">Sound</span>[<span class="Identifier">SoundNote </span><span class="Statement">/@</span> freqs, dur]];

<span class="Identifier">wave</span>[<span class="Identifier">sier</span>[<span class="Type">3</span>], <span class="Type">5</span>, <span class="Identifier">freq</span>[<span class="Type">8</span>, <span class="Type">15</span>]]

<span class="Comment">(*overtones zomg*)</span>
<span class="Identifier">Sound</span>[{<span class="String">&quot;NewAge&quot;</span>,
  <span class="Identifier">wave</span>[<span class="Statement">#</span>, {<span class="Type">0</span>, <span class="Type">20</span>}] <span class="Statement">&amp;</span> <span class="Statement">/@</span> <span class="Identifier">Table</span>[
    <span class="Identifier">RotationTransform</span>[<span class="Type">2</span> <span class="Identifier">Pi</span> i<span class="Statement">/</span><span class="Type">4</span>] <span class="Statement">/@</span> <span class="Identifier">sier</span>[i], {i, <span class="Type">4</span>}]},
 SoundVolume <span class="Statement">-&gt;</span> <span class="Statement">.</span><span class="Type">8</span>]
</pre>
            </li>
        </ol>

        <p>
        It sounds totally lame. Not surprising since the L-system construction is simple. There is real power here though. This tonifier operates on coordinate lists of any kind, not just those produced by this particular L-system. And if you do things like layer different iterations on top of each other, you can get nifty <span class="flipbookLink" name="turtletone" index="2">chord thingies</span>.
        </p>

        <p>
        A variation of this would be to determine the waveform directly from the L-system. In a past life I made such a program in C#/WPF. It was around 1200 lines of code. In Mathematica it would be around 30 lines of code, and maybe around 150 lines total with a solid UI around it. It would also be about a million times more powerful/general/flexible. There's a lot of reasons for this, none of which have to do with math.
        </p>

        <p>
        Luckily for me I don't have to explain. The goddess of finishing projects has finally crawled out of her cave and seen fit to smite her lightning bolt through my ears and across my temporal lobe, for <span class="flipbookLink" name="turtletone" index="2">this tune</span> has sated and sedated the voices and quelled their cantankerous echoes. And so ends part 1.
        </p>

        </div>

        <div class="section" style="margin-top: 7px">
            <br/>
        <center>
            <img src="img/siermasterlock6.png" width="260" height="55" />
        </center>
        </div>

        <br />

        <center>
        <p style="font-size: 10px; max-width: 450px; text-align: left; margin-top: -3px">
        This page made while drinking Starbucks and listening to <a href="https://coldstorage.bandcamp.com/">CoLD SToRAGE</a>. If you know programming, consider contributing to <a href="http://www.mathics.org">Mathics</a>. If you're having trouble with the code snippets, try clearing all variables or restarting the kernel. If you're losing the formatting of copy-pasted code, and that annoys you, right click -&gt; insert code cell. For general Mathematica inquiries, visit <a href="http://mathematica.stackexchange.com">Mathematica.SE</a> or the <a href="http://community.wolfram.com">Wolfram Community</a>.
        </p>

        <p style="font-size: 10px; max-width: 450px; text-align: left; margin-top: -3px">
        With the exception of <a href="http://eol.org/data_objects/24794682">Mr. Scruples</a> who is under "CC BY NC SA", some of his companion source code stolen from StackExchange under "CC BY SA", and the geometry of our Brahman data cow whose license status is unknown, all images/animations/video/audio/source code on this page is in the public domain. It would be <i>the best thing ever</i> if you made money from my work. :D Also see <a href="http://community.wolfram.com/groups/-/m/t/138400">this post by Vitaliy Kaurov</a> for some fun info.
        </p>

        <p style="font-size: 10px; max-width: 450px; text-align: left; margin-top: -3px">Finally, if you're interested in sending me a message, hit me up at the developer email on my little calculator <a href="https://play.google.com/store/apps/details?id=com.projectfancycorn.hudcalc">app page</a>. As I'm generally busy trolling Twitch chat I might not be able to get back to you, but if such possible asymmetry doesn't deter you, feel free!
        </p>
        </center>

        <br />

        <div class="links centered" style="margin-top: -6px">
            <a href="/" title="home" style="color: #333333" class="pagelink">&lt;&lt;</a>
        </div>

    </div>

</body>
</html>
